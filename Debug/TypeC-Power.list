
TypeC-Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007084  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a28  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c84  08008c84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c84  08008c84  00018c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c8c  08008c8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  2000000c  08008ca0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  08008ca0  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001819a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e24  00000000  00000000  000381d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001488  00000000  00000000  0003b000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  0003c488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021742  00000000  00000000  0003d788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000125ec  00000000  00000000  0005eeca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbfc0  00000000  00000000  000714b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d476  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005644  00000000  00000000  0014d4f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007244 	.word	0x08007244

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007244 	.word	0x08007244

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800051e:	463b      	mov	r3, r7
 8000520:	2220      	movs	r2, #32
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f006 fe85 	bl	8007234 <memset>

  /** Common config
  */
  hadc2.Instance = ADC2;
 800052a:	4b48      	ldr	r3, [pc, #288]	; (800064c <MX_ADC2_Init+0x134>)
 800052c:	4a48      	ldr	r2, [pc, #288]	; (8000650 <MX_ADC2_Init+0x138>)
 800052e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000530:	4b46      	ldr	r3, [pc, #280]	; (800064c <MX_ADC2_Init+0x134>)
 8000532:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000536:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000538:	4b44      	ldr	r3, [pc, #272]	; (800064c <MX_ADC2_Init+0x134>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053e:	4b43      	ldr	r3, [pc, #268]	; (800064c <MX_ADC2_Init+0x134>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000544:	4b41      	ldr	r3, [pc, #260]	; (800064c <MX_ADC2_Init+0x134>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800054a:	4b40      	ldr	r3, [pc, #256]	; (800064c <MX_ADC2_Init+0x134>)
 800054c:	2201      	movs	r2, #1
 800054e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000550:	4b3e      	ldr	r3, [pc, #248]	; (800064c <MX_ADC2_Init+0x134>)
 8000552:	2208      	movs	r2, #8
 8000554:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000556:	4b3d      	ldr	r3, [pc, #244]	; (800064c <MX_ADC2_Init+0x134>)
 8000558:	2200      	movs	r2, #0
 800055a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800055c:	4b3b      	ldr	r3, [pc, #236]	; (800064c <MX_ADC2_Init+0x134>)
 800055e:	2200      	movs	r2, #0
 8000560:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 5;
 8000562:	4b3a      	ldr	r3, [pc, #232]	; (800064c <MX_ADC2_Init+0x134>)
 8000564:	2205      	movs	r2, #5
 8000566:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000568:	4b38      	ldr	r3, [pc, #224]	; (800064c <MX_ADC2_Init+0x134>)
 800056a:	2200      	movs	r2, #0
 800056c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000570:	4b36      	ldr	r3, [pc, #216]	; (800064c <MX_ADC2_Init+0x134>)
 8000572:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000578:	4b34      	ldr	r3, [pc, #208]	; (800064c <MX_ADC2_Init+0x134>)
 800057a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800057e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000580:	4b32      	ldr	r3, [pc, #200]	; (800064c <MX_ADC2_Init+0x134>)
 8000582:	2201      	movs	r2, #1
 8000584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000588:	4b30      	ldr	r3, [pc, #192]	; (800064c <MX_ADC2_Init+0x134>)
 800058a:	2200      	movs	r2, #0
 800058c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <MX_ADC2_Init+0x134>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000596:	482d      	ldr	r0, [pc, #180]	; (800064c <MX_ADC2_Init+0x134>)
 8000598:	f001 f9b4 	bl	8001904 <HAL_ADC_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80005a2:	f000 fb41 	bl	8000c28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a6:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <MX_ADC2_Init+0x13c>)
 80005a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005aa:	2306      	movs	r3, #6
 80005ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80005ae:	2307      	movs	r3, #7
 80005b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005b2:	237f      	movs	r3, #127	; 0x7f
 80005b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005b6:	2304      	movs	r3, #4
 80005b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	4619      	mov	r1, r3
 80005c2:	4822      	ldr	r0, [pc, #136]	; (800064c <MX_ADC2_Init+0x134>)
 80005c4:	f001 fbf8 	bl	8001db8 <HAL_ADC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80005ce:	f000 fb2b 	bl	8000c28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC2_Init+0x140>)
 80005d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d6:	230c      	movs	r3, #12
 80005d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	481b      	ldr	r0, [pc, #108]	; (800064c <MX_ADC2_Init+0x134>)
 80005e0:	f001 fbea 	bl	8001db8 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80005ea:	f000 fb1d 	bl	8000c28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_ADC2_Init+0x144>)
 80005f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005f2:	2312      	movs	r3, #18
 80005f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4619      	mov	r1, r3
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <MX_ADC2_Init+0x134>)
 80005fc:	f001 fbdc 	bl	8001db8 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8000606:	f000 fb0f 	bl	8000c28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_ADC2_Init+0x148>)
 800060c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800060e:	2318      	movs	r3, #24
 8000610:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC2_Init+0x134>)
 8000618:	f001 fbce 	bl	8001db8 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC2_Init+0x10e>
  {
    Error_Handler();
 8000622:	f000 fb01 	bl	8000c28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_ADC2_Init+0x14c>)
 8000628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800062a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC2_Init+0x134>)
 8000636:	f001 fbbf 	bl	8001db8 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC2_Init+0x12c>
  {
    Error_Handler();
 8000640:	f000 faf2 	bl	8000c28 <Error_Handler>
  }

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000028 	.word	0x20000028
 8000650:	50000100 	.word	0x50000100
 8000654:	04300002 	.word	0x04300002
 8000658:	08600004 	.word	0x08600004
 800065c:	0c900008 	.word	0x0c900008
 8000660:	10c00010 	.word	0x10c00010
 8000664:	14f00020 	.word	0x14f00020

08000668 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a37      	ldr	r2, [pc, #220]	; (8000764 <HAL_ADC_MspInit+0xfc>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d167      	bne.n	800075a <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <HAL_ADC_MspInit+0x100>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a36      	ldr	r2, [pc, #216]	; (8000768 <HAL_ADC_MspInit+0x100>)
 8000690:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b34      	ldr	r3, [pc, #208]	; (8000768 <HAL_ADC_MspInit+0x100>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b31      	ldr	r3, [pc, #196]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a30      	ldr	r2, [pc, #192]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80006d2:	23c3      	movs	r3, #195	; 0xc3
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f002 fe76 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ec:	2310      	movs	r3, #16
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	2303      	movs	r3, #3
 80006f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	481b      	ldr	r0, [pc, #108]	; (800076c <HAL_ADC_MspInit+0x104>)
 8000700:	f002 fe6a 	bl	80033d8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000706:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <HAL_ADC_MspInit+0x10c>)
 8000708:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <HAL_ADC_MspInit+0x108>)
 800070c:	2224      	movs	r2, #36	; 0x24
 800070e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_ADC_MspInit+0x108>)
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_ADC_MspInit+0x108>)
 800072c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000730:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000734:	2220      	movs	r2, #32
 8000736:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_ADC_MspInit+0x108>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000740:	f002 fb70 	bl	8002e24 <HAL_DMA_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800074a:	f000 fa6d 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000752:	655a      	str	r2, [r3, #84]	; 0x54
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	50000100 	.word	0x50000100
 8000768:	40021000 	.word	0x40021000
 800076c:	48000800 	.word	0x48000800
 8000770:	200000a8 	.word	0x200000a8
 8000774:	40020008 	.word	0x40020008

08000778 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2230      	movs	r2, #48	; 0x30
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f006 fd55 	bl	8007234 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_DAC1_Init+0x84>)
 800078c:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_DAC1_Init+0x88>)
 800078e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000790:	481a      	ldr	r0, [pc, #104]	; (80007fc <MX_DAC1_Init+0x84>)
 8000792:	f002 f8fe 	bl	8002992 <HAL_DAC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800079c:	f000 fa44 	bl	8000c28 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80007a0:	2302      	movs	r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_DAC1_Init+0x84>)
 80007cc:	f002 f97e 	bl	8002acc <HAL_DAC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80007d6:	f000 fa27 	bl	8000c28 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	2210      	movs	r2, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_DAC1_Init+0x84>)
 80007e6:	f002 f971 	bl	8002acc <HAL_DAC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 80007f0:	f000 fa1a 	bl	8000c28 <Error_Handler>
  }

}
 80007f4:	bf00      	nop
 80007f6:	3730      	adds	r7, #48	; 0x30
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000108 	.word	0x20000108
 8000800:	50000800 	.word	0x50000800

08000804 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a15      	ldr	r2, [pc, #84]	; (8000878 <HAL_DAC_MspInit+0x74>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d124      	bne.n	8000870 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_DAC_MspInit+0x78>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <HAL_DAC_MspInit+0x78>)
 800082c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_DAC_MspInit+0x78>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_DAC_MspInit+0x78>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_DAC_MspInit+0x78>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_DAC_MspInit+0x78>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000856:	2330      	movs	r3, #48	; 0x30
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f002 fdb4 	bl	80033d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	50000800 	.word	0x50000800
 800087c:	40021000 	.word	0x40021000

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_DMA_Init+0x50>)
 8000888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <MX_DMA_Init+0x50>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6493      	str	r3, [r2, #72]	; 0x48
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_DMA_Init+0x50>)
 8000894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_DMA_Init+0x50>)
 80008a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <MX_DMA_Init+0x50>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6493      	str	r3, [r2, #72]	; 0x48
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_DMA_Init+0x50>)
 80008ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	200b      	movs	r0, #11
 80008bc:	f002 f835 	bl	800292a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008c0:	200b      	movs	r0, #11
 80008c2:	f002 f84c 	bl	800295e <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ea:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <MX_GPIO_Init+0x124>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a42      	ldr	r2, [pc, #264]	; (80009f8 <MX_GPIO_Init+0x124>)
 80008f0:	f043 0320 	orr.w	r3, r3, #32
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <MX_GPIO_Init+0x124>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0320 	and.w	r3, r3, #32
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a3c      	ldr	r2, [pc, #240]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <MX_GPIO_Init+0x124>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a36      	ldr	r2, [pc, #216]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a30      	ldr	r2, [pc, #192]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CV_Pin|CC_Pin|OLED_D1_Pin|OLED_D0_Pin
 800094a:	2201      	movs	r2, #1
 800094c:	f643 4123 	movw	r1, #15395	; 0x3c23
 8000950:	482a      	ldr	r0, [pc, #168]	; (80009fc <MX_GPIO_Init+0x128>)
 8000952:	f002 fec3 	bl	80036dc <HAL_GPIO_WritePin>
                          |OLED_DC_Pin|OLED_RES_Pin|LED_HEART_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <MX_GPIO_Init+0x12c>)
 800095e:	f002 febd 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CV_Pin|CC_Pin|OLED_D1_Pin|OLED_D0_Pin
 8000962:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000966:	617b      	str	r3, [r7, #20]
                          |OLED_DC_Pin|OLED_RES_Pin|LED_HEART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4820      	ldr	r0, [pc, #128]	; (80009fc <MX_GPIO_Init+0x128>)
 800097c:	f002 fd2c 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15;
 8000980:	f24c 0304 	movw	r3, #49156	; 0xc004
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4819      	ldr	r0, [pc, #100]	; (80009fc <MX_GPIO_Init+0x128>)
 8000996:	f002 fd1f 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|POWER_CTRL_Pin;
 800099a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4814      	ldr	r0, [pc, #80]	; (8000a00 <MX_GPIO_Init+0x12c>)
 80009b0:	f002 fd12 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f002 fd04 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80009d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_GPIO_Init+0x12c>)
 80009ea:	f002 fcf5 	bl	80033d8 <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000400 	.word	0x48000400
 8000a00:	48000800 	.word	0x48000800

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  unsigned int i=0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0e:	f000 fcc8 	bl	80013a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f8a3 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f7ff ff5d 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a1a:	f7ff ff31 	bl	8000880 <MX_DMA_Init>
  MX_ADC2_Init();
 8000a1e:	f7ff fd7b 	bl	8000518 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000a22:	f7ff fea9 	bl	8000778 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8000a26:	f000 fbf9 	bl	800121c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000a2a:	f000 fa1d 	bl	8000e68 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000a2e:	f000 fa95 	bl	8000f5c <MX_TIM17_Init>
  MX_TIM4_Init();
 8000a32:	f000 f9c3 	bl	8000dbc <MX_TIM4_Init>
  MX_TIM2_Init();
 8000a36:	f000 f973 	bl	8000d20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000a3a:	f006 fb57 	bl	80070ec <OLED_Init>
  HAL_TIM_Base_Start(&htim2);
 8000a3e:	4840      	ldr	r0, [pc, #256]	; (8000b40 <main+0x13c>)
 8000a40:	f003 feae 	bl	80047a0 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc2,adc_buff,5);
 8000a44:	463b      	mov	r3, r7
 8000a46:	2205      	movs	r2, #5
 8000a48:	4619      	mov	r1, r3
 8000a4a:	483e      	ldr	r0, [pc, #248]	; (8000b44 <main+0x140>)
 8000a4c:	f001 f8e2 	bl	8001c14 <HAL_ADC_Start_DMA>

  HAL_TIMEx_PWMN_Start(&htim16,TIM_CHANNEL_1);
 8000a50:	2100      	movs	r1, #0
 8000a52:	483d      	ldr	r0, [pc, #244]	; (8000b48 <main+0x144>)
 8000a54:	f004 ff38 	bl	80058c8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim16,TIM_CHANNEL_1);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	483b      	ldr	r0, [pc, #236]	; (8000b48 <main+0x144>)
 8000a5c:	f003 ff64 	bl	8004928 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim17,TIM_CHANNEL_1);
 8000a60:	2100      	movs	r1, #0
 8000a62:	483a      	ldr	r0, [pc, #232]	; (8000b4c <main+0x148>)
 8000a64:	f004 ff30 	bl	80058c8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim17,TIM_CHANNEL_1);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4838      	ldr	r0, [pc, #224]	; (8000b4c <main+0x148>)
 8000a6c:	f003 ff5c 	bl	8004928 <HAL_TIM_PWM_Start>

  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	4835      	ldr	r0, [pc, #212]	; (8000b50 <main+0x14c>)
 8000a7a:	f001 ffff 	bl	8002a7c <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2048);
 8000a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a82:	2200      	movs	r2, #0
 8000a84:	2110      	movs	r1, #16
 8000a86:	4832      	ldr	r0, [pc, #200]	; (8000b50 <main+0x14c>)
 8000a88:	f001 fff8 	bl	8002a7c <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4830      	ldr	r0, [pc, #192]	; (8000b50 <main+0x14c>)
 8000a90:	f001 ffa1 	bl	80029d6 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000a94:	2110      	movs	r1, #16
 8000a96:	482e      	ldr	r0, [pc, #184]	; (8000b50 <main+0x14c>)
 8000a98:	f001 ff9d 	bl	80029d6 <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i = (i+1)%100;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	4a2c      	ldr	r2, [pc, #176]	; (8000b54 <main+0x150>)
 8000aa2:	fba2 1203 	umull	r1, r2, r2, r3
 8000aa6:	0952      	lsrs	r2, r2, #5
 8000aa8:	2164      	movs	r1, #100	; 0x64
 8000aaa:	fb01 f202 	mul.w	r2, r1, r2
 8000aae:	1a9b      	subs	r3, r3, r2
 8000ab0:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_TogglePin(LED_HEART_GPIO_Port, LED_HEART_Pin);
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4828      	ldr	r0, [pc, #160]	; (8000b58 <main+0x154>)
 8000ab6:	f002 fe29 	bl	800370c <HAL_GPIO_TogglePin>

	  OLED_ShowNum(0,8,adc_buff[0],4,16,1);
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f006 fa9d 	bl	8007008 <OLED_ShowNum>
	  OLED_ShowNum(0,24,adc_buff[1],4,16,1);
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2304      	movs	r3, #4
 8000ada:	2118      	movs	r1, #24
 8000adc:	2000      	movs	r0, #0
 8000ade:	f006 fa93 	bl	8007008 <OLED_ShowNum>
	  OLED_ShowNum(0,40,adc_buff[2],4,16,1);
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	2310      	movs	r3, #16
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2304      	movs	r3, #4
 8000aee:	2128      	movs	r1, #40	; 0x28
 8000af0:	2000      	movs	r0, #0
 8000af2:	f006 fa89 	bl	8007008 <OLED_ShowNum>
	  OLED_ShowNum(64,8,adc_buff[3],4,16,1);
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	2301      	movs	r3, #1
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	2310      	movs	r3, #16
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2304      	movs	r3, #4
 8000b02:	2108      	movs	r1, #8
 8000b04:	2040      	movs	r0, #64	; 0x40
 8000b06:	f006 fa7f 	bl	8007008 <OLED_ShowNum>
	  OLED_ShowNum(64,24,adc_buff[4],4,16,1);
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	2310      	movs	r3, #16
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2304      	movs	r3, #4
 8000b16:	2118      	movs	r1, #24
 8000b18:	2040      	movs	r0, #64	; 0x40
 8000b1a:	f006 fa75 	bl	8007008 <OLED_ShowNum>
	  OLED_Refresh();
 8000b1e:	f006 f8d5 	bl	8006ccc <OLED_Refresh>
	  __HAL_TIM_SetCompare(&htim16, TIM_CHANNEL_1, i*5);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <main+0x144>)
 8000b24:	6819      	ldr	r1, [r3, #0]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	634b      	str	r3, [r1, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim17, TIM_CHANNEL_1, i*5);
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <main+0x148>)
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	4613      	mov	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	634b      	str	r3, [r1, #52]	; 0x34
	  i = (i+1)%100;
 8000b3e:	e7ad      	b.n	8000a9c <main+0x98>
 8000b40:	200001b4 	.word	0x200001b4
 8000b44:	20000028 	.word	0x20000028
 8000b48:	20000200 	.word	0x20000200
 8000b4c:	20000168 	.word	0x20000168
 8000b50:	20000108 	.word	0x20000108
 8000b54:	51eb851f 	.word	0x51eb851f
 8000b58:	48000400 	.word	0x48000400

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0a4      	sub	sp, #144	; 0x90
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b66:	2238      	movs	r2, #56	; 0x38
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 fb62 	bl	8007234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2244      	movs	r2, #68	; 0x44
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 fb54 	bl	8007234 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f002 fdd7 	bl	8003740 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b92:	2301      	movs	r3, #1
 8000b94:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ba8:	2328      	movs	r3, #40	; 0x28
 8000baa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 fe6f 	bl	80038a8 <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000bd0:	f000 f82a 	bl	8000c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000be8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bec:	2104      	movs	r1, #4
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 f972 	bl	8003ed8 <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bfa:	f000 f815 	bl	8000c28 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8000bfe:	f248 0301 	movw	r3, #32769	; 0x8001
 8000c02:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fb7d 	bl	8004310 <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c1c:	f000 f804 	bl	8000c28 <Error_Handler>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3790      	adds	r7, #144	; 0x90
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <Error_Handler+0x6>

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x44>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_MspInit+0x44>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6613      	str	r3, [r2, #96]	; 0x60
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_MspInit+0x44>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_MspInit+0x44>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x44>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x44>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c66:	f002 fe0f 	bl	8003888 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 fbc0 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA1_Channel1_IRQHandler+0x10>)
 8000cd2:	f002 fa31 	bl	8003138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000a8 	.word	0x200000a8

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f005 f857 	bl	8005d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000024c 	.word	0x2000024c

08000cf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <SystemInit+0x28>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <SystemInit+0x28>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SystemInit+0x28>)
 8000d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d48:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d56:	2263      	movs	r2, #99	; 0x63
 8000d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d66:	4814      	ldr	r0, [pc, #80]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d68:	f003 fcc2 	bl	80046f0 <HAL_TIM_Base_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d72:	f7ff ff59 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4619      	mov	r1, r3
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000d84:	f004 f886 	bl	8004e94 <HAL_TIM_ConfigClockSource>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d8e:	f7ff ff4b 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d92:	2320      	movs	r3, #32
 8000d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_TIM2_Init+0x98>)
 8000da0:	f004 fe46 	bl	8005a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000daa:	f7ff ff3d 	bl	8000c28 <Error_Handler>
  }

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200001b4 	.word	0x200001b4

08000dbc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	; 0x30
 8000dc0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	2224      	movs	r2, #36	; 0x24
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f006 fa32 	bl	8007234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_TIM4_Init+0xa4>)
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_TIM4_Init+0xa8>)
 8000dde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_TIM4_Init+0xa4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_TIM4_Init+0xa4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_TIM4_Init+0xa4>)
 8000dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_TIM4_Init+0xa4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_TIM4_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_TIM4_Init+0xa4>)
 8000e2c:	f003 fe7c 	bl	8004b28 <HAL_TIM_Encoder_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000e36:	f7ff fef7 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <MX_TIM4_Init+0xa4>)
 8000e48:	f004 fdf2 	bl	8005a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000e52:	f7ff fee9 	bl	8000c28 <Error_Handler>
  }

}
 8000e56:	bf00      	nop
 8000e58:	3730      	adds	r7, #48	; 0x30
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000011c 	.word	0x2000011c
 8000e64:	40000800 	.word	0x40000800

08000e68 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	; 0x50
 8000e6c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2234      	movs	r2, #52	; 0x34
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 f9d3 	bl	8007234 <memset>

  htim16.Instance = TIM16;
 8000e8e:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000e90:	4a31      	ldr	r2, [pc, #196]	; (8000f58 <MX_TIM16_Init+0xf0>)
 8000e92:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000e96:	2207      	movs	r2, #7
 8000e98:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000ea2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000eae:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000eba:	4826      	ldr	r0, [pc, #152]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000ebc:	f003 fc18 	bl	80046f0 <HAL_TIM_Base_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ec6:	f7ff feaf 	bl	8000c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000eca:	4822      	ldr	r0, [pc, #136]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000ecc:	f003 fcca 	bl	8004864 <HAL_TIM_PWM_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000ed6:	f7ff fea7 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eda:	2360      	movs	r3, #96	; 0x60
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500;
 8000ede:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000efc:	2200      	movs	r2, #0
 8000efe:	4619      	mov	r1, r3
 8000f00:	4814      	ldr	r0, [pc, #80]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000f02:	f003 feb7 	bl	8004c74 <HAL_TIM_PWM_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000f0c:	f7ff fe8c 	bl	8000c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000f38:	f004 fdfc 	bl	8005b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8000f42:	f7ff fe71 	bl	8000c28 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <MX_TIM16_Init+0xec>)
 8000f48:	f000 f90c 	bl	8001164 <HAL_TIM_MspPostInit>

}
 8000f4c:	bf00      	nop
 8000f4e:	3750      	adds	r7, #80	; 0x50
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000200 	.word	0x20000200
 8000f58:	40014400 	.word	0x40014400

08000f5c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2234      	movs	r2, #52	; 0x34
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f006 f959 	bl	8007234 <memset>

  htim17.Instance = TIM17;
 8000f82:	4b31      	ldr	r3, [pc, #196]	; (8001048 <MX_TIM17_Init+0xec>)
 8000f84:	4a31      	ldr	r2, [pc, #196]	; (800104c <MX_TIM17_Init+0xf0>)
 8000f86:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7;
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <MX_TIM17_Init+0xec>)
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <MX_TIM17_Init+0xec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <MX_TIM17_Init+0xec>)
 8000f96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f9a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <MX_TIM17_Init+0xec>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <MX_TIM17_Init+0xec>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <MX_TIM17_Init+0xec>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000fae:	4826      	ldr	r0, [pc, #152]	; (8001048 <MX_TIM17_Init+0xec>)
 8000fb0:	f003 fb9e 	bl	80046f0 <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000fba:	f7ff fe35 	bl	8000c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <MX_TIM17_Init+0xec>)
 8000fc0:	f003 fc50 	bl	8004864 <HAL_TIM_PWM_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000fca:	f7ff fe2d 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fce:	2360      	movs	r3, #96	; 0x60
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500;
 8000fd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_TIM17_Init+0xec>)
 8000ff6:	f003 fe3d 	bl	8004c74 <HAL_TIM_PWM_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8001000:	f7ff fe12 	bl	8000c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 2;
 8001010:	2302      	movs	r3, #2
 8001012:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <MX_TIM17_Init+0xec>)
 800102c:	f004 fd82 	bl	8005b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8001036:	f7ff fdf7 	bl	8000c28 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <MX_TIM17_Init+0xec>)
 800103c:	f000 f892 	bl	8001164 <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3750      	adds	r7, #80	; 0x50
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000168 	.word	0x20000168
 800104c:	40014800 	.word	0x40014800

08001050 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001060:	d10c      	bne.n	800107c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_TIM_Base_MspInit+0x80>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <HAL_TIM_Base_MspInit+0x80>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6593      	str	r3, [r2, #88]	; 0x58
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_TIM_Base_MspInit+0x80>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800107a:	e022      	b.n	80010c2 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_TIM_Base_MspInit+0x84>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10c      	bne.n	80010a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_TIM_Base_MspInit+0x80>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <HAL_TIM_Base_MspInit+0x80>)
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	6613      	str	r3, [r2, #96]	; 0x60
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_TIM_Base_MspInit+0x80>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
}
 800109e:	e010      	b.n	80010c2 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM17)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_TIM_Base_MspInit+0x88>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10b      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_TIM_Base_MspInit+0x80>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_TIM_Base_MspInit+0x80>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6613      	str	r3, [r2, #96]	; 0x60
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_TIM_Base_MspInit+0x80>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40014400 	.word	0x40014400
 80010d8:	40014800 	.word	0x40014800

080010dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a18      	ldr	r2, [pc, #96]	; (800115c <HAL_TIM_Encoder_MspInit+0x80>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d129      	bne.n	8001152 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_TIM_Encoder_MspInit+0x84>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_TIM_Encoder_MspInit+0x84>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6593      	str	r3, [r2, #88]	; 0x58
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_TIM_Encoder_MspInit+0x84>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_TIM_Encoder_MspInit+0x84>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_TIM_Encoder_MspInit+0x84>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_TIM_Encoder_MspInit+0x84>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800112e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001140:	230a      	movs	r3, #10
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f002 f943 	bl	80033d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40000800 	.word	0x40000800
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a22      	ldr	r2, [pc, #136]	; (800120c <HAL_TIM_MspPostInit+0xa8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d11c      	bne.n	80011c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_TIM_MspPostInit+0xac>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a21      	ldr	r2, [pc, #132]	; (8001210 <HAL_TIM_MspPostInit+0xac>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <HAL_TIM_MspPostInit+0xac>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800119e:	2350      	movs	r3, #80	; 0x50
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4816      	ldr	r0, [pc, #88]	; (8001214 <HAL_TIM_MspPostInit+0xb0>)
 80011ba:	f002 f90d 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80011be:	e021      	b.n	8001204 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM17)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <HAL_TIM_MspPostInit+0xb4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d11c      	bne.n	8001204 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_TIM_MspPostInit+0xac>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_TIM_MspPostInit+0xac>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_TIM_MspPostInit+0xac>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80011e2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80011f4:	2301      	movs	r3, #1
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_TIM_MspPostInit+0xb0>)
 8001200:	f002 f8ea 	bl	80033d8 <HAL_GPIO_Init>
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40014400 	.word	0x40014400
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400
 8001218:	40014800 	.word	0x40014800

0800121c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 8001222:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <MX_USART1_UART_Init+0x98>)
 8001224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	4811      	ldr	r0, [pc, #68]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 800126a:	f004 fd28 	bl	8005cbe <HAL_MultiProcessor_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001274:	f7ff fcd8 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001278:	2100      	movs	r1, #0
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 800127c:	f005 fbdc 	bl	8006a38 <HAL_UARTEx_SetTxFifoThreshold>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001286:	f7ff fccf 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800128a:	2100      	movs	r1, #0
 800128c:	4808      	ldr	r0, [pc, #32]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 800128e:	f005 fc11 	bl	8006ab4 <HAL_UARTEx_SetRxFifoThreshold>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001298:	f7ff fcc6 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 800129e:	f005 fb92 	bl	80069c6 <HAL_UARTEx_DisableFifoMode>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80012a8:	f7ff fcbe 	bl	8000c28 <Error_Handler>
  }

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000024c 	.word	0x2000024c
 80012b4:	40013800 	.word	0x40013800

080012b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <HAL_UART_MspInit+0x90>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d131      	bne.n	800133e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_UART_MspInit+0x94>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	4a1b      	ldr	r2, [pc, #108]	; (800134c <HAL_UART_MspInit+0x94>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6613      	str	r3, [r2, #96]	; 0x60
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_UART_MspInit+0x94>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_UART_MspInit+0x94>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	4a15      	ldr	r2, [pc, #84]	; (800134c <HAL_UART_MspInit+0x94>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_UART_MspInit+0x94>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800130a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001310:	2312      	movs	r3, #18
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800131c:	2307      	movs	r3, #7
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f002 f855 	bl	80033d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2025      	movs	r0, #37	; 0x25
 8001334:	f001 faf9 	bl	800292a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001338:	2025      	movs	r0, #37	; 0x25
 800133a:	f001 fb10 	bl	800295e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40013800 	.word	0x40013800
 800134c:	40021000 	.word	0x40021000

08001350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001352:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <LoopForever+0x6>)
  ldr r1, =_edata
 8001356:	490e      	ldr	r1, [pc, #56]	; (8001390 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <LoopForever+0xe>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopForever+0x12>)
  ldr r4, =_ebss
 800136c:	4c0b      	ldr	r4, [pc, #44]	; (800139c <LoopForever+0x16>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800137a:	f7ff fcbb 	bl	8000cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f005 ff35 	bl	80071ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001382:	f7ff fb3f 	bl	8000a04 <main>

08001386 <LoopForever>:

LoopForever:
    b LoopForever
 8001386:	e7fe      	b.n	8001386 <LoopForever>
  ldr   r0, =_estack
 8001388:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001394:	08008c94 	.word	0x08008c94
  ldr r2, =_sbss
 8001398:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800139c:	2000075c 	.word	0x2000075c

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>

080013a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f001 fab1 	bl	8002914 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f80e 	bl	80013d4 <HAL_InitTick>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	e001      	b.n	80013c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c4:	f7ff fc34 	bl	8000c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c8:	79fb      	ldrb	r3, [r7, #7]

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_InitTick+0x68>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d022      	beq.n	800142e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_InitTick+0x6c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <HAL_InitTick+0x68>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 fabc 	bl	800297a <HAL_SYSTICK_Config>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10f      	bne.n	8001428 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	d809      	bhi.n	8001422 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140e:	2200      	movs	r2, #0
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	f04f 30ff 	mov.w	r0, #4294967295
 8001416:	f001 fa88 	bl	800292a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_InitTick+0x70>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e007      	b.n	8001432 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e004      	b.n	8001432 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e001      	b.n	8001432 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000008 	.word	0x20000008
 8001440:	20000000 	.word	0x20000000
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x1c>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x20>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4413      	add	r3, r2
 8001456:	4a03      	ldr	r2, [pc, #12]	; (8001464 <HAL_IncTick+0x1c>)
 8001458:	6013      	str	r3, [r2, #0]
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	200002d8 	.word	0x200002d8
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200002d8 	.word	0x200002d8

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff ffee 	bl	800146c <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d004      	beq.n	80014a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_Delay+0x40>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a8:	bf00      	nop
 80014aa:	f7ff ffdf 	bl	800146c <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d8f7      	bhi.n	80014aa <HAL_Delay+0x26>
  {
  }
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008

080014c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3360      	adds	r3, #96	; 0x60
 8001542:	461a      	mov	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <LL_ADC_SetOffset+0x44>)
 8001552:	4013      	ands	r3, r2
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	4313      	orrs	r3, r2
 8001560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001568:	bf00      	nop
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	03fff000 	.word	0x03fff000

08001578 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3360      	adds	r3, #96	; 0x60
 8001586:	461a      	mov	r2, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3360      	adds	r3, #96	; 0x60
 80015b4:	461a      	mov	r2, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ce:	bf00      	nop
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015da:	b480      	push	{r7}
 80015dc:	b087      	sub	sp, #28
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3360      	adds	r3, #96	; 0x60
 80015ea:	461a      	mov	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	431a      	orrs	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001604:	bf00      	nop
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3360      	adds	r3, #96	; 0x60
 8001620:	461a      	mov	r2, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	431a      	orrs	r2, r3
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800163a:	bf00      	nop
 800163c:	371c      	adds	r7, #28
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	615a      	str	r2, [r3, #20]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001692:	b480      	push	{r7}
 8001694:	b087      	sub	sp, #28
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3330      	adds	r3, #48	; 0x30
 80016a2:	461a      	mov	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	4413      	add	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	211f      	movs	r1, #31
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	401a      	ands	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0e9b      	lsrs	r3, r3, #26
 80016ca:	f003 011f 	and.w	r1, r3, #31
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b087      	sub	sp, #28
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3314      	adds	r3, #20
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	0e5b      	lsrs	r3, r3, #25
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	4413      	add	r3, r2
 8001708:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	0d1b      	lsrs	r3, r3, #20
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2107      	movs	r1, #7
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	401a      	ands	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	0d1b      	lsrs	r3, r3, #20
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	431a      	orrs	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001734:	bf00      	nop
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001758:	43db      	mvns	r3, r3
 800175a:	401a      	ands	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0318 	and.w	r3, r3, #24
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001764:	40d9      	lsrs	r1, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	400b      	ands	r3, r1
 800176a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176e:	431a      	orrs	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	0007ffff 	.word	0x0007ffff

08001788 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 031f 	and.w	r3, r3, #31
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6093      	str	r3, [r2, #8]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017dc:	d101      	bne.n	80017e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001804:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800182c:	d101      	bne.n	8001832 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001850:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <LL_ADC_IsEnabled+0x18>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <LL_ADC_IsEnabled+0x1a>
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800189e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a2:	f043 0204 	orr.w	r2, r3, #4
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d101      	bne.n	80018ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d101      	bne.n	80018f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e16b      	b.n	8001bf6 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	2b00      	cmp	r3, #0
 800192a:	d109      	bne.n	8001940 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7fe fe9b 	bl	8000668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff3f 	bl	80017c8 <LL_ADC_IsDeepPowerDownEnabled>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d004      	beq.n	800195a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff25 	bl	80017a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff5a 	bl	8001818 <LL_ADC_IsInternalRegulatorEnabled>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d113      	bne.n	8001992 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff3e 	bl	80017f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001974:	4ba2      	ldr	r3, [pc, #648]	; (8001c00 <HAL_ADC_Init+0x2fc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	099b      	lsrs	r3, r3, #6
 800197a:	4aa2      	ldr	r2, [pc, #648]	; (8001c04 <HAL_ADC_Init+0x300>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	099b      	lsrs	r3, r3, #6
 8001982:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001984:	e002      	b.n	800198c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	3b01      	subs	r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f9      	bne.n	8001986 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff3e 	bl	8001818 <LL_ADC_IsInternalRegulatorEnabled>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10d      	bne.n	80019be <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a6:	f043 0210 	orr.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff77 	bl	80018b6 <LL_ADC_REG_IsConversionOngoing>
 80019c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 8106 	bne.w	8001be4 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 8102 	bne.w	8001be4 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019e8:	f043 0202 	orr.w	r2, r3, #2
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff37 	bl	8001868 <LL_ADC_IsEnabled>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d111      	bne.n	8001a24 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a04:	f7ff ff30 	bl	8001868 <LL_ADC_IsEnabled>
 8001a08:	4604      	mov	r4, r0
 8001a0a:	487f      	ldr	r0, [pc, #508]	; (8001c08 <HAL_ADC_Init+0x304>)
 8001a0c:	f7ff ff2c 	bl	8001868 <LL_ADC_IsEnabled>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4323      	orrs	r3, r4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	487b      	ldr	r0, [pc, #492]	; (8001c0c <HAL_ADC_Init+0x308>)
 8001a20:	f7ff fd52 	bl	80014c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7f5b      	ldrb	r3, [r3, #29]
 8001a28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d106      	bne.n	8001a60 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	3b01      	subs	r3, #1
 8001a58:	045b      	lsls	r3, r3, #17
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_ADC_Init+0x30c>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	69b9      	ldr	r1, [r7, #24]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff03 	bl	80018b6 <LL_ADC_REG_IsConversionOngoing>
 8001ab0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff10 	bl	80018dc <LL_ADC_INJ_IsConversionOngoing>
 8001abc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d16d      	bne.n	8001ba0 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d16a      	bne.n	8001ba0 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ace:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ad6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ae6:	f023 0302 	bic.w	r3, r3, #2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d017      	beq.n	8001b2c <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6911      	ldr	r1, [r2, #16]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001b2a:	e013      	b.n	8001b54 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d118      	bne.n	8001b90 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b74:	4311      	orrs	r1, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b7a:	4311      	orrs	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b80:	430a      	orrs	r2, r1
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	e007      	b.n	8001ba0 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f023 010f 	bic.w	r1, r3, #15
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	1e5a      	subs	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc0:	e007      	b.n	8001bd2 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 020f 	bic.w	r2, r2, #15
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd6:	f023 0303 	bic.w	r3, r3, #3
 8001bda:	f043 0201 	orr.w	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001be2:	e007      	b.n	8001bf4 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	f043 0210 	orr.w	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000000 	.word	0x20000000
 8001c04:	053e2d63 	.word	0x053e2d63
 8001c08:	50000100 	.word	0x50000100
 8001c0c:	50000300 	.word	0x50000300
 8001c10:	fff04007 	.word	0xfff04007

08001c14 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c20:	4851      	ldr	r0, [pc, #324]	; (8001d68 <HAL_ADC_Start_DMA+0x154>)
 8001c22:	f7ff fdb1 	bl	8001788 <LL_ADC_GetMultimode>
 8001c26:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe42 	bl	80018b6 <LL_ADC_REG_IsConversionOngoing>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 808f 	bne.w	8001d58 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_Start_DMA+0x34>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e08a      	b.n	8001d5e <HAL_ADC_Start_DMA+0x14a>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d002      	beq.n	8001c62 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b09      	cmp	r3, #9
 8001c60:	d173      	bne.n	8001d4a <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fc98 	bl	8002598 <ADC_Enable>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d166      	bne.n	8001d40 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a38      	ldr	r2, [pc, #224]	; (8001d6c <HAL_ADC_Start_DMA+0x158>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d002      	beq.n	8001c96 <HAL_ADC_Start_DMA+0x82>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	e001      	b.n	8001c9a <HAL_ADC_Start_DMA+0x86>
 8001c96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d002      	beq.n	8001ca8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc4:	f023 0206 	bic.w	r2, r3, #6
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	661a      	str	r2, [r3, #96]	; 0x60
 8001ccc:	e002      	b.n	8001cd4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd8:	4a25      	ldr	r2, [pc, #148]	; (8001d70 <HAL_ADC_Start_DMA+0x15c>)
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	4a24      	ldr	r2, [pc, #144]	; (8001d74 <HAL_ADC_Start_DMA+0x160>)
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <HAL_ADC_Start_DMA+0x164>)
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	221c      	movs	r2, #28
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0210 	orr.w	r2, r2, #16
 8001d0a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3340      	adds	r3, #64	; 0x40
 8001d26:	4619      	mov	r1, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f001 f922 	bl	8002f74 <HAL_DMA_Start_IT>
 8001d30:	4603      	mov	r3, r0
 8001d32:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fda8 	bl	800188e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d3e:	e00d      	b.n	8001d5c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001d48:	e008      	b.n	8001d5c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001d56:	e001      	b.n	8001d5c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	50000300 	.word	0x50000300
 8001d6c:	50000100 	.word	0x50000100
 8001d70:	0800264d 	.word	0x0800264d
 8001d74:	08002725 	.word	0x08002725
 8001d78:	08002741 	.word	0x08002741

08001d7c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0b6      	sub	sp, #216	; 0xd8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x22>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e3c7      	b.n	800256a <HAL_ADC_ConfigChannel+0x7b2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fd65 	bl	80018b6 <LL_ADC_REG_IsConversionOngoing>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 83ac 	bne.w	800254c <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	f7ff fc46 	bl	8001692 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fd53 	bl	80018b6 <LL_ADC_REG_IsConversionOngoing>
 8001e10:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fd5f 	bl	80018dc <LL_ADC_INJ_IsConversionOngoing>
 8001e1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 81d9 	bne.w	80021de <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f040 81d4 	bne.w	80021de <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e3e:	d10f      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f7ff fc4d 	bl	80016ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fbf4 	bl	8001646 <LL_ADC_SetSamplingTimeCommonConfig>
 8001e5e:	e00e      	b.n	8001e7e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f7ff fc3c 	bl	80016ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fbe4 	bl	8001646 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d022      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6919      	ldr	r1, [r3, #16]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eb0:	f7ff fb3e 	bl	8001530 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6919      	ldr	r1, [r3, #16]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f7ff fb8a 	bl	80015da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	7f1b      	ldrb	r3, [r3, #28]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d102      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x124>
 8001ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eda:	e000      	b.n	8001ede <HAL_ADC_ConfigChannel+0x126>
 8001edc:	2300      	movs	r3, #0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f7ff fb96 	bl	8001610 <LL_ADC_SetOffsetSaturation>
 8001ee4:	e17b      	b.n	80021de <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fb43 	bl	8001578 <LL_ADC_GetOffsetChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x15a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fb38 	bl	8001578 <LL_ADC_GetOffsetChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	0e9b      	lsrs	r3, r3, #26
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	e01e      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x198>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fb2d 	bl	8001578 <LL_ADC_GetOffsetChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	e004      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001f44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1b0>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	e018      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x1e2>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	e004      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d106      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fafc 	bl	80015a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fae0 	bl	8001578 <LL_ADC_GetOffsetChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10a      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x220>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fad5 	bl	8001578 <LL_ADC_GetOffsetChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	f003 021f 	and.w	r2, r3, #31
 8001fd6:	e01e      	b.n	8002016 <HAL_ADC_ConfigChannel+0x25e>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff faca 	bl	8001578 <LL_ADC_GetOffsetChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e004      	b.n	8002014 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800200a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <HAL_ADC_ConfigChannel+0x276>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0e9b      	lsrs	r3, r3, #26
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	e018      	b.n	8002060 <HAL_ADC_ConfigChannel+0x2a8>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002042:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800204a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e004      	b.n	8002060 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002056:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	429a      	cmp	r2, r3
 8002062:	d106      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2200      	movs	r2, #0
 800206a:	2101      	movs	r1, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fa99 	bl	80015a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2102      	movs	r1, #2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fa7d 	bl	8001578 <LL_ADC_GetOffsetChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <HAL_ADC_ConfigChannel+0x2e6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2102      	movs	r1, #2
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fa72 	bl	8001578 <LL_ADC_GetOffsetChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	0e9b      	lsrs	r3, r3, #26
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	e01e      	b.n	80020dc <HAL_ADC_ConfigChannel+0x324>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2102      	movs	r1, #2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fa67 	bl	8001578 <LL_ADC_GetOffsetChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e004      	b.n	80020da <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80020d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x33c>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0e9b      	lsrs	r3, r3, #26
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	e016      	b.n	8002122 <HAL_ADC_ConfigChannel+0x36a>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800210c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002114:	2320      	movs	r3, #32
 8002116:	e004      	b.n	8002122 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	429a      	cmp	r2, r3
 8002124:	d106      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	2102      	movs	r1, #2
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fa38 	bl	80015a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2103      	movs	r1, #3
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fa1c 	bl	8001578 <LL_ADC_GetOffsetChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10a      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x3a8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2103      	movs	r1, #3
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fa11 	bl	8001578 <LL_ADC_GetOffsetChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	f003 021f 	and.w	r2, r3, #31
 800215e:	e017      	b.n	8002190 <HAL_ADC_ConfigChannel+0x3d8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2103      	movs	r1, #3
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fa06 	bl	8001578 <LL_ADC_GetOffsetChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800217a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800217c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e003      	b.n	800218e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x3f0>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	e011      	b.n	80021cc <HAL_ADC_ConfigChannel+0x414>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80021c0:	2320      	movs	r3, #32
 80021c2:	e003      	b.n	80021cc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80021c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d106      	bne.n	80021de <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2103      	movs	r1, #3
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f9e3 	bl	80015a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fb40 	bl	8001868 <LL_ADC_IsEnabled>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8140 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	461a      	mov	r2, r3
 80021fe:	f7ff fa9f 	bl	8001740 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4a8f      	ldr	r2, [pc, #572]	; (8002444 <HAL_ADC_ConfigChannel+0x68c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	f040 8131 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10b      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x47e>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	0e9b      	lsrs	r3, r3, #26
 8002224:	3301      	adds	r3, #1
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2b09      	cmp	r3, #9
 800222c:	bf94      	ite	ls
 800222e:	2301      	movls	r3, #1
 8002230:	2300      	movhi	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	e019      	b.n	800226a <HAL_ADC_ConfigChannel+0x4b2>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002246:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800224e:	2320      	movs	r3, #32
 8002250:	e003      	b.n	800225a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	2b09      	cmp	r3, #9
 8002262:	bf94      	ite	ls
 8002264:	2301      	movls	r3, #1
 8002266:	2300      	movhi	r3, #0
 8002268:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800226a:	2b00      	cmp	r3, #0
 800226c:	d079      	beq.n	8002362 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d107      	bne.n	800228a <HAL_ADC_ConfigChannel+0x4d2>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	3301      	adds	r3, #1
 8002282:	069b      	lsls	r3, r3, #26
 8002284:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002288:	e015      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x4fe>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800229a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800229c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80022a2:	2320      	movs	r3, #32
 80022a4:	e003      	b.n	80022ae <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80022a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	069b      	lsls	r3, r3, #26
 80022b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x51e>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	3301      	adds	r3, #1
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	e017      	b.n	8002306 <HAL_ADC_ConfigChannel+0x54e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e003      	b.n	80022fa <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80022f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	ea42 0103 	orr.w	r1, r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <HAL_ADC_ConfigChannel+0x574>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	3301      	adds	r3, #1
 800231e:	f003 021f 	and.w	r2, r3, #31
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	051b      	lsls	r3, r3, #20
 800232a:	e018      	b.n	800235e <HAL_ADC_ConfigChannel+0x5a6>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800233a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800233e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	e003      	b.n	8002350 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235e:	430b      	orrs	r3, r1
 8002360:	e081      	b.n	8002466 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <HAL_ADC_ConfigChannel+0x5c6>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	0e9b      	lsrs	r3, r3, #26
 8002374:	3301      	adds	r3, #1
 8002376:	069b      	lsls	r3, r3, #26
 8002378:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800237c:	e015      	b.n	80023aa <HAL_ADC_ConfigChannel+0x5f2>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002396:	2320      	movs	r3, #32
 8002398:	e003      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	069b      	lsls	r3, r3, #26
 80023a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x612>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	e017      	b.n	80023fa <HAL_ADC_ConfigChannel+0x642>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	61fb      	str	r3, [r7, #28]
  return result;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80023e2:	2320      	movs	r3, #32
 80023e4:	e003      	b.n	80023ee <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	ea42 0103 	orr.w	r1, r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x66e>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	3301      	adds	r3, #1
 8002412:	f003 021f 	and.w	r2, r3, #31
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	3b1e      	subs	r3, #30
 800241e:	051b      	lsls	r3, r3, #20
 8002420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002424:	e01e      	b.n	8002464 <HAL_ADC_ConfigChannel+0x6ac>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	613b      	str	r3, [r7, #16]
  return result;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e006      	b.n	8002450 <HAL_ADC_ConfigChannel+0x698>
 8002442:	bf00      	nop
 8002444:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f003 021f 	and.w	r2, r3, #31
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	3b1e      	subs	r3, #30
 800245e:	051b      	lsls	r3, r3, #20
 8002460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002464:	430b      	orrs	r3, r1
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	6892      	ldr	r2, [r2, #8]
 800246a:	4619      	mov	r1, r3
 800246c:	f7ff f93d 	bl	80016ea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <HAL_ADC_ConfigChannel+0x7bc>)
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d070      	beq.n	800255e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800247c:	483e      	ldr	r0, [pc, #248]	; (8002578 <HAL_ADC_ConfigChannel+0x7c0>)
 800247e:	f7ff f849 	bl	8001514 <LL_ADC_GetCommonPathInternalCh>
 8002482:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a3c      	ldr	r2, [pc, #240]	; (800257c <HAL_ADC_ConfigChannel+0x7c4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_ADC_ConfigChannel+0x6e2>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <HAL_ADC_ConfigChannel+0x7c8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d126      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800249a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800249e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d120      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ae:	d156      	bne.n	800255e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024b8:	4619      	mov	r1, r3
 80024ba:	482f      	ldr	r0, [pc, #188]	; (8002578 <HAL_ADC_ConfigChannel+0x7c0>)
 80024bc:	f7ff f817 	bl	80014ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024c0:	4b30      	ldr	r3, [pc, #192]	; (8002584 <HAL_ADC_ConfigChannel+0x7cc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	4a30      	ldr	r2, [pc, #192]	; (8002588 <HAL_ADC_ConfigChannel+0x7d0>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	099a      	lsrs	r2, r3, #6
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024d8:	e002      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	3b01      	subs	r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f9      	bne.n	80024da <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e6:	e03a      	b.n	800255e <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a27      	ldr	r2, [pc, #156]	; (800258c <HAL_ADC_ConfigChannel+0x7d4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d113      	bne.n	800251a <HAL_ADC_ConfigChannel+0x762>
 80024f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10d      	bne.n	800251a <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a23      	ldr	r2, [pc, #140]	; (8002590 <HAL_ADC_ConfigChannel+0x7d8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d02a      	beq.n	800255e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800250c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002510:	4619      	mov	r1, r3
 8002512:	4819      	ldr	r0, [pc, #100]	; (8002578 <HAL_ADC_ConfigChannel+0x7c0>)
 8002514:	f7fe ffeb 	bl	80014ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002518:	e021      	b.n	800255e <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <HAL_ADC_ConfigChannel+0x7dc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d11c      	bne.n	800255e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d116      	bne.n	800255e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a16      	ldr	r2, [pc, #88]	; (8002590 <HAL_ADC_ConfigChannel+0x7d8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d011      	beq.n	800255e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800253e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002542:	4619      	mov	r1, r3
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <HAL_ADC_ConfigChannel+0x7c0>)
 8002546:	f7fe ffd2 	bl	80014ee <LL_ADC_SetCommonPathInternalCh>
 800254a:	e008      	b.n	800255e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002566:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800256a:	4618      	mov	r0, r3
 800256c:	37d8      	adds	r7, #216	; 0xd8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	80080000 	.word	0x80080000
 8002578:	50000300 	.word	0x50000300
 800257c:	c3210000 	.word	0xc3210000
 8002580:	90c00010 	.word	0x90c00010
 8002584:	20000000 	.word	0x20000000
 8002588:	053e2d63 	.word	0x053e2d63
 800258c:	c7520000 	.word	0xc7520000
 8002590:	50000100 	.word	0x50000100
 8002594:	cb840000 	.word	0xcb840000

08002598 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff f95f 	bl	8001868 <LL_ADC_IsEnabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d146      	bne.n	800263e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <ADC_Enable+0xb0>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	f043 0210 	orr.w	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	f043 0201 	orr.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e032      	b.n	8002640 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff f92e 	bl	8001840 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025e4:	f7fe ff42 	bl	800146c <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ea:	e021      	b.n	8002630 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff f939 	bl	8001868 <LL_ADC_IsEnabled>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d104      	bne.n	8002606 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff f91d 	bl	8001840 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002606:	f7fe ff31 	bl	800146c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d90d      	bls.n	8002630 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	f043 0210 	orr.w	r2, r3, #16
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e007      	b.n	8002640 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d1d6      	bne.n	80025ec <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	8000003f 	.word	0x8000003f

0800264c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002662:	2b00      	cmp	r3, #0
 8002664:	d14b      	bne.n	80026fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d021      	beq.n	80026c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fff1 	bl	800166c <LL_ADC_REG_IsTriggerSourceSWStart>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d032      	beq.n	80026f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d12b      	bne.n	80026f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11f      	bne.n	80026f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80026c2:	e018      	b.n	80026f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d111      	bne.n	80026f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff fb40 	bl	8001d7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026fc:	e00e      	b.n	800271c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff fb4a 	bl	8001da4 <HAL_ADC_ErrorCallback>
}
 8002710:	e004      	b.n	800271c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7ff fb2c 	bl	8001d90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275e:	f043 0204 	orr.w	r2, r3, #4
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff fb1c 	bl	8001da4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800279c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60d3      	str	r3, [r2, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <__NVIC_GetPriorityGrouping+0x18>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0307 	and.w	r3, r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db0b      	blt.n	8002802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <__NVIC_EnableIRQ+0x38>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2001      	movs	r0, #1
 80027fa:	fa00 f202 	lsl.w	r2, r0, r2
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db0a      	blt.n	800283e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	490c      	ldr	r1, [pc, #48]	; (8002860 <__NVIC_SetPriority+0x4c>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	0112      	lsls	r2, r2, #4
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	440b      	add	r3, r1
 8002838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800283c:	e00a      	b.n	8002854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4908      	ldr	r1, [pc, #32]	; (8002864 <__NVIC_SetPriority+0x50>)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	3b04      	subs	r3, #4
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	440b      	add	r3, r1
 8002852:	761a      	strb	r2, [r3, #24]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f1c3 0307 	rsb	r3, r3, #7
 8002882:	2b04      	cmp	r3, #4
 8002884:	bf28      	it	cs
 8002886:	2304      	movcs	r3, #4
 8002888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3304      	adds	r3, #4
 800288e:	2b06      	cmp	r3, #6
 8002890:	d902      	bls.n	8002898 <NVIC_EncodePriority+0x30>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3b03      	subs	r3, #3
 8002896:	e000      	b.n	800289a <NVIC_EncodePriority+0x32>
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	401a      	ands	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	43d9      	mvns	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	4313      	orrs	r3, r2
         );
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3724      	adds	r7, #36	; 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e0:	d301      	bcc.n	80028e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00f      	b.n	8002906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <SysTick_Config+0x40>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ee:	210f      	movs	r1, #15
 80028f0:	f04f 30ff 	mov.w	r0, #4294967295
 80028f4:	f7ff ff8e 	bl	8002814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <SysTick_Config+0x40>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <SysTick_Config+0x40>)
 8002900:	2207      	movs	r2, #7
 8002902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	e000e010 	.word	0xe000e010

08002914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff29 	bl	8002774 <__NVIC_SetPriorityGrouping>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002938:	f7ff ff40 	bl	80027bc <__NVIC_GetPriorityGrouping>
 800293c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	6978      	ldr	r0, [r7, #20]
 8002944:	f7ff ff90 	bl	8002868 <NVIC_EncodePriority>
 8002948:	4602      	mov	r2, r0
 800294a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff5f 	bl	8002814 <__NVIC_SetPriority>
}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff33 	bl	80027d8 <__NVIC_EnableIRQ>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ffa4 	bl	80028d0 <SysTick_Config>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e014      	b.n	80029ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	791b      	ldrb	r3, [r3, #4]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d105      	bne.n	80029ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7fd ff25 	bl	8000804 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	795b      	ldrb	r3, [r3, #5]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_DAC_Start+0x16>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e043      	b.n	8002a74 <HAL_DAC_Start+0x9e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6819      	ldr	r1, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2201      	movs	r2, #1
 8002a06:	409a      	lsls	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002a10:	2001      	movs	r0, #1
 8002a12:	f7fe fd37 	bl	8001484 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10f      	bne.n	8002a3c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d11d      	bne.n	8002a66 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	e014      	b.n	8002a66 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d107      	bne.n	8002a66 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0202 	orr.w	r2, r2, #2
 8002a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e004      	b.n	8002ab6 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	795b      	ldrb	r3, [r3, #5]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_DAC_ConfigChannel+0x1c>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e194      	b.n	8002e12 <HAL_DAC_ConfigChannel+0x346>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2202      	movs	r2, #2
 8002af2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d174      	bne.n	8002be6 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d137      	bne.n	8002b72 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002b02:	f7fe fcb3 	bl	800146c <HAL_GetTick>
 8002b06:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b08:	e011      	b.n	8002b2e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b0a:	f7fe fcaf 	bl	800146c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d90a      	bls.n	8002b2e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f043 0208 	orr.w	r2, r3, #8
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2203      	movs	r2, #3
 8002b28:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e171      	b.n	8002e12 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e6      	bne.n	8002b0a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7fe fca1 	bl	8001484 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b4c:	e01e      	b.n	8002b8c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b4e:	f7fe fc8d 	bl	800146c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d90a      	bls.n	8002b72 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f043 0208 	orr.w	r2, r3, #8
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e14f      	b.n	8002e12 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	dbe8      	blt.n	8002b4e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7fe fc81 	bl	8001484 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	ea02 0103 	and.w	r1, r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	21ff      	movs	r1, #255	; 0xff
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	ea02 0103 	and.w	r1, r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d11d      	bne.n	8002c2a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	221f      	movs	r2, #31
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c06:	4013      	ands	r3, r2
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2207      	movs	r2, #7
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	4013      	ands	r3, r2
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
 8002c56:	e011      	b.n	8002c7c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002c64:	2301      	movs	r3, #1
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	e008      	b.n	8002c7c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002c72:	2301      	movs	r3, #1
 8002c74:	623b      	str	r3, [r7, #32]
 8002c76:	e001      	b.n	8002c7c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	6a3a      	ldr	r2, [r7, #32]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	791b      	ldrb	r3, [r3, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d102      	bne.n	8002cb0 <HAL_DAC_ConfigChannel+0x1e4>
 8002caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cae:	e000      	b.n	8002cb2 <HAL_DAC_ConfigChannel+0x1e6>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cca:	4013      	ands	r3, r2
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	795b      	ldrb	r3, [r3, #5]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_DAC_ConfigChannel+0x210>
 8002cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cda:	e000      	b.n	8002cde <HAL_DAC_ConfigChannel+0x212>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d114      	bne.n	8002d1e <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002cf4:	f001 fa8e 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8002cf8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	4a47      	ldr	r2, [pc, #284]	; (8002e1c <HAL_DAC_ConfigChannel+0x350>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d904      	bls.n	8002d0c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	e00d      	b.n	8002d28 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	4a44      	ldr	r2, [pc, #272]	; (8002e20 <HAL_DAC_ConfigChannel+0x354>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d909      	bls.n	8002d28 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	e004      	b.n	8002d28 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d24:	4313      	orrs	r3, r2
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d36:	4313      	orrs	r3, r2
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d92:	4313      	orrs	r3, r2
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	22c0      	movs	r2, #192	; 0xc0
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43da      	mvns	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	400a      	ands	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	ea02 0103 	and.w	r1, r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3728      	adds	r7, #40	; 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	09896800 	.word	0x09896800
 8002e20:	04c4b400 	.word	0x04c4b400

08002e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e08d      	b.n	8002f52 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_DMA_Init+0x138>)
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d80f      	bhi.n	8002e62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b45      	ldr	r3, [pc, #276]	; (8002f60 <HAL_DMA_Init+0x13c>)
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a45      	ldr	r2, [pc, #276]	; (8002f64 <HAL_DMA_Init+0x140>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	009a      	lsls	r2, r3, #2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a42      	ldr	r2, [pc, #264]	; (8002f68 <HAL_DMA_Init+0x144>)
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e60:	e00e      	b.n	8002e80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <HAL_DMA_Init+0x148>)
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a3d      	ldr	r2, [pc, #244]	; (8002f64 <HAL_DMA_Init+0x140>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	009a      	lsls	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <HAL_DMA_Init+0x14c>)
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fa1e 	bl	8003314 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ee0:	d102      	bne.n	8002ee8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002efc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d010      	beq.n	8002f28 <HAL_DMA_Init+0x104>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d80c      	bhi.n	8002f28 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fa3e 	bl	8003390 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	e008      	b.n	8002f3a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40020407 	.word	0x40020407
 8002f60:	bffdfff8 	.word	0xbffdfff8
 8002f64:	cccccccd 	.word	0xcccccccd
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	bffdfbf8 	.word	0xbffdfbf8
 8002f70:	40020400 	.word	0x40020400

08002f74 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_DMA_Start_IT+0x20>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e066      	b.n	8003062 <HAL_DMA_Start_IT+0xee>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d155      	bne.n	8003054 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f962 	bl	8003296 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 020e 	orr.w	r2, r2, #14
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e00f      	b.n	800300c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 020a 	orr.w	r2, r2, #10
 800300a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003028:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003040:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e005      	b.n	8003060 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800305c:	2302      	movs	r3, #2
 800305e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d00d      	beq.n	800309e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2204      	movs	r2, #4
 8003086:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e047      	b.n	800312e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 020e 	bic.w	r2, r2, #14
 80030ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f202 	lsl.w	r2, r1, r2
 80030e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00c      	beq.n	800310e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003102:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800310c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
    }
  }
  return status;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	2204      	movs	r2, #4
 800315a:	409a      	lsls	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d026      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x7a>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d021      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0204 	bic.w	r2, r2, #4
 800318a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2104      	movs	r1, #4
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d071      	beq.n	800328c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031b0:	e06c      	b.n	800328c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2202      	movs	r2, #2
 80031bc:	409a      	lsls	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d02e      	beq.n	8003224 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d029      	beq.n	8003224 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 020a 	bic.w	r2, r2, #10
 80031ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f003 021f 	and.w	r2, r3, #31
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2102      	movs	r1, #2
 8003204:	fa01 f202 	lsl.w	r2, r1, r2
 8003208:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d038      	beq.n	800328c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003222:	e033      	b.n	800328c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2208      	movs	r2, #8
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d02a      	beq.n	800328e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d025      	beq.n	800328e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 020e 	bic.w	r2, r2, #14
 8003250:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f003 021f 	and.w	r2, r3, #31
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f202 	lsl.w	r2, r1, r2
 8003264:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800328c:	bf00      	nop
 800328e:	bf00      	nop
}
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032ac:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032be:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	2101      	movs	r1, #1
 80032ce:	fa01 f202 	lsl.w	r2, r1, r2
 80032d2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d108      	bne.n	80032f6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032f4:	e007      	b.n	8003306 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	60da      	str	r2, [r3, #12]
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4b16      	ldr	r3, [pc, #88]	; (800337c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003324:	429a      	cmp	r2, r3
 8003326:	d802      	bhi.n	800332e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	e001      	b.n	8003332 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003330:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3b08      	subs	r3, #8
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	009a      	lsls	r2, r3, #2
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	461a      	mov	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a0b      	ldr	r2, [pc, #44]	; (800338c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800335e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	2201      	movs	r2, #1
 8003368:	409a      	lsls	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40020407 	.word	0x40020407
 8003380:	40020800 	.word	0x40020800
 8003384:	40020820 	.word	0x40020820
 8003388:	cccccccd 	.word	0xcccccccd
 800338c:	40020880 	.word	0x40020880

08003390 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033b2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2201      	movs	r2, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	1000823f 	.word	0x1000823f
 80033d4:	40020940 	.word	0x40020940

080033d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033e6:	e15a      	b.n	800369e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2101      	movs	r1, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	4013      	ands	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 814c 	beq.w	8003698 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d00b      	beq.n	8003420 <HAL_GPIO_Init+0x48>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d007      	beq.n	8003420 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003414:	2b11      	cmp	r3, #17
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b12      	cmp	r3, #18
 800341e:	d130      	bne.n	8003482 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003456:	2201      	movs	r2, #1
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f003 0201 	and.w	r2, r3, #1
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0xea>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b12      	cmp	r3, #18
 80034c0:	d123      	bne.n	800350a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	08da      	lsrs	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3208      	adds	r2, #8
 80034ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	220f      	movs	r2, #15
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	08da      	lsrs	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3208      	adds	r2, #8
 8003504:	6939      	ldr	r1, [r7, #16]
 8003506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	2203      	movs	r2, #3
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0203 	and.w	r2, r3, #3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80a6 	beq.w	8003698 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354c:	4b5b      	ldr	r3, [pc, #364]	; (80036bc <HAL_GPIO_Init+0x2e4>)
 800354e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003550:	4a5a      	ldr	r2, [pc, #360]	; (80036bc <HAL_GPIO_Init+0x2e4>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6613      	str	r3, [r2, #96]	; 0x60
 8003558:	4b58      	ldr	r3, [pc, #352]	; (80036bc <HAL_GPIO_Init+0x2e4>)
 800355a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003564:	4a56      	ldr	r2, [pc, #344]	; (80036c0 <HAL_GPIO_Init+0x2e8>)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	3302      	adds	r3, #2
 800356c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	220f      	movs	r2, #15
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800358e:	d01f      	beq.n	80035d0 <HAL_GPIO_Init+0x1f8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a4c      	ldr	r2, [pc, #304]	; (80036c4 <HAL_GPIO_Init+0x2ec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d019      	beq.n	80035cc <HAL_GPIO_Init+0x1f4>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a4b      	ldr	r2, [pc, #300]	; (80036c8 <HAL_GPIO_Init+0x2f0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <HAL_GPIO_Init+0x1f0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a4a      	ldr	r2, [pc, #296]	; (80036cc <HAL_GPIO_Init+0x2f4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00d      	beq.n	80035c4 <HAL_GPIO_Init+0x1ec>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a49      	ldr	r2, [pc, #292]	; (80036d0 <HAL_GPIO_Init+0x2f8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <HAL_GPIO_Init+0x1e8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a48      	ldr	r2, [pc, #288]	; (80036d4 <HAL_GPIO_Init+0x2fc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_GPIO_Init+0x1e4>
 80035b8:	2305      	movs	r3, #5
 80035ba:	e00a      	b.n	80035d2 <HAL_GPIO_Init+0x1fa>
 80035bc:	2306      	movs	r3, #6
 80035be:	e008      	b.n	80035d2 <HAL_GPIO_Init+0x1fa>
 80035c0:	2304      	movs	r3, #4
 80035c2:	e006      	b.n	80035d2 <HAL_GPIO_Init+0x1fa>
 80035c4:	2303      	movs	r3, #3
 80035c6:	e004      	b.n	80035d2 <HAL_GPIO_Init+0x1fa>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e002      	b.n	80035d2 <HAL_GPIO_Init+0x1fa>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_GPIO_Init+0x1fa>
 80035d0:	2300      	movs	r3, #0
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	f002 0203 	and.w	r2, r2, #3
 80035d8:	0092      	lsls	r2, r2, #2
 80035da:	4093      	lsls	r3, r2
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e2:	4937      	ldr	r1, [pc, #220]	; (80036c0 <HAL_GPIO_Init+0x2e8>)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	3302      	adds	r3, #2
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035f0:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <HAL_GPIO_Init+0x300>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003614:	4a30      	ldr	r2, [pc, #192]	; (80036d8 <HAL_GPIO_Init+0x300>)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800361a:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <HAL_GPIO_Init+0x300>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	43db      	mvns	r3, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800363e:	4a26      	ldr	r2, [pc, #152]	; (80036d8 <HAL_GPIO_Init+0x300>)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_GPIO_Init+0x300>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	43db      	mvns	r3, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003668:	4a1b      	ldr	r2, [pc, #108]	; (80036d8 <HAL_GPIO_Init+0x300>)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_GPIO_Init+0x300>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003692:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <HAL_GPIO_Init+0x300>)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3301      	adds	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f47f ae9d 	bne.w	80033e8 <HAL_GPIO_Init+0x10>
  }
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40010000 	.word	0x40010000
 80036c4:	48000400 	.word	0x48000400
 80036c8:	48000800 	.word	0x48000800
 80036cc:	48000c00 	.word	0x48000c00
 80036d0:	48001000 	.word	0x48001000
 80036d4:	48001400 	.word	0x48001400
 80036d8:	40010400 	.word	0x40010400

080036dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
 80036e8:	4613      	mov	r3, r2
 80036ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036ec:	787b      	ldrb	r3, [r7, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036f8:	e002      	b.n	8003700 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036fa:	887a      	ldrh	r2, [r7, #2]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	041a      	lsls	r2, r3, #16
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43d9      	mvns	r1, r3
 800372a:	887b      	ldrh	r3, [r7, #2]
 800372c:	400b      	ands	r3, r1
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	619a      	str	r2, [r3, #24]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d141      	bne.n	80037d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800374e:	4b4b      	ldr	r3, [pc, #300]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d131      	bne.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800375c:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003762:	4a46      	ldr	r2, [pc, #280]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800376c:	4b43      	ldr	r3, [pc, #268]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003774:	4a41      	ldr	r2, [pc, #260]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800377a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800377c:	4b40      	ldr	r3, [pc, #256]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2232      	movs	r2, #50	; 0x32
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	4a3f      	ldr	r2, [pc, #252]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	0c9b      	lsrs	r3, r3, #18
 800378e:	3301      	adds	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003792:	e002      	b.n	800379a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3b01      	subs	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800379a:	4b38      	ldr	r3, [pc, #224]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a6:	d102      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f2      	bne.n	8003794 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037ae:	4b33      	ldr	r3, [pc, #204]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ba:	d158      	bne.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e057      	b.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037c0:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c6:	4a2d      	ldr	r2, [pc, #180]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037d0:	e04d      	b.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d141      	bne.n	800385e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037da:	4b28      	ldr	r3, [pc, #160]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e6:	d131      	bne.n	800384c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ee:	4a23      	ldr	r2, [pc, #140]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003800:	4a1e      	ldr	r2, [pc, #120]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003806:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2232      	movs	r2, #50	; 0x32
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	0c9b      	lsrs	r3, r3, #18
 800381a:	3301      	adds	r3, #1
 800381c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381e:	e002      	b.n	8003826 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3b01      	subs	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003832:	d102      	bne.n	800383a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f2      	bne.n	8003820 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	d112      	bne.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e011      	b.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003858:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800385c:	e007      	b.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003866:	4a05      	ldr	r2, [pc, #20]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800386c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40007000 	.word	0x40007000
 8003880:	20000000 	.word	0x20000000
 8003884:	431bde83 	.word	0x431bde83

08003888 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003896:	6093      	str	r3, [r2, #8]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40007000 	.word	0x40007000

080038a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e308      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d075      	beq.n	80039b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c6:	4ba3      	ldr	r3, [pc, #652]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d0:	4ba0      	ldr	r3, [pc, #640]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d102      	bne.n	80038e6 <HAL_RCC_OscConfig+0x3e>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d002      	beq.n	80038ec <HAL_RCC_OscConfig+0x44>
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d10b      	bne.n	8003904 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ec:	4b99      	ldr	r3, [pc, #612]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d05b      	beq.n	80039b0 <HAL_RCC_OscConfig+0x108>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d157      	bne.n	80039b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e2e3      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390c:	d106      	bne.n	800391c <HAL_RCC_OscConfig+0x74>
 800390e:	4b91      	ldr	r3, [pc, #580]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a90      	ldr	r2, [pc, #576]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e01d      	b.n	8003958 <HAL_RCC_OscConfig+0xb0>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x98>
 8003926:	4b8b      	ldr	r3, [pc, #556]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a8a      	ldr	r2, [pc, #552]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a87      	ldr	r2, [pc, #540]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0xb0>
 8003940:	4b84      	ldr	r3, [pc, #528]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a83      	ldr	r2, [pc, #524]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b81      	ldr	r3, [pc, #516]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a80      	ldr	r2, [pc, #512]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fd84 	bl	800146c <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003968:	f7fd fd80 	bl	800146c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e2a8      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397a:	4b76      	ldr	r3, [pc, #472]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0xc0>
 8003986:	e014      	b.n	80039b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fd fd70 	bl	800146c <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fd fd6c 	bl	800146c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e294      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039a2:	4b6c      	ldr	r3, [pc, #432]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0xe8>
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d075      	beq.n	8003aaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039be:	4b65      	ldr	r3, [pc, #404]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c8:	4b62      	ldr	r3, [pc, #392]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	d102      	bne.n	80039de <HAL_RCC_OscConfig+0x136>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d002      	beq.n	80039e4 <HAL_RCC_OscConfig+0x13c>
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d11f      	bne.n	8003a24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e4:	4b5b      	ldr	r3, [pc, #364]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_OscConfig+0x154>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e267      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fc:	4b55      	ldr	r3, [pc, #340]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	4952      	ldr	r1, [pc, #328]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a10:	4b51      	ldr	r3, [pc, #324]	; (8003b58 <HAL_RCC_OscConfig+0x2b0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fd fcdd 	bl	80013d4 <HAL_InitTick>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d043      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e253      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d023      	beq.n	8003a74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2c:	4b49      	ldr	r3, [pc, #292]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a48      	ldr	r2, [pc, #288]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd fd18 	bl	800146c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a40:	f7fd fd14 	bl	800146c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e23c      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a52:	4b40      	ldr	r3, [pc, #256]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	061b      	lsls	r3, r3, #24
 8003a6c:	4939      	ldr	r1, [pc, #228]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
 8003a72:	e01a      	b.n	8003aaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a74:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a36      	ldr	r2, [pc, #216]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd fcf4 	bl	800146c <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a88:	f7fd fcf0 	bl	800146c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e218      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x1e0>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d03c      	beq.n	8003b30 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b25      	ldr	r3, [pc, #148]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac4:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7fd fccd 	bl	800146c <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad6:	f7fd fcc9 	bl	800146c <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e1f1      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0ef      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x22e>
 8003af6:	e01b      	b.n	8003b30 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afe:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fd fcb0 	bl	800146c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b10:	f7fd fcac 	bl	800146c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e1d4      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ef      	bne.n	8003b10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80ab 	beq.w	8003c94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b42:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_RCC_OscConfig+0x2b4>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e005      	b.n	8003b5e <HAL_RCC_OscConfig+0x2b6>
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	20000004 	.word	0x20000004
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	4baf      	ldr	r3, [pc, #700]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	4aae      	ldr	r2, [pc, #696]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b6e:	4bac      	ldr	r3, [pc, #688]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7e:	4ba9      	ldr	r3, [pc, #676]	; (8003e24 <HAL_RCC_OscConfig+0x57c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d118      	bne.n	8003bbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b8a:	4ba6      	ldr	r3, [pc, #664]	; (8003e24 <HAL_RCC_OscConfig+0x57c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4aa5      	ldr	r2, [pc, #660]	; (8003e24 <HAL_RCC_OscConfig+0x57c>)
 8003b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b96:	f7fd fc69 	bl	800146c <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9e:	f7fd fc65 	bl	800146c <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e18d      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb0:	4b9c      	ldr	r3, [pc, #624]	; (8003e24 <HAL_RCC_OscConfig+0x57c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d108      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x32e>
 8003bc4:	4b96      	ldr	r3, [pc, #600]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	4a95      	ldr	r2, [pc, #596]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd4:	e024      	b.n	8003c20 <HAL_RCC_OscConfig+0x378>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d110      	bne.n	8003c00 <HAL_RCC_OscConfig+0x358>
 8003bde:	4b90      	ldr	r3, [pc, #576]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	4a8e      	ldr	r2, [pc, #568]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003be6:	f043 0304 	orr.w	r3, r3, #4
 8003bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bee:	4b8c      	ldr	r3, [pc, #560]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	4a8a      	ldr	r2, [pc, #552]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bfe:	e00f      	b.n	8003c20 <HAL_RCC_OscConfig+0x378>
 8003c00:	4b87      	ldr	r3, [pc, #540]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	4a86      	ldr	r2, [pc, #536]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c10:	4b83      	ldr	r3, [pc, #524]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	4a82      	ldr	r2, [pc, #520]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d016      	beq.n	8003c56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7fd fc20 	bl	800146c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2e:	e00a      	b.n	8003c46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c30:	f7fd fc1c 	bl	800146c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e142      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c46:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ed      	beq.n	8003c30 <HAL_RCC_OscConfig+0x388>
 8003c54:	e015      	b.n	8003c82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c56:	f7fd fc09 	bl	800146c <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fd fc05 	bl	800146c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e12b      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c74:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ed      	bne.n	8003c5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c82:	7ffb      	ldrb	r3, [r7, #31]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b65      	ldr	r3, [pc, #404]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	4a64      	ldr	r2, [pc, #400]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d03c      	beq.n	8003d1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01c      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ca8:	4b5d      	ldr	r3, [pc, #372]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cae:	4a5c      	ldr	r2, [pc, #368]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd fbd8 	bl	800146c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cc0:	f7fd fbd4 	bl	800146c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e0fc      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cd2:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ef      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x418>
 8003ce0:	e01b      	b.n	8003d1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ce2:	4b4f      	ldr	r3, [pc, #316]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce8:	4a4d      	ldr	r2, [pc, #308]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7fd fbbb 	bl	800146c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cfa:	f7fd fbb7 	bl	800146c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e0df      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d0c:	4b44      	ldr	r3, [pc, #272]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ef      	bne.n	8003cfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80d3 	beq.w	8003eca <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d24:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	f000 808d 	beq.w	8003e4c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d15a      	bne.n	8003df0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a38      	ldr	r2, [pc, #224]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fd fb91 	bl	800146c <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4e:	f7fd fb8d 	bl	800146c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0b5      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d60:	4b2f      	ldr	r3, [pc, #188]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <HAL_RCC_OscConfig+0x580>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6a11      	ldr	r1, [r2, #32]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d7c:	3a01      	subs	r2, #1
 8003d7e:	0112      	lsls	r2, r2, #4
 8003d80:	4311      	orrs	r1, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d86:	0212      	lsls	r2, r2, #8
 8003d88:	4311      	orrs	r1, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d8e:	0852      	lsrs	r2, r2, #1
 8003d90:	3a01      	subs	r2, #1
 8003d92:	0552      	lsls	r2, r2, #21
 8003d94:	4311      	orrs	r1, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d9a:	0852      	lsrs	r2, r2, #1
 8003d9c:	3a01      	subs	r2, #1
 8003d9e:	0652      	lsls	r2, r2, #25
 8003da0:	4311      	orrs	r1, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003da6:	06d2      	lsls	r2, r2, #27
 8003da8:	430a      	orrs	r2, r1
 8003daa:	491d      	ldr	r1, [pc, #116]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fb50 	bl	800146c <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd fb4c 	bl	800146c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e074      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x528>
 8003dee:	e06c      	b.n	8003eca <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4a07      	ldr	r2, [pc, #28]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <HAL_RCC_OscConfig+0x578>)
 8003e0e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fd fb28 	bl	800146c <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1e:	e00e      	b.n	8003e3e <HAL_RCC_OscConfig+0x596>
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
 8003e28:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fd fb1e 	bl	800146c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e046      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3e:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <HAL_RCC_OscConfig+0x62c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x584>
 8003e4a:	e03e      	b.n	8003eca <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e039      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <HAL_RCC_OscConfig+0x62c>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0203 	and.w	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d12c      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	3b01      	subs	r3, #1
 8003e78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d123      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d11b      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d113      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3720      	adds	r7, #32
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40021000 	.word	0x40021000

08003ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e11e      	b.n	800412e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b91      	ldr	r3, [pc, #580]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d910      	bls.n	8003f20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b8e      	ldr	r3, [pc, #568]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 020f 	bic.w	r2, r3, #15
 8003f06:	498c      	ldr	r1, [pc, #560]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b8a      	ldr	r3, [pc, #552]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e106      	b.n	800412e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d073      	beq.n	8004014 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d129      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f34:	4b81      	ldr	r3, [pc, #516]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0f4      	b.n	800412e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f44:	f000 f99e 	bl	8004284 <RCC_GetSysClockFreqFromPLLSource>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4a7c      	ldr	r2, [pc, #496]	; (8004140 <HAL_RCC_ClockConfig+0x268>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d93f      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f52:	4b7a      	ldr	r3, [pc, #488]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d033      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d12f      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f72:	4b72      	ldr	r3, [pc, #456]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f7a:	4a70      	ldr	r2, [pc, #448]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e024      	b.n	8003fd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f90:	4b6a      	ldr	r3, [pc, #424]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0c6      	b.n	800412e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa0:	4b66      	ldr	r3, [pc, #408]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0be      	b.n	800412e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003fb0:	f000 f8ce 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4a61      	ldr	r2, [pc, #388]	; (8004140 <HAL_RCC_ClockConfig+0x268>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d909      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fbe:	4b5f      	ldr	r3, [pc, #380]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc6:	4a5d      	ldr	r2, [pc, #372]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fd2:	4b5a      	ldr	r3, [pc, #360]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f023 0203 	bic.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4957      	ldr	r1, [pc, #348]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe4:	f7fd fa42 	bl	800146c <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fec:	f7fd fa3e 	bl	800146c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e095      	b.n	800412e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	4b4e      	ldr	r3, [pc, #312]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 020c 	and.w	r2, r3, #12
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	429a      	cmp	r2, r3
 8004012:	d1eb      	bne.n	8003fec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d023      	beq.n	8004068 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800402c:	4b43      	ldr	r3, [pc, #268]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4a42      	ldr	r2, [pc, #264]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8004032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004036:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004044:	4b3d      	ldr	r3, [pc, #244]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800404c:	4a3b      	ldr	r2, [pc, #236]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 800404e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004052:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004054:	4b39      	ldr	r3, [pc, #228]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4936      	ldr	r1, [pc, #216]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
 8004066:	e008      	b.n	800407a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b80      	cmp	r3, #128	; 0x80
 800406c:	d105      	bne.n	800407a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800406e:	4b33      	ldr	r3, [pc, #204]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	4a32      	ldr	r2, [pc, #200]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8004074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004078:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800407a:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d21d      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004088:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f023 020f 	bic.w	r2, r3, #15
 8004090:	4929      	ldr	r1, [pc, #164]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	4313      	orrs	r3, r2
 8004096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004098:	f7fd f9e8 	bl	800146c <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a0:	f7fd f9e4 	bl	800146c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e03b      	b.n	800412e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1ed      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d0:	4b1a      	ldr	r3, [pc, #104]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4917      	ldr	r1, [pc, #92]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ee:	4b13      	ldr	r3, [pc, #76]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	490f      	ldr	r1, [pc, #60]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004102:	f000 f825 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8004106:	4601      	mov	r1, r0
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <HAL_RCC_ClockConfig+0x26c>)
 8004114:	5cd3      	ldrb	r3, [r2, r3]
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	fa21 f303 	lsr.w	r3, r1, r3
 800411e:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <HAL_RCC_ClockConfig+0x270>)
 8004120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_RCC_ClockConfig+0x274>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd f954 	bl	80013d4 <HAL_InitTick>
 800412c:	4603      	mov	r3, r0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40022000 	.word	0x40022000
 800413c:	40021000 	.word	0x40021000
 8004140:	04c4b400 	.word	0x04c4b400
 8004144:	0800726c 	.word	0x0800726c
 8004148:	20000000 	.word	0x20000000
 800414c:	20000004 	.word	0x20000004

08004150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b04      	cmp	r3, #4
 8004160:	d102      	bne.n	8004168 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004162:	4b2a      	ldr	r3, [pc, #168]	; (800420c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	e047      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb8>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b08      	cmp	r3, #8
 8004172:	d102      	bne.n	800417a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004174:	4b26      	ldr	r3, [pc, #152]	; (8004210 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	e03e      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800417a:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb8>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d136      	bne.n	80041f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	3301      	adds	r3, #1
 800419c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d10c      	bne.n	80041be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041a4:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	4a16      	ldr	r2, [pc, #88]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ae:	68d2      	ldr	r2, [r2, #12]
 80041b0:	0a12      	lsrs	r2, r2, #8
 80041b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	617b      	str	r3, [r7, #20]
      break;
 80041bc:	e00c      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041be:	4a13      	ldr	r2, [pc, #76]	; (800420c <HAL_RCC_GetSysClockFreq+0xbc>)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041c8:	68d2      	ldr	r2, [r2, #12]
 80041ca:	0a12      	lsrs	r2, r2, #8
 80041cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]
      break;
 80041d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	0e5b      	lsrs	r3, r3, #25
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e001      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041f8:	693b      	ldr	r3, [r7, #16]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	00f42400 	.word	0x00f42400
 8004210:	007a1200 	.word	0x007a1200

08004214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000000 	.word	0x20000000

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004230:	f7ff fff0 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004234:	4601      	mov	r1, r0
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000
 8004254:	0800727c 	.word	0x0800727c

08004258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800425c:	f7ff ffda 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004260:	4601      	mov	r1, r0
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	0adb      	lsrs	r3, r3, #11
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	0800727c 	.word	0x0800727c

08004284 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	3301      	adds	r3, #1
 80042a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d10c      	bne.n	80042c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042a8:	4a17      	ldr	r2, [pc, #92]	; (8004308 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	4a14      	ldr	r2, [pc, #80]	; (8004304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042b2:	68d2      	ldr	r2, [r2, #12]
 80042b4:	0a12      	lsrs	r2, r2, #8
 80042b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	617b      	str	r3, [r7, #20]
    break;
 80042c0:	e00c      	b.n	80042dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042cc:	68d2      	ldr	r2, [r2, #12]
 80042ce:	0a12      	lsrs	r2, r2, #8
 80042d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
    break;
 80042da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	0e5b      	lsrs	r3, r3, #25
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	3301      	adds	r3, #1
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80042f6:	687b      	ldr	r3, [r7, #4]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40021000 	.word	0x40021000
 8004308:	007a1200 	.word	0x007a1200
 800430c:	00f42400 	.word	0x00f42400

08004310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004318:	2300      	movs	r3, #0
 800431a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800431c:	2300      	movs	r3, #0
 800431e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8098 	beq.w	800445e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432e:	2300      	movs	r3, #0
 8004330:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004332:	4b43      	ldr	r3, [pc, #268]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10d      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433e:	4b40      	ldr	r3, [pc, #256]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	4a3f      	ldr	r2, [pc, #252]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004348:	6593      	str	r3, [r2, #88]	; 0x58
 800434a:	4b3d      	ldr	r3, [pc, #244]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004356:	2301      	movs	r3, #1
 8004358:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800435a:	4b3a      	ldr	r3, [pc, #232]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a39      	ldr	r2, [pc, #228]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004366:	f7fd f881 	bl	800146c <HAL_GetTick>
 800436a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800436c:	e009      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436e:	f7fd f87d 	bl	800146c <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d902      	bls.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	74fb      	strb	r3, [r7, #19]
        break;
 8004380:	e005      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004382:	4b30      	ldr	r3, [pc, #192]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ef      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d159      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004394:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01e      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d019      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043b0:	4b23      	ldr	r3, [pc, #140]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043bc:	4b20      	ldr	r3, [pc, #128]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043cc:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043dc:	4a18      	ldr	r2, [pc, #96]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ee:	f7fd f83d 	bl	800146c <HAL_GetTick>
 80043f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f4:	e00b      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f6:	f7fd f839 	bl	800146c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f241 3288 	movw	r2, #5000	; 0x1388
 8004404:	4293      	cmp	r3, r2
 8004406:	d902      	bls.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	74fb      	strb	r3, [r7, #19]
            break;
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800440e:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0ec      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800441c:	7cfb      	ldrb	r3, [r7, #19]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10b      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	4903      	ldr	r1, [pc, #12]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004438:	e008      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	74bb      	strb	r3, [r7, #18]
 800443e:	e005      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004440:	40021000 	.word	0x40021000
 8004444:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800444c:	7c7b      	ldrb	r3, [r7, #17]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004452:	4ba6      	ldr	r3, [pc, #664]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	4aa5      	ldr	r2, [pc, #660]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800445c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800446a:	4ba0      	ldr	r3, [pc, #640]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f023 0203 	bic.w	r2, r3, #3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	499c      	ldr	r1, [pc, #624]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800448c:	4b97      	ldr	r3, [pc, #604]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004492:	f023 020c 	bic.w	r2, r3, #12
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	4994      	ldr	r1, [pc, #592]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ae:	4b8f      	ldr	r3, [pc, #572]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	498b      	ldr	r1, [pc, #556]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044d0:	4b86      	ldr	r3, [pc, #536]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	4983      	ldr	r1, [pc, #524]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044f2:	4b7e      	ldr	r3, [pc, #504]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	497a      	ldr	r1, [pc, #488]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004514:	4b75      	ldr	r3, [pc, #468]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	4972      	ldr	r1, [pc, #456]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004536:	4b6d      	ldr	r3, [pc, #436]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	4969      	ldr	r1, [pc, #420]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004558:	4b64      	ldr	r3, [pc, #400]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	4961      	ldr	r1, [pc, #388]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457a:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	4958      	ldr	r1, [pc, #352]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	2b00      	cmp	r3, #0
 800459a:	d015      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800459c:	4b53      	ldr	r3, [pc, #332]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	4950      	ldr	r1, [pc, #320]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ba:	d105      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045bc:	4b4b      	ldr	r3, [pc, #300]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a4a      	ldr	r2, [pc, #296]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d015      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045d4:	4b45      	ldr	r3, [pc, #276]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	4942      	ldr	r1, [pc, #264]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f2:	d105      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f4:	4b3d      	ldr	r3, [pc, #244]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a3c      	ldr	r2, [pc, #240]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d015      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800460c:	4b37      	ldr	r3, [pc, #220]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	4934      	ldr	r1, [pc, #208]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800462a:	d105      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800462c:	4b2f      	ldr	r3, [pc, #188]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a2e      	ldr	r2, [pc, #184]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004636:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d015      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004644:	4b29      	ldr	r3, [pc, #164]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	4926      	ldr	r1, [pc, #152]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004662:	d105      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004664:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a20      	ldr	r2, [pc, #128]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800466e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800467c:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	4918      	ldr	r1, [pc, #96]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800469a:	d105      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469c:	4b13      	ldr	r3, [pc, #76]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a12      	ldr	r2, [pc, #72]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d015      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	490a      	ldr	r1, [pc, #40]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d2:	d105      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a04      	ldr	r2, [pc, #16]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000

080046f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e049      	b.n	8004796 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fc fc9a 	bl	8001050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 fc82 	bl	8005038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d001      	beq.n	80047b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e042      	b.n	800483e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a21      	ldr	r2, [pc, #132]	; (800484c <HAL_TIM_Base_Start+0xac>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d018      	beq.n	80047fc <HAL_TIM_Base_Start+0x5c>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d013      	beq.n	80047fc <HAL_TIM_Base_Start+0x5c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <HAL_TIM_Base_Start+0xb0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00e      	beq.n	80047fc <HAL_TIM_Base_Start+0x5c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <HAL_TIM_Base_Start+0xb4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_TIM_Base_Start+0x5c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1a      	ldr	r2, [pc, #104]	; (8004858 <HAL_TIM_Base_Start+0xb8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <HAL_TIM_Base_Start+0x5c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a19      	ldr	r2, [pc, #100]	; (800485c <HAL_TIM_Base_Start+0xbc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d115      	bne.n	8004828 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	4b17      	ldr	r3, [pc, #92]	; (8004860 <HAL_TIM_Base_Start+0xc0>)
 8004804:	4013      	ands	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b06      	cmp	r3, #6
 800480c:	d015      	beq.n	800483a <HAL_TIM_Base_Start+0x9a>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004814:	d011      	beq.n	800483a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0201 	orr.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004826:	e008      	b.n	800483a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e000      	b.n	800483c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40012c00 	.word	0x40012c00
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40013400 	.word	0x40013400
 800485c:	40014000 	.word	0x40014000
 8004860:	00010007 	.word	0x00010007

08004864 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e049      	b.n	800490a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f841 	bl	8004912 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f000 fbc8 	bl	8005038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <HAL_TIM_PWM_Start+0x24>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	bf14      	ite	ne
 8004944:	2301      	movne	r3, #1
 8004946:	2300      	moveq	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	e03c      	b.n	80049c6 <HAL_TIM_PWM_Start+0x9e>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b04      	cmp	r3, #4
 8004950:	d109      	bne.n	8004966 <HAL_TIM_PWM_Start+0x3e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	e02f      	b.n	80049c6 <HAL_TIM_PWM_Start+0x9e>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b08      	cmp	r3, #8
 800496a:	d109      	bne.n	8004980 <HAL_TIM_PWM_Start+0x58>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	bf14      	ite	ne
 8004978:	2301      	movne	r3, #1
 800497a:	2300      	moveq	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e022      	b.n	80049c6 <HAL_TIM_PWM_Start+0x9e>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b0c      	cmp	r3, #12
 8004984:	d109      	bne.n	800499a <HAL_TIM_PWM_Start+0x72>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b01      	cmp	r3, #1
 8004990:	bf14      	ite	ne
 8004992:	2301      	movne	r3, #1
 8004994:	2300      	moveq	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	e015      	b.n	80049c6 <HAL_TIM_PWM_Start+0x9e>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b10      	cmp	r3, #16
 800499e:	d109      	bne.n	80049b4 <HAL_TIM_PWM_Start+0x8c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e008      	b.n	80049c6 <HAL_TIM_PWM_Start+0x9e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e097      	b.n	8004afe <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <HAL_TIM_PWM_Start+0xb6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049dc:	e023      	b.n	8004a26 <HAL_TIM_PWM_Start+0xfe>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_PWM_Start+0xc6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ec:	e01b      	b.n	8004a26 <HAL_TIM_PWM_Start+0xfe>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Start+0xd6>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fc:	e013      	b.n	8004a26 <HAL_TIM_PWM_Start+0xfe>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start+0xe6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a0c:	e00b      	b.n	8004a26 <HAL_TIM_PWM_Start+0xfe>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Start+0xf6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a1c:	e003      	b.n	8004a26 <HAL_TIM_PWM_Start+0xfe>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 ff24 	bl	800587c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a33      	ldr	r2, [pc, #204]	; (8004b08 <HAL_TIM_PWM_Start+0x1e0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_TIM_PWM_Start+0x13e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a32      	ldr	r2, [pc, #200]	; (8004b0c <HAL_TIM_PWM_Start+0x1e4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00e      	beq.n	8004a66 <HAL_TIM_PWM_Start+0x13e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a30      	ldr	r2, [pc, #192]	; (8004b10 <HAL_TIM_PWM_Start+0x1e8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_TIM_PWM_Start+0x13e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2f      	ldr	r2, [pc, #188]	; (8004b14 <HAL_TIM_PWM_Start+0x1ec>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_TIM_PWM_Start+0x13e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2d      	ldr	r2, [pc, #180]	; (8004b18 <HAL_TIM_PWM_Start+0x1f0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <HAL_TIM_PWM_Start+0x142>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <HAL_TIM_PWM_Start+0x144>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <HAL_TIM_PWM_Start+0x1e0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d018      	beq.n	8004abc <HAL_TIM_PWM_Start+0x194>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a92:	d013      	beq.n	8004abc <HAL_TIM_PWM_Start+0x194>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a20      	ldr	r2, [pc, #128]	; (8004b1c <HAL_TIM_PWM_Start+0x1f4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00e      	beq.n	8004abc <HAL_TIM_PWM_Start+0x194>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1f      	ldr	r2, [pc, #124]	; (8004b20 <HAL_TIM_PWM_Start+0x1f8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d009      	beq.n	8004abc <HAL_TIM_PWM_Start+0x194>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <HAL_TIM_PWM_Start+0x1e4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_TIM_PWM_Start+0x194>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <HAL_TIM_PWM_Start+0x1e8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d115      	bne.n	8004ae8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <HAL_TIM_PWM_Start+0x1fc>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b06      	cmp	r3, #6
 8004acc:	d015      	beq.n	8004afa <HAL_TIM_PWM_Start+0x1d2>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad4:	d011      	beq.n	8004afa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0201 	orr.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae6:	e008      	b.n	8004afa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e000      	b.n	8004afc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	40013400 	.word	0x40013400
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40014400 	.word	0x40014400
 8004b18:	40014800 	.word	0x40014800
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	00010007 	.word	0x00010007

08004b28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e097      	b.n	8004c6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7fc fac3 	bl	80010dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004b6c:	f023 0307 	bic.w	r3, r3, #7
 8004b70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f000 fa5b 	bl	8005038 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bc8:	f023 030c 	bic.w	r3, r3, #12
 8004bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	4313      	orrs	r3, r2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	011a      	lsls	r2, r3, #4
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	031b      	lsls	r3, r3, #12
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e0fd      	b.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x216>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b14      	cmp	r3, #20
 8004c9a:	f200 80f0 	bhi.w	8004e7e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004c9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cf9 	.word	0x08004cf9
 8004ca8:	08004e7f 	.word	0x08004e7f
 8004cac:	08004e7f 	.word	0x08004e7f
 8004cb0:	08004e7f 	.word	0x08004e7f
 8004cb4:	08004d39 	.word	0x08004d39
 8004cb8:	08004e7f 	.word	0x08004e7f
 8004cbc:	08004e7f 	.word	0x08004e7f
 8004cc0:	08004e7f 	.word	0x08004e7f
 8004cc4:	08004d7b 	.word	0x08004d7b
 8004cc8:	08004e7f 	.word	0x08004e7f
 8004ccc:	08004e7f 	.word	0x08004e7f
 8004cd0:	08004e7f 	.word	0x08004e7f
 8004cd4:	08004dbb 	.word	0x08004dbb
 8004cd8:	08004e7f 	.word	0x08004e7f
 8004cdc:	08004e7f 	.word	0x08004e7f
 8004ce0:	08004e7f 	.word	0x08004e7f
 8004ce4:	08004dfd 	.word	0x08004dfd
 8004ce8:	08004e7f 	.word	0x08004e7f
 8004cec:	08004e7f 	.word	0x08004e7f
 8004cf0:	08004e7f 	.word	0x08004e7f
 8004cf4:	08004e3d 	.word	0x08004e3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fa2a 	bl	8005158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0208 	orr.w	r2, r2, #8
 8004d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0204 	bic.w	r2, r2, #4
 8004d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6999      	ldr	r1, [r3, #24]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	619a      	str	r2, [r3, #24]
      break;
 8004d36:	e0a3      	b.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fa9a 	bl	8005278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6999      	ldr	r1, [r3, #24]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	021a      	lsls	r2, r3, #8
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	619a      	str	r2, [r3, #24]
      break;
 8004d78:	e082      	b.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fb03 	bl	800538c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0208 	orr.w	r2, r2, #8
 8004d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0204 	bic.w	r2, r2, #4
 8004da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69d9      	ldr	r1, [r3, #28]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	61da      	str	r2, [r3, #28]
      break;
 8004db8:	e062      	b.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fb6b 	bl	800549c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69d9      	ldr	r1, [r3, #28]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	021a      	lsls	r2, r3, #8
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	61da      	str	r2, [r3, #28]
      break;
 8004dfa:	e041      	b.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fbd4 	bl	80055b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0208 	orr.w	r2, r2, #8
 8004e16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0204 	bic.w	r2, r2, #4
 8004e26:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e3a:	e021      	b.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fc18 	bl	8005678 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	021a      	lsls	r2, r3, #8
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e7c:	e000      	b.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004e7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop

08004e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIM_ConfigClockSource+0x18>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e0b9      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x18c>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b70      	cmp	r3, #112	; 0x70
 8004ee6:	d02e      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0xb2>
 8004ee8:	2b70      	cmp	r3, #112	; 0x70
 8004eea:	d812      	bhi.n	8004f12 <HAL_TIM_ConfigClockSource+0x7e>
 8004eec:	2b30      	cmp	r3, #48	; 0x30
 8004eee:	f000 8084 	beq.w	8004ffa <HAL_TIM_ConfigClockSource+0x166>
 8004ef2:	2b30      	cmp	r3, #48	; 0x30
 8004ef4:	d806      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x70>
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d07f      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x166>
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d07d      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x166>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d07b      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f02:	e084      	b.n	800500e <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004f04:	2b50      	cmp	r3, #80	; 0x50
 8004f06:	d048      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0x106>
 8004f08:	2b60      	cmp	r3, #96	; 0x60
 8004f0a:	d056      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x126>
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d064      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x146>
      break;
 8004f10:	e07d      	b.n	800500e <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004f12:	4a45      	ldr	r2, [pc, #276]	; (8005028 <HAL_TIM_ConfigClockSource+0x194>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d070      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x166>
 8004f18:	4a43      	ldr	r2, [pc, #268]	; (8005028 <HAL_TIM_ConfigClockSource+0x194>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d809      	bhi.n	8004f32 <HAL_TIM_ConfigClockSource+0x9e>
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f22:	d027      	beq.n	8004f74 <HAL_TIM_ConfigClockSource+0xe0>
 8004f24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f28:	d067      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x166>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	d06d      	beq.n	800500c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f30:	e06d      	b.n	800500e <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004f32:	4a3e      	ldr	r2, [pc, #248]	; (800502c <HAL_TIM_ConfigClockSource+0x198>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d060      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x166>
 8004f38:	4a3d      	ldr	r2, [pc, #244]	; (8005030 <HAL_TIM_ConfigClockSource+0x19c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d05d      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x166>
 8004f3e:	4a3d      	ldr	r2, [pc, #244]	; (8005034 <HAL_TIM_ConfigClockSource+0x1a0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d05a      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x166>
      break;
 8004f44:	e063      	b.n	800500e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6899      	ldr	r1, [r3, #8]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f000 fc71 	bl	800583c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	609a      	str	r2, [r3, #8]
      break;
 8004f72:	e04c      	b.n	800500e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6899      	ldr	r1, [r3, #8]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f000 fc5a 	bl	800583c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f96:	609a      	str	r2, [r3, #8]
      break;
 8004f98:	e039      	b.n	800500e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6859      	ldr	r1, [r3, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f000 fbcc 	bl	8005744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2150      	movs	r1, #80	; 0x50
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fc25 	bl	8005802 <TIM_ITRx_SetConfig>
      break;
 8004fb8:	e029      	b.n	800500e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f000 fbeb 	bl	80057a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2160      	movs	r1, #96	; 0x60
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fc15 	bl	8005802 <TIM_ITRx_SetConfig>
      break;
 8004fd8:	e019      	b.n	800500e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6859      	ldr	r1, [r3, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f000 fbac 	bl	8005744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2140      	movs	r1, #64	; 0x40
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fc05 	bl	8005802 <TIM_ITRx_SetConfig>
      break;
 8004ff8:	e009      	b.n	800500e <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f000 fbfc 	bl	8005802 <TIM_ITRx_SetConfig>
        break;
 800500a:	e000      	b.n	800500e <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800500c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	00100020 	.word	0x00100020
 800502c:	00100040 	.word	0x00100040
 8005030:	00100070 	.word	0x00100070
 8005034:	00100030 	.word	0x00100030

08005038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3c      	ldr	r2, [pc, #240]	; (800513c <TIM_Base_SetConfig+0x104>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00f      	beq.n	8005070 <TIM_Base_SetConfig+0x38>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d00b      	beq.n	8005070 <TIM_Base_SetConfig+0x38>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a39      	ldr	r2, [pc, #228]	; (8005140 <TIM_Base_SetConfig+0x108>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_Base_SetConfig+0x38>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a38      	ldr	r2, [pc, #224]	; (8005144 <TIM_Base_SetConfig+0x10c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_Base_SetConfig+0x38>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a37      	ldr	r2, [pc, #220]	; (8005148 <TIM_Base_SetConfig+0x110>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d108      	bne.n	8005082 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a2d      	ldr	r2, [pc, #180]	; (800513c <TIM_Base_SetConfig+0x104>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01b      	beq.n	80050c2 <TIM_Base_SetConfig+0x8a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005090:	d017      	beq.n	80050c2 <TIM_Base_SetConfig+0x8a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <TIM_Base_SetConfig+0x108>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <TIM_Base_SetConfig+0x8a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a29      	ldr	r2, [pc, #164]	; (8005144 <TIM_Base_SetConfig+0x10c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00f      	beq.n	80050c2 <TIM_Base_SetConfig+0x8a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a28      	ldr	r2, [pc, #160]	; (8005148 <TIM_Base_SetConfig+0x110>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_Base_SetConfig+0x8a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a27      	ldr	r2, [pc, #156]	; (800514c <TIM_Base_SetConfig+0x114>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <TIM_Base_SetConfig+0x8a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a26      	ldr	r2, [pc, #152]	; (8005150 <TIM_Base_SetConfig+0x118>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_Base_SetConfig+0x8a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a25      	ldr	r2, [pc, #148]	; (8005154 <TIM_Base_SetConfig+0x11c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d108      	bne.n	80050d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a10      	ldr	r2, [pc, #64]	; (800513c <TIM_Base_SetConfig+0x104>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00f      	beq.n	8005120 <TIM_Base_SetConfig+0xe8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a11      	ldr	r2, [pc, #68]	; (8005148 <TIM_Base_SetConfig+0x110>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00b      	beq.n	8005120 <TIM_Base_SetConfig+0xe8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a10      	ldr	r2, [pc, #64]	; (800514c <TIM_Base_SetConfig+0x114>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <TIM_Base_SetConfig+0xe8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a0f      	ldr	r2, [pc, #60]	; (8005150 <TIM_Base_SetConfig+0x118>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_Base_SetConfig+0xe8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a0e      	ldr	r2, [pc, #56]	; (8005154 <TIM_Base_SetConfig+0x11c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d103      	bne.n	8005128 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	615a      	str	r2, [r3, #20]
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40013400 	.word	0x40013400
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800

08005158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f023 0302 	bic.w	r3, r3, #2
 80051a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a2c      	ldr	r2, [pc, #176]	; (8005264 <TIM_OC1_SetConfig+0x10c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00f      	beq.n	80051d8 <TIM_OC1_SetConfig+0x80>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a2b      	ldr	r2, [pc, #172]	; (8005268 <TIM_OC1_SetConfig+0x110>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00b      	beq.n	80051d8 <TIM_OC1_SetConfig+0x80>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a2a      	ldr	r2, [pc, #168]	; (800526c <TIM_OC1_SetConfig+0x114>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d007      	beq.n	80051d8 <TIM_OC1_SetConfig+0x80>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a29      	ldr	r2, [pc, #164]	; (8005270 <TIM_OC1_SetConfig+0x118>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_OC1_SetConfig+0x80>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a28      	ldr	r2, [pc, #160]	; (8005274 <TIM_OC1_SetConfig+0x11c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d10c      	bne.n	80051f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f023 0308 	bic.w	r3, r3, #8
 80051de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f023 0304 	bic.w	r3, r3, #4
 80051f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <TIM_OC1_SetConfig+0x10c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00f      	beq.n	800521a <TIM_OC1_SetConfig+0xc2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <TIM_OC1_SetConfig+0x110>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00b      	beq.n	800521a <TIM_OC1_SetConfig+0xc2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a19      	ldr	r2, [pc, #100]	; (800526c <TIM_OC1_SetConfig+0x114>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d007      	beq.n	800521a <TIM_OC1_SetConfig+0xc2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a18      	ldr	r2, [pc, #96]	; (8005270 <TIM_OC1_SetConfig+0x118>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d003      	beq.n	800521a <TIM_OC1_SetConfig+0xc2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a17      	ldr	r2, [pc, #92]	; (8005274 <TIM_OC1_SetConfig+0x11c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d111      	bne.n	800523e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40013400 	.word	0x40013400
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800

08005278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f023 0210 	bic.w	r2, r3, #16
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0320 	bic.w	r3, r3, #32
 80052c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a28      	ldr	r2, [pc, #160]	; (8005378 <TIM_OC2_SetConfig+0x100>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_OC2_SetConfig+0x6c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a27      	ldr	r2, [pc, #156]	; (800537c <TIM_OC2_SetConfig+0x104>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10d      	bne.n	8005300 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <TIM_OC2_SetConfig+0x100>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00f      	beq.n	8005328 <TIM_OC2_SetConfig+0xb0>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1c      	ldr	r2, [pc, #112]	; (800537c <TIM_OC2_SetConfig+0x104>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_OC2_SetConfig+0xb0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a1b      	ldr	r2, [pc, #108]	; (8005380 <TIM_OC2_SetConfig+0x108>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_OC2_SetConfig+0xb0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a1a      	ldr	r2, [pc, #104]	; (8005384 <TIM_OC2_SetConfig+0x10c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_OC2_SetConfig+0xb0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a19      	ldr	r2, [pc, #100]	; (8005388 <TIM_OC2_SetConfig+0x110>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d113      	bne.n	8005350 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40013400 	.word	0x40013400
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800

0800538c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a27      	ldr	r2, [pc, #156]	; (8005488 <TIM_OC3_SetConfig+0xfc>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_OC3_SetConfig+0x6a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a26      	ldr	r2, [pc, #152]	; (800548c <TIM_OC3_SetConfig+0x100>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d10d      	bne.n	8005412 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <TIM_OC3_SetConfig+0xfc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00f      	beq.n	800543a <TIM_OC3_SetConfig+0xae>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a1b      	ldr	r2, [pc, #108]	; (800548c <TIM_OC3_SetConfig+0x100>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00b      	beq.n	800543a <TIM_OC3_SetConfig+0xae>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <TIM_OC3_SetConfig+0x104>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d007      	beq.n	800543a <TIM_OC3_SetConfig+0xae>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a19      	ldr	r2, [pc, #100]	; (8005494 <TIM_OC3_SetConfig+0x108>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d003      	beq.n	800543a <TIM_OC3_SetConfig+0xae>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a18      	ldr	r2, [pc, #96]	; (8005498 <TIM_OC3_SetConfig+0x10c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d113      	bne.n	8005462 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800

0800549c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	031b      	lsls	r3, r3, #12
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a28      	ldr	r2, [pc, #160]	; (800559c <TIM_OC4_SetConfig+0x100>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_OC4_SetConfig+0x6c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a27      	ldr	r2, [pc, #156]	; (80055a0 <TIM_OC4_SetConfig+0x104>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d10d      	bne.n	8005524 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800550e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	031b      	lsls	r3, r3, #12
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a1d      	ldr	r2, [pc, #116]	; (800559c <TIM_OC4_SetConfig+0x100>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00f      	beq.n	800554c <TIM_OC4_SetConfig+0xb0>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <TIM_OC4_SetConfig+0x104>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00b      	beq.n	800554c <TIM_OC4_SetConfig+0xb0>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <TIM_OC4_SetConfig+0x108>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_OC4_SetConfig+0xb0>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a1a      	ldr	r2, [pc, #104]	; (80055a8 <TIM_OC4_SetConfig+0x10c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_OC4_SetConfig+0xb0>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a19      	ldr	r2, [pc, #100]	; (80055ac <TIM_OC4_SetConfig+0x110>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d113      	bne.n	8005574 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005552:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800555a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	019b      	lsls	r3, r3, #6
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	019b      	lsls	r3, r3, #6
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40013400 	.word	0x40013400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40014400 	.word	0x40014400
 80055ac:	40014800 	.word	0x40014800

080055b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a17      	ldr	r2, [pc, #92]	; (8005664 <TIM_OC5_SetConfig+0xb4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00f      	beq.n	800562a <TIM_OC5_SetConfig+0x7a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <TIM_OC5_SetConfig+0xb8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00b      	beq.n	800562a <TIM_OC5_SetConfig+0x7a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a15      	ldr	r2, [pc, #84]	; (800566c <TIM_OC5_SetConfig+0xbc>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d007      	beq.n	800562a <TIM_OC5_SetConfig+0x7a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a14      	ldr	r2, [pc, #80]	; (8005670 <TIM_OC5_SetConfig+0xc0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_OC5_SetConfig+0x7a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a13      	ldr	r2, [pc, #76]	; (8005674 <TIM_OC5_SetConfig+0xc4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d109      	bne.n	800563e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005630:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	621a      	str	r2, [r3, #32]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40012c00 	.word	0x40012c00
 8005668:	40013400 	.word	0x40013400
 800566c:	40014000 	.word	0x40014000
 8005670:	40014400 	.word	0x40014400
 8005674:	40014800 	.word	0x40014800

08005678 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	051b      	lsls	r3, r3, #20
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a18      	ldr	r2, [pc, #96]	; (8005730 <TIM_OC6_SetConfig+0xb8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00f      	beq.n	80056f4 <TIM_OC6_SetConfig+0x7c>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a17      	ldr	r2, [pc, #92]	; (8005734 <TIM_OC6_SetConfig+0xbc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00b      	beq.n	80056f4 <TIM_OC6_SetConfig+0x7c>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a16      	ldr	r2, [pc, #88]	; (8005738 <TIM_OC6_SetConfig+0xc0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d007      	beq.n	80056f4 <TIM_OC6_SetConfig+0x7c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a15      	ldr	r2, [pc, #84]	; (800573c <TIM_OC6_SetConfig+0xc4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_OC6_SetConfig+0x7c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a14      	ldr	r2, [pc, #80]	; (8005740 <TIM_OC6_SetConfig+0xc8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d109      	bne.n	8005708 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40012c00 	.word	0x40012c00
 8005734:	40013400 	.word	0x40013400
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800

08005744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0201 	bic.w	r2, r3, #1
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800576e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f023 030a 	bic.w	r3, r3, #10
 8005780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b087      	sub	sp, #28
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0210 	bic.w	r2, r3, #16
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	031b      	lsls	r3, r3, #12
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	f043 0307 	orr.w	r3, r3, #7
 8005828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	609a      	str	r2, [r3, #8]
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	021a      	lsls	r2, r3, #8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	431a      	orrs	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4313      	orrs	r3, r2
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	2201      	movs	r2, #1
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a1a      	ldr	r2, [r3, #32]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	43db      	mvns	r3, r3
 800589e:	401a      	ands	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1a      	ldr	r2, [r3, #32]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	fa01 f303 	lsl.w	r3, r1, r3
 80058b4:	431a      	orrs	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <HAL_TIMEx_PWMN_Start+0x24>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e022      	b.n	8005932 <HAL_TIMEx_PWMN_Start+0x6a>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d109      	bne.n	8005906 <HAL_TIMEx_PWMN_Start+0x3e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	bf14      	ite	ne
 80058fe:	2301      	movne	r3, #1
 8005900:	2300      	moveq	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	e015      	b.n	8005932 <HAL_TIMEx_PWMN_Start+0x6a>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d109      	bne.n	8005920 <HAL_TIMEx_PWMN_Start+0x58>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	e008      	b.n	8005932 <HAL_TIMEx_PWMN_Start+0x6a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	bf14      	ite	ne
 800592c:	2301      	movne	r3, #1
 800592e:	2300      	moveq	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e069      	b.n	8005a0e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d104      	bne.n	800594a <HAL_TIMEx_PWMN_Start+0x82>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005948:	e013      	b.n	8005972 <HAL_TIMEx_PWMN_Start+0xaa>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b04      	cmp	r3, #4
 800594e:	d104      	bne.n	800595a <HAL_TIMEx_PWMN_Start+0x92>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005958:	e00b      	b.n	8005972 <HAL_TIMEx_PWMN_Start+0xaa>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d104      	bne.n	800596a <HAL_TIMEx_PWMN_Start+0xa2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005968:	e003      	b.n	8005972 <HAL_TIMEx_PWMN_Start+0xaa>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2204      	movs	r2, #4
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 f97a 	bl	8005c74 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800598e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a20      	ldr	r2, [pc, #128]	; (8005a18 <HAL_TIMEx_PWMN_Start+0x150>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d018      	beq.n	80059cc <HAL_TIMEx_PWMN_Start+0x104>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d013      	beq.n	80059cc <HAL_TIMEx_PWMN_Start+0x104>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <HAL_TIMEx_PWMN_Start+0x154>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00e      	beq.n	80059cc <HAL_TIMEx_PWMN_Start+0x104>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <HAL_TIMEx_PWMN_Start+0x158>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d009      	beq.n	80059cc <HAL_TIMEx_PWMN_Start+0x104>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <HAL_TIMEx_PWMN_Start+0x15c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <HAL_TIMEx_PWMN_Start+0x104>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <HAL_TIMEx_PWMN_Start+0x160>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d115      	bne.n	80059f8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	4b16      	ldr	r3, [pc, #88]	; (8005a2c <HAL_TIMEx_PWMN_Start+0x164>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b06      	cmp	r3, #6
 80059dc:	d015      	beq.n	8005a0a <HAL_TIMEx_PWMN_Start+0x142>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e4:	d011      	beq.n	8005a0a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0201 	orr.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f6:	e008      	b.n	8005a0a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	e000      	b.n	8005a0c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40013400 	.word	0x40013400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	00010007 	.word	0x00010007

08005a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e065      	b.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2c      	ldr	r2, [pc, #176]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2b      	ldr	r2, [pc, #172]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d108      	bne.n	8005a8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1b      	ldr	r2, [pc, #108]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d018      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abe:	d013      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a18      	ldr	r2, [pc, #96]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a12      	ldr	r2, [pc, #72]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10c      	bne.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40013400 	.word	0x40013400
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40014000 	.word	0x40014000

08005b34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e087      	b.n	8005c60 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	041b      	lsls	r3, r3, #16
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a27      	ldr	r2, [pc, #156]	; (8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d106      	bne.n	8005bec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d126      	bne.n	8005c4e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	051b      	lsls	r3, r3, #20
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0e      	ldr	r2, [pc, #56]	; (8005c6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a0d      	ldr	r2, [pc, #52]	; (8005c70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d106      	bne.n	8005c4e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40013400 	.word	0x40013400

08005c74 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2204      	movs	r2, #4
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1a      	ldr	r2, [r3, #32]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1a      	ldr	r2, [r3, #32]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cac:	431a      	orrs	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	607a      	str	r2, [r7, #4]
 8005cca:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e05b      	b.n	8005d8e <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7fb fae5 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2224      	movs	r2, #36	; 0x24
 8005cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f9da 	bl	80060c0 <UART_SetConfig>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_MultiProcessor_Init+0x58>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e03b      	b.n	8005d8e <HAL_MultiProcessor_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_MultiProcessor_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fc76 	bl	8006610 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d42:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4a:	d10a      	bne.n	8005d62 <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8005d56:	7afb      	ldrb	r3, [r7, #11]
 8005d58:	061a      	lsls	r2, r3, #24
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0201 	orr.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fce4 	bl	8006754 <UART_CheckIdleState>
 8005d8c:	4603      	mov	r3, r0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	f640 030f 	movw	r3, #2063	; 0x80f
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d118      	bne.n	8005dfa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d013      	beq.n	8005dfa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8145 	beq.w	800607a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4798      	blx	r3
      }
      return;
 8005df8:	e13f      	b.n	800607a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80e8 	beq.w	8005fd2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4ba1      	ldr	r3, [pc, #644]	; (800608c <HAL_UART_IRQHandler+0x2f4>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4ba0      	ldr	r3, [pc, #640]	; (8006090 <HAL_UART_IRQHandler+0x2f8>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80dd 	beq.w	8005fd2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d010      	beq.n	8005e44 <HAL_UART_IRQHandler+0xac>
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2201      	movs	r2, #1
 8005e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3a:	f043 0201 	orr.w	r2, r3, #1
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d010      	beq.n	8005e70 <HAL_UART_IRQHandler+0xd8>
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e66:	f043 0204 	orr.w	r2, r3, #4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d010      	beq.n	8005e9c <HAL_UART_IRQHandler+0x104>
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2204      	movs	r2, #4
 8005e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f043 0202 	orr.w	r2, r3, #2
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d015      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d104      	bne.n	8005eba <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4b76      	ldr	r3, [pc, #472]	; (800608c <HAL_UART_IRQHandler+0x2f4>)
 8005eb4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	f043 0208 	orr.w	r2, r3, #8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d011      	beq.n	8005f00 <HAL_UART_IRQHandler+0x168>
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00c      	beq.n	8005f00 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80b9 	beq.w	800607e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d011      	beq.n	8005f3a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	d004      	beq.n	8005f5a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d031      	beq.n	8005fbe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fcc2 	bl	80068e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d123      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f7c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d013      	beq.n	8005fae <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f8a:	4a42      	ldr	r2, [pc, #264]	; (8006094 <HAL_UART_IRQHandler+0x2fc>)
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fd f869 	bl	800306a <HAL_DMA_Abort_IT>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d017      	beq.n	8005fce <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fac:	e00f      	b.n	8005fce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f87c 	bl	80060ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	e00b      	b.n	8005fce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f878 	bl	80060ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	e007      	b.n	8005fce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f874 	bl	80060ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005fcc:	e057      	b.n	800607e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fce:	bf00      	nop
    return;
 8005fd0:	e055      	b.n	800607e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00d      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x260>
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fcca 	bl	800698a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ff6:	e045      	b.n	8006084 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d012      	beq.n	8006028 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601a:	2b00      	cmp	r3, #0
 800601c:	d031      	beq.n	8006082 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
    }
    return;
 8006026:	e02c      	b.n	8006082 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d008      	beq.n	8006044 <HAL_UART_IRQHandler+0x2ac>
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fc8a 	bl	8006956 <UART_EndTransmit_IT>
    return;
 8006042:	e01f      	b.n	8006084 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <HAL_UART_IRQHandler+0x2c8>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fcaa 	bl	80069b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800605e:	e011      	b.n	8006084 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <HAL_UART_IRQHandler+0x2ec>
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	da09      	bge.n	8006084 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fc94 	bl	800699e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006076:	bf00      	nop
 8006078:	e004      	b.n	8006084 <HAL_UART_IRQHandler+0x2ec>
      return;
 800607a:	bf00      	nop
 800607c:	e002      	b.n	8006084 <HAL_UART_IRQHandler+0x2ec>
    return;
 800607e:	bf00      	nop
 8006080:	e000      	b.n	8006084 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006082:	bf00      	nop
  }
}
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	10000001 	.word	0x10000001
 8006090:	04000120 	.word	0x04000120
 8006094:	0800692b 	.word	0x0800692b

08006098 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80060c4:	b088      	sub	sp, #32
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4bb0      	ldr	r3, [pc, #704]	; (80063b8 <UART_SetConfig+0x2f8>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	69f9      	ldr	r1, [r7, #28]
 8006100:	430b      	orrs	r3, r1
 8006102:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4aa5      	ldr	r2, [pc, #660]	; (80063bc <UART_SetConfig+0x2fc>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	4313      	orrs	r3, r2
 8006132:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800613e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	69f9      	ldr	r1, [r7, #28]
 8006148:	430b      	orrs	r3, r1
 800614a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	f023 010f 	bic.w	r1, r3, #15
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a96      	ldr	r2, [pc, #600]	; (80063c0 <UART_SetConfig+0x300>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d121      	bne.n	80061b0 <UART_SetConfig+0xf0>
 800616c:	4b95      	ldr	r3, [pc, #596]	; (80063c4 <UART_SetConfig+0x304>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b03      	cmp	r3, #3
 8006178:	d816      	bhi.n	80061a8 <UART_SetConfig+0xe8>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <UART_SetConfig+0xc0>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	08006191 	.word	0x08006191
 8006184:	0800619d 	.word	0x0800619d
 8006188:	08006197 	.word	0x08006197
 800618c:	080061a3 	.word	0x080061a3
 8006190:	2301      	movs	r3, #1
 8006192:	76fb      	strb	r3, [r7, #27]
 8006194:	e0be      	b.n	8006314 <UART_SetConfig+0x254>
 8006196:	2302      	movs	r3, #2
 8006198:	76fb      	strb	r3, [r7, #27]
 800619a:	e0bb      	b.n	8006314 <UART_SetConfig+0x254>
 800619c:	2304      	movs	r3, #4
 800619e:	76fb      	strb	r3, [r7, #27]
 80061a0:	e0b8      	b.n	8006314 <UART_SetConfig+0x254>
 80061a2:	2308      	movs	r3, #8
 80061a4:	76fb      	strb	r3, [r7, #27]
 80061a6:	e0b5      	b.n	8006314 <UART_SetConfig+0x254>
 80061a8:	2310      	movs	r3, #16
 80061aa:	76fb      	strb	r3, [r7, #27]
 80061ac:	bf00      	nop
 80061ae:	e0b1      	b.n	8006314 <UART_SetConfig+0x254>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a84      	ldr	r2, [pc, #528]	; (80063c8 <UART_SetConfig+0x308>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d134      	bne.n	8006224 <UART_SetConfig+0x164>
 80061ba:	4b82      	ldr	r3, [pc, #520]	; (80063c4 <UART_SetConfig+0x304>)
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c0:	f003 030c 	and.w	r3, r3, #12
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d829      	bhi.n	800621c <UART_SetConfig+0x15c>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <UART_SetConfig+0x110>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	08006205 	.word	0x08006205
 80061d4:	0800621d 	.word	0x0800621d
 80061d8:	0800621d 	.word	0x0800621d
 80061dc:	0800621d 	.word	0x0800621d
 80061e0:	08006211 	.word	0x08006211
 80061e4:	0800621d 	.word	0x0800621d
 80061e8:	0800621d 	.word	0x0800621d
 80061ec:	0800621d 	.word	0x0800621d
 80061f0:	0800620b 	.word	0x0800620b
 80061f4:	0800621d 	.word	0x0800621d
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	0800621d 	.word	0x0800621d
 8006200:	08006217 	.word	0x08006217
 8006204:	2300      	movs	r3, #0
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	e084      	b.n	8006314 <UART_SetConfig+0x254>
 800620a:	2302      	movs	r3, #2
 800620c:	76fb      	strb	r3, [r7, #27]
 800620e:	e081      	b.n	8006314 <UART_SetConfig+0x254>
 8006210:	2304      	movs	r3, #4
 8006212:	76fb      	strb	r3, [r7, #27]
 8006214:	e07e      	b.n	8006314 <UART_SetConfig+0x254>
 8006216:	2308      	movs	r3, #8
 8006218:	76fb      	strb	r3, [r7, #27]
 800621a:	e07b      	b.n	8006314 <UART_SetConfig+0x254>
 800621c:	2310      	movs	r3, #16
 800621e:	76fb      	strb	r3, [r7, #27]
 8006220:	bf00      	nop
 8006222:	e077      	b.n	8006314 <UART_SetConfig+0x254>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a68      	ldr	r2, [pc, #416]	; (80063cc <UART_SetConfig+0x30c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d120      	bne.n	8006270 <UART_SetConfig+0x1b0>
 800622e:	4b65      	ldr	r3, [pc, #404]	; (80063c4 <UART_SetConfig+0x304>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006234:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006238:	2b10      	cmp	r3, #16
 800623a:	d00f      	beq.n	800625c <UART_SetConfig+0x19c>
 800623c:	2b10      	cmp	r3, #16
 800623e:	d802      	bhi.n	8006246 <UART_SetConfig+0x186>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <UART_SetConfig+0x190>
 8006244:	e010      	b.n	8006268 <UART_SetConfig+0x1a8>
 8006246:	2b20      	cmp	r3, #32
 8006248:	d005      	beq.n	8006256 <UART_SetConfig+0x196>
 800624a:	2b30      	cmp	r3, #48	; 0x30
 800624c:	d009      	beq.n	8006262 <UART_SetConfig+0x1a2>
 800624e:	e00b      	b.n	8006268 <UART_SetConfig+0x1a8>
 8006250:	2300      	movs	r3, #0
 8006252:	76fb      	strb	r3, [r7, #27]
 8006254:	e05e      	b.n	8006314 <UART_SetConfig+0x254>
 8006256:	2302      	movs	r3, #2
 8006258:	76fb      	strb	r3, [r7, #27]
 800625a:	e05b      	b.n	8006314 <UART_SetConfig+0x254>
 800625c:	2304      	movs	r3, #4
 800625e:	76fb      	strb	r3, [r7, #27]
 8006260:	e058      	b.n	8006314 <UART_SetConfig+0x254>
 8006262:	2308      	movs	r3, #8
 8006264:	76fb      	strb	r3, [r7, #27]
 8006266:	e055      	b.n	8006314 <UART_SetConfig+0x254>
 8006268:	2310      	movs	r3, #16
 800626a:	76fb      	strb	r3, [r7, #27]
 800626c:	bf00      	nop
 800626e:	e051      	b.n	8006314 <UART_SetConfig+0x254>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a56      	ldr	r2, [pc, #344]	; (80063d0 <UART_SetConfig+0x310>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d120      	bne.n	80062bc <UART_SetConfig+0x1fc>
 800627a:	4b52      	ldr	r3, [pc, #328]	; (80063c4 <UART_SetConfig+0x304>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006284:	2b40      	cmp	r3, #64	; 0x40
 8006286:	d00f      	beq.n	80062a8 <UART_SetConfig+0x1e8>
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d802      	bhi.n	8006292 <UART_SetConfig+0x1d2>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <UART_SetConfig+0x1dc>
 8006290:	e010      	b.n	80062b4 <UART_SetConfig+0x1f4>
 8006292:	2b80      	cmp	r3, #128	; 0x80
 8006294:	d005      	beq.n	80062a2 <UART_SetConfig+0x1e2>
 8006296:	2bc0      	cmp	r3, #192	; 0xc0
 8006298:	d009      	beq.n	80062ae <UART_SetConfig+0x1ee>
 800629a:	e00b      	b.n	80062b4 <UART_SetConfig+0x1f4>
 800629c:	2300      	movs	r3, #0
 800629e:	76fb      	strb	r3, [r7, #27]
 80062a0:	e038      	b.n	8006314 <UART_SetConfig+0x254>
 80062a2:	2302      	movs	r3, #2
 80062a4:	76fb      	strb	r3, [r7, #27]
 80062a6:	e035      	b.n	8006314 <UART_SetConfig+0x254>
 80062a8:	2304      	movs	r3, #4
 80062aa:	76fb      	strb	r3, [r7, #27]
 80062ac:	e032      	b.n	8006314 <UART_SetConfig+0x254>
 80062ae:	2308      	movs	r3, #8
 80062b0:	76fb      	strb	r3, [r7, #27]
 80062b2:	e02f      	b.n	8006314 <UART_SetConfig+0x254>
 80062b4:	2310      	movs	r3, #16
 80062b6:	76fb      	strb	r3, [r7, #27]
 80062b8:	bf00      	nop
 80062ba:	e02b      	b.n	8006314 <UART_SetConfig+0x254>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a3e      	ldr	r2, [pc, #248]	; (80063bc <UART_SetConfig+0x2fc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d124      	bne.n	8006310 <UART_SetConfig+0x250>
 80062c6:	4b3f      	ldr	r3, [pc, #252]	; (80063c4 <UART_SetConfig+0x304>)
 80062c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d4:	d012      	beq.n	80062fc <UART_SetConfig+0x23c>
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062da:	d802      	bhi.n	80062e2 <UART_SetConfig+0x222>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <UART_SetConfig+0x230>
 80062e0:	e012      	b.n	8006308 <UART_SetConfig+0x248>
 80062e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e6:	d006      	beq.n	80062f6 <UART_SetConfig+0x236>
 80062e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062ec:	d009      	beq.n	8006302 <UART_SetConfig+0x242>
 80062ee:	e00b      	b.n	8006308 <UART_SetConfig+0x248>
 80062f0:	2300      	movs	r3, #0
 80062f2:	76fb      	strb	r3, [r7, #27]
 80062f4:	e00e      	b.n	8006314 <UART_SetConfig+0x254>
 80062f6:	2302      	movs	r3, #2
 80062f8:	76fb      	strb	r3, [r7, #27]
 80062fa:	e00b      	b.n	8006314 <UART_SetConfig+0x254>
 80062fc:	2304      	movs	r3, #4
 80062fe:	76fb      	strb	r3, [r7, #27]
 8006300:	e008      	b.n	8006314 <UART_SetConfig+0x254>
 8006302:	2308      	movs	r3, #8
 8006304:	76fb      	strb	r3, [r7, #27]
 8006306:	e005      	b.n	8006314 <UART_SetConfig+0x254>
 8006308:	2310      	movs	r3, #16
 800630a:	76fb      	strb	r3, [r7, #27]
 800630c:	bf00      	nop
 800630e:	e001      	b.n	8006314 <UART_SetConfig+0x254>
 8006310:	2310      	movs	r3, #16
 8006312:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a28      	ldr	r2, [pc, #160]	; (80063bc <UART_SetConfig+0x2fc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f040 80a1 	bne.w	8006462 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006320:	7efb      	ldrb	r3, [r7, #27]
 8006322:	2b08      	cmp	r3, #8
 8006324:	d823      	bhi.n	800636e <UART_SetConfig+0x2ae>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <UART_SetConfig+0x26c>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006351 	.word	0x08006351
 8006330:	0800636f 	.word	0x0800636f
 8006334:	08006359 	.word	0x08006359
 8006338:	0800636f 	.word	0x0800636f
 800633c:	0800635f 	.word	0x0800635f
 8006340:	0800636f 	.word	0x0800636f
 8006344:	0800636f 	.word	0x0800636f
 8006348:	0800636f 	.word	0x0800636f
 800634c:	08006367 	.word	0x08006367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fd ff6c 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8006354:	6178      	str	r0, [r7, #20]
        break;
 8006356:	e00f      	b.n	8006378 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <UART_SetConfig+0x314>)
 800635a:	617b      	str	r3, [r7, #20]
        break;
 800635c:	e00c      	b.n	8006378 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635e:	f7fd fef7 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8006362:	6178      	str	r0, [r7, #20]
        break;
 8006364:	e008      	b.n	8006378 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636a:	617b      	str	r3, [r7, #20]
        break;
 800636c:	e004      	b.n	8006378 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	76bb      	strb	r3, [r7, #26]
        break;
 8006376:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 8130 	beq.w	80065e0 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	4a14      	ldr	r2, [pc, #80]	; (80063d8 <UART_SetConfig+0x318>)
 8006386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800638a:	461a      	mov	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006392:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4413      	add	r3, r2
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d305      	bcc.n	80063b0 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d915      	bls.n	80063dc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	76bb      	strb	r3, [r7, #26]
 80063b4:	e114      	b.n	80065e0 <UART_SetConfig+0x520>
 80063b6:	bf00      	nop
 80063b8:	cfff69f3 	.word	0xcfff69f3
 80063bc:	40008000 	.word	0x40008000
 80063c0:	40013800 	.word	0x40013800
 80063c4:	40021000 	.word	0x40021000
 80063c8:	40004400 	.word	0x40004400
 80063cc:	40004800 	.word	0x40004800
 80063d0:	40004c00 	.word	0x40004c00
 80063d4:	00f42400 	.word	0x00f42400
 80063d8:	08007284 	.word	0x08007284
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4618      	mov	r0, r3
 80063e0:	f04f 0100 	mov.w	r1, #0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	4a87      	ldr	r2, [pc, #540]	; (8006608 <UART_SetConfig+0x548>)
 80063ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f04f 0400 	mov.w	r4, #0
 80063f4:	461a      	mov	r2, r3
 80063f6:	4623      	mov	r3, r4
 80063f8:	f7f9 ff0e 	bl	8000218 <__aeabi_uldivmod>
 80063fc:	4603      	mov	r3, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	4619      	mov	r1, r3
 8006402:	4622      	mov	r2, r4
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	f04f 0400 	mov.w	r4, #0
 800640c:	0214      	lsls	r4, r2, #8
 800640e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006412:	020b      	lsls	r3, r1, #8
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6852      	ldr	r2, [r2, #4]
 8006418:	0852      	lsrs	r2, r2, #1
 800641a:	4611      	mov	r1, r2
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	eb13 0b01 	adds.w	fp, r3, r1
 8006424:	eb44 0c02 	adc.w	ip, r4, r2
 8006428:	4658      	mov	r0, fp
 800642a:	4661      	mov	r1, ip
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f04f 0400 	mov.w	r4, #0
 8006434:	461a      	mov	r2, r3
 8006436:	4623      	mov	r3, r4
 8006438:	f7f9 feee 	bl	8000218 <__aeabi_uldivmod>
 800643c:	4603      	mov	r3, r0
 800643e:	460c      	mov	r4, r1
 8006440:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006448:	d308      	bcc.n	800645c <UART_SetConfig+0x39c>
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006450:	d204      	bcs.n	800645c <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	e0c1      	b.n	80065e0 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	76bb      	strb	r3, [r7, #26]
 8006460:	e0be      	b.n	80065e0 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800646a:	d164      	bne.n	8006536 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 800646c:	7efb      	ldrb	r3, [r7, #27]
 800646e:	2b08      	cmp	r3, #8
 8006470:	d827      	bhi.n	80064c2 <UART_SetConfig+0x402>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <UART_SetConfig+0x3b8>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	0800649d 	.word	0x0800649d
 800647c:	080064a5 	.word	0x080064a5
 8006480:	080064ad 	.word	0x080064ad
 8006484:	080064c3 	.word	0x080064c3
 8006488:	080064b3 	.word	0x080064b3
 800648c:	080064c3 	.word	0x080064c3
 8006490:	080064c3 	.word	0x080064c3
 8006494:	080064c3 	.word	0x080064c3
 8006498:	080064bb 	.word	0x080064bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800649c:	f7fd fec6 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 80064a0:	6178      	str	r0, [r7, #20]
        break;
 80064a2:	e013      	b.n	80064cc <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a4:	f7fd fed8 	bl	8004258 <HAL_RCC_GetPCLK2Freq>
 80064a8:	6178      	str	r0, [r7, #20]
        break;
 80064aa:	e00f      	b.n	80064cc <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064ac:	4b57      	ldr	r3, [pc, #348]	; (800660c <UART_SetConfig+0x54c>)
 80064ae:	617b      	str	r3, [r7, #20]
        break;
 80064b0:	e00c      	b.n	80064cc <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064b2:	f7fd fe4d 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 80064b6:	6178      	str	r0, [r7, #20]
        break;
 80064b8:	e008      	b.n	80064cc <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064be:	617b      	str	r3, [r7, #20]
        break;
 80064c0:	e004      	b.n	80064cc <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	76bb      	strb	r3, [r7, #26]
        break;
 80064ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 8086 	beq.w	80065e0 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	4a4b      	ldr	r2, [pc, #300]	; (8006608 <UART_SetConfig+0x548>)
 80064da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064de:	461a      	mov	r2, r3
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e6:	005a      	lsls	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	085b      	lsrs	r3, r3, #1
 80064ee:	441a      	add	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b0f      	cmp	r3, #15
 8006500:	d916      	bls.n	8006530 <UART_SetConfig+0x470>
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006508:	d212      	bcs.n	8006530 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f023 030f 	bic.w	r3, r3, #15
 8006512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	b29b      	uxth	r3, r3
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	b29a      	uxth	r2, r3
 8006520:	89fb      	ldrh	r3, [r7, #14]
 8006522:	4313      	orrs	r3, r2
 8006524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	89fa      	ldrh	r2, [r7, #14]
 800652c:	60da      	str	r2, [r3, #12]
 800652e:	e057      	b.n	80065e0 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	76bb      	strb	r3, [r7, #26]
 8006534:	e054      	b.n	80065e0 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006536:	7efb      	ldrb	r3, [r7, #27]
 8006538:	2b08      	cmp	r3, #8
 800653a:	d828      	bhi.n	800658e <UART_SetConfig+0x4ce>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0x484>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	08006569 	.word	0x08006569
 8006548:	08006571 	.word	0x08006571
 800654c:	08006579 	.word	0x08006579
 8006550:	0800658f 	.word	0x0800658f
 8006554:	0800657f 	.word	0x0800657f
 8006558:	0800658f 	.word	0x0800658f
 800655c:	0800658f 	.word	0x0800658f
 8006560:	0800658f 	.word	0x0800658f
 8006564:	08006587 	.word	0x08006587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006568:	f7fd fe60 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 800656c:	6178      	str	r0, [r7, #20]
        break;
 800656e:	e013      	b.n	8006598 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006570:	f7fd fe72 	bl	8004258 <HAL_RCC_GetPCLK2Freq>
 8006574:	6178      	str	r0, [r7, #20]
        break;
 8006576:	e00f      	b.n	8006598 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006578:	4b24      	ldr	r3, [pc, #144]	; (800660c <UART_SetConfig+0x54c>)
 800657a:	617b      	str	r3, [r7, #20]
        break;
 800657c:	e00c      	b.n	8006598 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800657e:	f7fd fde7 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8006582:	6178      	str	r0, [r7, #20]
        break;
 8006584:	e008      	b.n	8006598 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658a:	617b      	str	r3, [r7, #20]
        break;
 800658c:	e004      	b.n	8006598 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	76bb      	strb	r3, [r7, #26]
        break;
 8006596:	bf00      	nop
    }

    if (pclk != 0U)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d020      	beq.n	80065e0 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	4a19      	ldr	r2, [pc, #100]	; (8006608 <UART_SetConfig+0x548>)
 80065a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065a8:	461a      	mov	r2, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	441a      	add	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d908      	bls.n	80065dc <UART_SetConfig+0x51c>
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	d204      	bcs.n	80065dc <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	e001      	b.n	80065e0 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80065fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006608:	08007284 	.word	0x08007284
 800660c:	00f42400 	.word	0x00f42400

08006610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00a      	beq.n	800667e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01a      	beq.n	8006726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800670e:	d10a      	bne.n	8006726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	605a      	str	r2, [r3, #4]
  }
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af02      	add	r7, sp, #8
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006764:	f7fa fe82 	bl	800146c <HAL_GetTick>
 8006768:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b08      	cmp	r3, #8
 8006776:	d10e      	bne.n	8006796 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006778:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f82c 	bl	80067e4 <UART_WaitOnFlagUntilTimeout>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e022      	b.n	80067dc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d10e      	bne.n	80067c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f816 	bl	80067e4 <UART_WaitOnFlagUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e00c      	b.n	80067dc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	4613      	mov	r3, r2
 80067f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f4:	e062      	b.n	80068bc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fc:	d05e      	beq.n	80068bc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fe:	f7fa fe35 	bl	800146c <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <UART_WaitOnFlagUntilTimeout+0x30>
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d11d      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006822:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e045      	b.n	80068dc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d02e      	beq.n	80068bc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686c:	d126      	bne.n	80068bc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006876:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006886:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e00f      	b.n	80068dc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69da      	ldr	r2, [r3, #28]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4013      	ands	r3, r2
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	bf0c      	ite	eq
 80068cc:	2301      	moveq	r3, #1
 80068ce:	2300      	movne	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d08d      	beq.n	80067f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800690a:	f023 0301 	bic.w	r3, r3, #1
 800690e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f7ff fbaf 	bl	80060ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800696c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2220      	movs	r2, #32
 8006972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff fb8b 	bl	8006098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_UARTEx_DisableFifoMode+0x16>
 80069d8:	2302      	movs	r3, #2
 80069da:	e027      	b.n	8006a2c <HAL_UARTEx_DisableFifoMode+0x66>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2224      	movs	r2, #36	; 0x24
 80069e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e02d      	b.n	8006aac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2224      	movs	r2, #36	; 0x24
 8006a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f84f 	bl	8006b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e02d      	b.n	8006b28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2224      	movs	r2, #36	; 0x24
 8006ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0201 	bic.w	r2, r2, #1
 8006af2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f811 	bl	8006b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b089      	sub	sp, #36	; 0x24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006b38:	4a2f      	ldr	r2, [pc, #188]	; (8006bf8 <UARTEx_SetNbDataToProcess+0xc8>)
 8006b3a:	f107 0314 	add.w	r3, r7, #20
 8006b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b42:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006b46:	4a2d      	ldr	r2, [pc, #180]	; (8006bfc <UARTEx_SetNbDataToProcess+0xcc>)
 8006b48:	f107 030c 	add.w	r3, r7, #12
 8006b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b50:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d108      	bne.n	8006b6e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b6c:	e03d      	b.n	8006bea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b6e:	2308      	movs	r3, #8
 8006b70:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b72:	2308      	movs	r3, #8
 8006b74:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	0e5b      	lsrs	r3, r3, #25
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	0f5b      	lsrs	r3, r3, #29
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b96:	7fbb      	ldrb	r3, [r7, #30]
 8006b98:	7f3a      	ldrb	r2, [r7, #28]
 8006b9a:	f107 0120 	add.w	r1, r7, #32
 8006b9e:	440a      	add	r2, r1
 8006ba0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006ba4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ba8:	7f3a      	ldrb	r2, [r7, #28]
 8006baa:	f107 0120 	add.w	r1, r7, #32
 8006bae:	440a      	add	r2, r1
 8006bb0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bc0:	7ffb      	ldrb	r3, [r7, #31]
 8006bc2:	7f7a      	ldrb	r2, [r7, #29]
 8006bc4:	f107 0120 	add.w	r1, r7, #32
 8006bc8:	440a      	add	r2, r1
 8006bca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bd2:	7f7a      	ldrb	r2, [r7, #29]
 8006bd4:	f107 0120 	add.w	r1, r7, #32
 8006bd8:	440a      	add	r2, r1
 8006bda:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bde:	fb93 f3f2 	sdiv	r3, r3, r2
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006bea:	bf00      	nop
 8006bec:	3724      	adds	r7, #36	; 0x24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	0800725c 	.word	0x0800725c
 8006bfc:	08007264 	.word	0x08007264

08006c00 <delay>:
#include "stdlib.h"
#include "oledfont.h"  	 

u8 OLED_GRAM[144][8];
void delay(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
	u8 t=3;
 8006c06:	2303      	movs	r3, #3
 8006c08:	71fb      	strb	r3, [r7, #7]
	while(t--);
 8006c0a:	bf00      	nop
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	1e5a      	subs	r2, r3, #1
 8006c10:	71fa      	strb	r2, [r7, #7]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1fa      	bne.n	8006c0c <delay+0xc>
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <OLED_WR_Byte>:
			OLED_WR_Byte(0xA0,OLED_CMD);
		}
}

void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	460a      	mov	r2, r1
 8006c2e:	71fb      	strb	r3, [r7, #7]
 8006c30:	4613      	mov	r3, r2
 8006c32:	71bb      	strb	r3, [r7, #6]
	u8 i;			  
	if(cmd)
 8006c34:	79bb      	ldrb	r3, [r7, #6]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d006      	beq.n	8006c48 <OLED_WR_Byte+0x24>
	  OLED_DC_Set();
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c40:	4821      	ldr	r0, [pc, #132]	; (8006cc8 <OLED_WR_Byte+0xa4>)
 8006c42:	f7fc fd4b 	bl	80036dc <HAL_GPIO_WritePin>
 8006c46:	e005      	b.n	8006c54 <OLED_WR_Byte+0x30>
	else
	  OLED_DC_Clr();
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c4e:	481e      	ldr	r0, [pc, #120]	; (8006cc8 <OLED_WR_Byte+0xa4>)
 8006c50:	f7fc fd44 	bl	80036dc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]
 8006c58:	e028      	b.n	8006cac <OLED_WR_Byte+0x88>
	{
		OLED_SCL_Clr();
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c60:	4819      	ldr	r0, [pc, #100]	; (8006cc8 <OLED_WR_Byte+0xa4>)
 8006c62:	f7fc fd3b 	bl	80036dc <HAL_GPIO_WritePin>
		
		delay();
 8006c66:	f7ff ffcb 	bl	8006c00 <delay>
		if(dat&0x80)
 8006c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da06      	bge.n	8006c80 <OLED_WR_Byte+0x5c>
		   OLED_SDA_Set();
 8006c72:	2201      	movs	r2, #1
 8006c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c78:	4813      	ldr	r0, [pc, #76]	; (8006cc8 <OLED_WR_Byte+0xa4>)
 8006c7a:	f7fc fd2f 	bl	80036dc <HAL_GPIO_WritePin>
 8006c7e:	e005      	b.n	8006c8c <OLED_WR_Byte+0x68>
		else 
		   OLED_SDA_Clr();
 8006c80:	2200      	movs	r2, #0
 8006c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c86:	4810      	ldr	r0, [pc, #64]	; (8006cc8 <OLED_WR_Byte+0xa4>)
 8006c88:	f7fc fd28 	bl	80036dc <HAL_GPIO_WritePin>
		delay();
 8006c8c:	f7ff ffb8 	bl	8006c00 <delay>
		OLED_SCL_Set();
 8006c90:	2201      	movs	r2, #1
 8006c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c96:	480c      	ldr	r0, [pc, #48]	; (8006cc8 <OLED_WR_Byte+0xa4>)
 8006c98:	f7fc fd20 	bl	80036dc <HAL_GPIO_WritePin>
		delay();
 8006c9c:	f7ff ffb0 	bl	8006c00 <delay>
		dat<<=1;   
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	73fb      	strb	r3, [r7, #15]
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	2b07      	cmp	r3, #7
 8006cb0:	d9d3      	bls.n	8006c5a <OLED_WR_Byte+0x36>
	}				 		  
	OLED_DC_Set();   	  
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cb8:	4803      	ldr	r0, [pc, #12]	; (8006cc8 <OLED_WR_Byte+0xa4>)
 8006cba:	f7fc fd0f 	bl	80036dc <HAL_GPIO_WritePin>
}
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	48000400 	.word	0x48000400

08006ccc <OLED_Refresh>:
	OLED_WR_Byte(0xAE,OLED_CMD);//�ر���Ļ
}

//�����Դ浽OLED	
void OLED_Refresh(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<8;i++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	71fb      	strb	r3, [r7, #7]
 8006cd6:	e026      	b.n	8006d26 <OLED_Refresh+0x5a>
	{
	   OLED_WR_Byte(0xb0+i,OLED_CMD); //��������ʼ��ַ
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	3b50      	subs	r3, #80	; 0x50
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff ff9f 	bl	8006c24 <OLED_WR_Byte>
	   OLED_WR_Byte(0x02,OLED_CMD);   //���õ�����ʼ��ַ
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	2002      	movs	r0, #2
 8006cea:	f7ff ff9b 	bl	8006c24 <OLED_WR_Byte>
	   OLED_WR_Byte(0x10,OLED_CMD);   //���ø�����ʼ��ַ
 8006cee:	2100      	movs	r1, #0
 8006cf0:	2010      	movs	r0, #16
 8006cf2:	f7ff ff97 	bl	8006c24 <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	71bb      	strb	r3, [r7, #6]
 8006cfa:	e00d      	b.n	8006d18 <OLED_Refresh+0x4c>
		 OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8006cfc:	79ba      	ldrb	r2, [r7, #6]
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	490c      	ldr	r1, [pc, #48]	; (8006d34 <OLED_Refresh+0x68>)
 8006d02:	00d2      	lsls	r2, r2, #3
 8006d04:	440a      	add	r2, r1
 8006d06:	4413      	add	r3, r2
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff ff89 	bl	8006c24 <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 8006d12:	79bb      	ldrb	r3, [r7, #6]
 8006d14:	3301      	adds	r3, #1
 8006d16:	71bb      	strb	r3, [r7, #6]
 8006d18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	daed      	bge.n	8006cfc <OLED_Refresh+0x30>
	for(i=0;i<8;i++)
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	3301      	adds	r3, #1
 8006d24:	71fb      	strb	r3, [r7, #7]
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	2b07      	cmp	r3, #7
 8006d2a:	d9d5      	bls.n	8006cd8 <OLED_Refresh+0xc>
  }
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	200002dc 	.word	0x200002dc

08006d38 <OLED_Clear>:
//��������
void OLED_Clear(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<8;i++)
 8006d3e:	2300      	movs	r3, #0
 8006d40:	71fb      	strb	r3, [r7, #7]
 8006d42:	e014      	b.n	8006d6e <OLED_Clear+0x36>
	{
	   for(n=0;n<128;n++)
 8006d44:	2300      	movs	r3, #0
 8006d46:	71bb      	strb	r3, [r7, #6]
 8006d48:	e00a      	b.n	8006d60 <OLED_Clear+0x28>
			{
			 OLED_GRAM[n][i]=0;//�����������
 8006d4a:	79ba      	ldrb	r2, [r7, #6]
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	490c      	ldr	r1, [pc, #48]	; (8006d80 <OLED_Clear+0x48>)
 8006d50:	00d2      	lsls	r2, r2, #3
 8006d52:	440a      	add	r2, r1
 8006d54:	4413      	add	r3, r2
 8006d56:	2200      	movs	r2, #0
 8006d58:	701a      	strb	r2, [r3, #0]
	   for(n=0;n<128;n++)
 8006d5a:	79bb      	ldrb	r3, [r7, #6]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	71bb      	strb	r3, [r7, #6]
 8006d60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	daf0      	bge.n	8006d4a <OLED_Clear+0x12>
	for(i=0;i<8;i++)
 8006d68:	79fb      	ldrb	r3, [r7, #7]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	71fb      	strb	r3, [r7, #7]
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	2b07      	cmp	r3, #7
 8006d72:	d9e7      	bls.n	8006d44 <OLED_Clear+0xc>
			}
  }
	OLED_Refresh();//������ʾ
 8006d74:	f7ff ffaa 	bl	8006ccc <OLED_Refresh>
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	200002dc 	.word	0x200002dc

08006d84 <OLED_DrawPoint>:
//���� 
//x:0~127
//y:0~63
//t:1 ��� 0,���	
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	71fb      	strb	r3, [r7, #7]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	71bb      	strb	r3, [r7, #6]
 8006d92:	4613      	mov	r3, r2
 8006d94:	717b      	strb	r3, [r7, #5]
	u8 i,m,n;
	i=y/8;
 8006d96:	79bb      	ldrb	r3, [r7, #6]
 8006d98:	08db      	lsrs	r3, r3, #3
 8006d9a:	73fb      	strb	r3, [r7, #15]
	m=y%8;
 8006d9c:	79bb      	ldrb	r3, [r7, #6]
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	73bb      	strb	r3, [r7, #14]
	n=1<<m;
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	2201      	movs	r2, #1
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	737b      	strb	r3, [r7, #13]
	if(t){OLED_GRAM[x][i]|=n;}
 8006dae:	797b      	ldrb	r3, [r7, #5]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d012      	beq.n	8006dda <OLED_DrawPoint+0x56>
 8006db4:	79fa      	ldrb	r2, [r7, #7]
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	4925      	ldr	r1, [pc, #148]	; (8006e50 <OLED_DrawPoint+0xcc>)
 8006dba:	00d2      	lsls	r2, r2, #3
 8006dbc:	440a      	add	r2, r1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	7818      	ldrb	r0, [r3, #0]
 8006dc2:	79fa      	ldrb	r2, [r7, #7]
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	7b79      	ldrb	r1, [r7, #13]
 8006dc8:	4301      	orrs	r1, r0
 8006dca:	b2c8      	uxtb	r0, r1
 8006dcc:	4920      	ldr	r1, [pc, #128]	; (8006e50 <OLED_DrawPoint+0xcc>)
 8006dce:	00d2      	lsls	r2, r2, #3
 8006dd0:	440a      	add	r2, r1
 8006dd2:	4413      	add	r3, r2
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	701a      	strb	r2, [r3, #0]
	{
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
		OLED_GRAM[x][i]|=n;
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
	}
}
 8006dd8:	e033      	b.n	8006e42 <OLED_DrawPoint+0xbe>
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8006dda:	79fa      	ldrb	r2, [r7, #7]
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	491c      	ldr	r1, [pc, #112]	; (8006e50 <OLED_DrawPoint+0xcc>)
 8006de0:	00d2      	lsls	r2, r2, #3
 8006de2:	440a      	add	r2, r1
 8006de4:	4413      	add	r3, r2
 8006de6:	7819      	ldrb	r1, [r3, #0]
 8006de8:	79fa      	ldrb	r2, [r7, #7]
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	43c9      	mvns	r1, r1
 8006dee:	b2c8      	uxtb	r0, r1
 8006df0:	4917      	ldr	r1, [pc, #92]	; (8006e50 <OLED_DrawPoint+0xcc>)
 8006df2:	00d2      	lsls	r2, r2, #3
 8006df4:	440a      	add	r2, r1
 8006df6:	4413      	add	r3, r2
 8006df8:	4602      	mov	r2, r0
 8006dfa:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i]|=n;
 8006dfc:	79fa      	ldrb	r2, [r7, #7]
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	4913      	ldr	r1, [pc, #76]	; (8006e50 <OLED_DrawPoint+0xcc>)
 8006e02:	00d2      	lsls	r2, r2, #3
 8006e04:	440a      	add	r2, r1
 8006e06:	4413      	add	r3, r2
 8006e08:	7818      	ldrb	r0, [r3, #0]
 8006e0a:	79fa      	ldrb	r2, [r7, #7]
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	7b79      	ldrb	r1, [r7, #13]
 8006e10:	4301      	orrs	r1, r0
 8006e12:	b2c8      	uxtb	r0, r1
 8006e14:	490e      	ldr	r1, [pc, #56]	; (8006e50 <OLED_DrawPoint+0xcc>)
 8006e16:	00d2      	lsls	r2, r2, #3
 8006e18:	440a      	add	r2, r1
 8006e1a:	4413      	add	r3, r2
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8006e20:	79fa      	ldrb	r2, [r7, #7]
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	490a      	ldr	r1, [pc, #40]	; (8006e50 <OLED_DrawPoint+0xcc>)
 8006e26:	00d2      	lsls	r2, r2, #3
 8006e28:	440a      	add	r2, r1
 8006e2a:	4413      	add	r3, r2
 8006e2c:	7819      	ldrb	r1, [r3, #0]
 8006e2e:	79fa      	ldrb	r2, [r7, #7]
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	43c9      	mvns	r1, r1
 8006e34:	b2c8      	uxtb	r0, r1
 8006e36:	4906      	ldr	r1, [pc, #24]	; (8006e50 <OLED_DrawPoint+0xcc>)
 8006e38:	00d2      	lsls	r2, r2, #3
 8006e3a:	440a      	add	r2, r1
 8006e3c:	4413      	add	r3, r2
 8006e3e:	4602      	mov	r2, r0
 8006e40:	701a      	strb	r2, [r3, #0]
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	200002dc 	.word	0x200002dc

08006e54 <OLED_ShowChar>:
//x:0~127
//y:0~63
//size1:ѡ������ 6x8/6x12/8x16/12x24
//mode:0,��ɫ��ʾ;1,������ʾ
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size1,u8 mode)
{
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	4611      	mov	r1, r2
 8006e60:	461a      	mov	r2, r3
 8006e62:	4623      	mov	r3, r4
 8006e64:	71fb      	strb	r3, [r7, #7]
 8006e66:	4603      	mov	r3, r0
 8006e68:	71bb      	strb	r3, [r7, #6]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	717b      	strb	r3, [r7, #5]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	713b      	strb	r3, [r7, #4]
	u8 i,m,temp,size2,chr1;
	u8 x0=x,y0=y;
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	72bb      	strb	r3, [r7, #10]
 8006e76:	79bb      	ldrb	r3, [r7, #6]
 8006e78:	72fb      	strb	r3, [r7, #11]
	if(size1==8)size2=6;
 8006e7a:	793b      	ldrb	r3, [r7, #4]
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d102      	bne.n	8006e86 <OLED_ShowChar+0x32>
 8006e80:	2306      	movs	r3, #6
 8006e82:	733b      	strb	r3, [r7, #12]
 8006e84:	e014      	b.n	8006eb0 <OLED_ShowChar+0x5c>
	else size2=(size1/8+((size1%8)?1:0))*(size1/2);  //�õ�����һ���ַ���Ӧ������ռ���ֽ���
 8006e86:	793b      	ldrb	r3, [r7, #4]
 8006e88:	08db      	lsrs	r3, r3, #3
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	793b      	ldrb	r3, [r7, #4]
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bf14      	ite	ne
 8006e9a:	2301      	movne	r3, #1
 8006e9c:	2300      	moveq	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	793b      	ldrb	r3, [r7, #4]
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	fb12 f303 	smulbb	r3, r2, r3
 8006eae:	733b      	strb	r3, [r7, #12]
	chr1=chr-' ';  //����ƫ�ƺ��ֵ
 8006eb0:	797b      	ldrb	r3, [r7, #5]
 8006eb2:	3b20      	subs	r3, #32
 8006eb4:	727b      	strb	r3, [r7, #9]
	for(i=0;i<size2;i++)
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
 8006eba:	e078      	b.n	8006fae <OLED_ShowChar+0x15a>
	{
		if(size1==8)
 8006ebc:	793b      	ldrb	r3, [r7, #4]
 8006ebe:	2b08      	cmp	r3, #8
 8006ec0:	d10b      	bne.n	8006eda <OLED_ShowChar+0x86>
			  {temp=asc2_0806[chr1][i];} //����0806����
 8006ec2:	7a7a      	ldrb	r2, [r7, #9]
 8006ec4:	7bf9      	ldrb	r1, [r7, #15]
 8006ec6:	483e      	ldr	r0, [pc, #248]	; (8006fc0 <OLED_ShowChar+0x16c>)
 8006ec8:	4613      	mov	r3, r2
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	4413      	add	r3, r2
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	4403      	add	r3, r0
 8006ed2:	440b      	add	r3, r1
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	737b      	strb	r3, [r7, #13]
 8006ed8:	e028      	b.n	8006f2c <OLED_ShowChar+0xd8>
		else if(size1==12)
 8006eda:	793b      	ldrb	r3, [r7, #4]
 8006edc:	2b0c      	cmp	r3, #12
 8006ede:	d10b      	bne.n	8006ef8 <OLED_ShowChar+0xa4>
        {temp=asc2_1206[chr1][i];} //����1206����
 8006ee0:	7a7a      	ldrb	r2, [r7, #9]
 8006ee2:	7bf9      	ldrb	r1, [r7, #15]
 8006ee4:	4837      	ldr	r0, [pc, #220]	; (8006fc4 <OLED_ShowChar+0x170>)
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4403      	add	r3, r0
 8006ef0:	440b      	add	r3, r1
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	737b      	strb	r3, [r7, #13]
 8006ef6:	e019      	b.n	8006f2c <OLED_ShowChar+0xd8>
		else if(size1==16)
 8006ef8:	793b      	ldrb	r3, [r7, #4]
 8006efa:	2b10      	cmp	r3, #16
 8006efc:	d108      	bne.n	8006f10 <OLED_ShowChar+0xbc>
        {temp=asc2_1608[chr1][i];} //����1608����
 8006efe:	7a7a      	ldrb	r2, [r7, #9]
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	4931      	ldr	r1, [pc, #196]	; (8006fc8 <OLED_ShowChar+0x174>)
 8006f04:	0112      	lsls	r2, r2, #4
 8006f06:	440a      	add	r2, r1
 8006f08:	4413      	add	r3, r2
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	737b      	strb	r3, [r7, #13]
 8006f0e:	e00d      	b.n	8006f2c <OLED_ShowChar+0xd8>
		else if(size1==24)
 8006f10:	793b      	ldrb	r3, [r7, #4]
 8006f12:	2b18      	cmp	r3, #24
 8006f14:	d150      	bne.n	8006fb8 <OLED_ShowChar+0x164>
        {temp=asc2_2412[chr1][i];} //����2412����
 8006f16:	7a7a      	ldrb	r2, [r7, #9]
 8006f18:	7bf9      	ldrb	r1, [r7, #15]
 8006f1a:	482c      	ldr	r0, [pc, #176]	; (8006fcc <OLED_ShowChar+0x178>)
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4403      	add	r3, r0
 8006f26:	440b      	add	r3, r1
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	737b      	strb	r3, [r7, #13]
		else return;
		for(m=0;m<8;m++)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73bb      	strb	r3, [r7, #14]
 8006f30:	e022      	b.n	8006f78 <OLED_ShowChar+0x124>
		{
			if(temp&0x01)OLED_DrawPoint(x,y,mode);
 8006f32:	7b7b      	ldrb	r3, [r7, #13]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <OLED_ShowChar+0xf8>
 8006f3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006f40:	79b9      	ldrb	r1, [r7, #6]
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff ff1d 	bl	8006d84 <OLED_DrawPoint>
 8006f4a:	e00c      	b.n	8006f66 <OLED_ShowChar+0x112>
			else OLED_DrawPoint(x,y,!mode);
 8006f4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	79b9      	ldrb	r1, [r7, #6]
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff ff0f 	bl	8006d84 <OLED_DrawPoint>
			temp>>=1;
 8006f66:	7b7b      	ldrb	r3, [r7, #13]
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	737b      	strb	r3, [r7, #13]
			y++;
 8006f6c:	79bb      	ldrb	r3, [r7, #6]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	71bb      	strb	r3, [r7, #6]
		for(m=0;m<8;m++)
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	3301      	adds	r3, #1
 8006f76:	73bb      	strb	r3, [r7, #14]
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b07      	cmp	r3, #7
 8006f7c:	d9d9      	bls.n	8006f32 <OLED_ShowChar+0xde>
		}
		x++;
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	3301      	adds	r3, #1
 8006f82:	71fb      	strb	r3, [r7, #7]
		if((size1!=8)&&((x-x0)==size1/2))
 8006f84:	793b      	ldrb	r3, [r7, #4]
 8006f86:	2b08      	cmp	r3, #8
 8006f88:	d00c      	beq.n	8006fa4 <OLED_ShowChar+0x150>
 8006f8a:	79fa      	ldrb	r2, [r7, #7]
 8006f8c:	7abb      	ldrb	r3, [r7, #10]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	793a      	ldrb	r2, [r7, #4]
 8006f92:	0852      	lsrs	r2, r2, #1
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d104      	bne.n	8006fa4 <OLED_ShowChar+0x150>
		{x=x0;y0=y0+8;}
 8006f9a:	7abb      	ldrb	r3, [r7, #10]
 8006f9c:	71fb      	strb	r3, [r7, #7]
 8006f9e:	7afb      	ldrb	r3, [r7, #11]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	72fb      	strb	r3, [r7, #11]
		y=y0;
 8006fa4:	7afb      	ldrb	r3, [r7, #11]
 8006fa6:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<size2;i++)
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	3301      	adds	r3, #1
 8006fac:	73fb      	strb	r3, [r7, #15]
 8006fae:	7bfa      	ldrb	r2, [r7, #15]
 8006fb0:	7b3b      	ldrb	r3, [r7, #12]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d382      	bcc.n	8006ebc <OLED_ShowChar+0x68>
 8006fb6:	e000      	b.n	8006fba <OLED_ShowChar+0x166>
		else return;
 8006fb8:	bf00      	nop
  }
}
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd90      	pop	{r4, r7, pc}
 8006fc0:	0800729c 	.word	0x0800729c
 8006fc4:	080074c4 	.word	0x080074c4
 8006fc8:	08007938 	.word	0x08007938
 8006fcc:	08007f28 	.word	0x08007f28

08006fd0 <OLED_Pow>:
  }
}

//m^n
u32 OLED_Pow(u8 m,u8 n)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	460a      	mov	r2, r1
 8006fda:	71fb      	strb	r3, [r7, #7]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	71bb      	strb	r3, [r7, #6]
	u32 result=1;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
	while(n--)
 8006fe4:	e004      	b.n	8006ff0 <OLED_Pow+0x20>
	{
	  result*=m;
 8006fe6:	79fa      	ldrb	r2, [r7, #7]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	60fb      	str	r3, [r7, #12]
	while(n--)
 8006ff0:	79bb      	ldrb	r3, [r7, #6]
 8006ff2:	1e5a      	subs	r2, r3, #1
 8006ff4:	71ba      	strb	r2, [r7, #6]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f5      	bne.n	8006fe6 <OLED_Pow+0x16>
	}
	return result;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <OLED_ShowNum>:
//num :Ҫ��ʾ������
//len :���ֵ�λ��
//size:�����С
//mode:0,��ɫ��ʾ;1,������ʾ
void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 size1,u8 mode)
{
 8007008:	b590      	push	{r4, r7, lr}
 800700a:	b087      	sub	sp, #28
 800700c:	af02      	add	r7, sp, #8
 800700e:	603a      	str	r2, [r7, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
 8007016:	460b      	mov	r3, r1
 8007018:	71bb      	strb	r3, [r7, #6]
 800701a:	4613      	mov	r3, r2
 800701c:	717b      	strb	r3, [r7, #5]
	u8 t,temp,m=0;
 800701e:	2300      	movs	r3, #0
 8007020:	73bb      	strb	r3, [r7, #14]
	if(size1==8)m=2;
 8007022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007026:	2b08      	cmp	r3, #8
 8007028:	d101      	bne.n	800702e <OLED_ShowNum+0x26>
 800702a:	2302      	movs	r3, #2
 800702c:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
 8007032:	e051      	b.n	80070d8 <OLED_ShowNum+0xd0>
	{
		temp=(num/OLED_Pow(10,len-t-1))%10;
 8007034:	797a      	ldrb	r2, [r7, #5]
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	b2db      	uxtb	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b2db      	uxtb	r3, r3
 8007040:	4619      	mov	r1, r3
 8007042:	200a      	movs	r0, #10
 8007044:	f7ff ffc4 	bl	8006fd0 <OLED_Pow>
 8007048:	4602      	mov	r2, r0
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007050:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <OLED_ShowNum+0xe0>)
 8007052:	fba3 2301 	umull	r2, r3, r3, r1
 8007056:	08da      	lsrs	r2, r3, #3
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	1aca      	subs	r2, r1, r3
 8007062:	4613      	mov	r3, r2
 8007064:	737b      	strb	r3, [r7, #13]
			if(temp==0)
 8007066:	7b7b      	ldrb	r3, [r7, #13]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d118      	bne.n	800709e <OLED_ShowNum+0x96>
			{
				OLED_ShowChar(x+(size1/2+m)*t,y,'0',size1,mode);
 800706c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	b2da      	uxtb	r2, r3
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	4413      	add	r3, r2
 8007078:	b2db      	uxtb	r3, r3
 800707a:	7bfa      	ldrb	r2, [r7, #15]
 800707c:	fb12 f303 	smulbb	r3, r2, r3
 8007080:	b2da      	uxtb	r2, r3
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	4413      	add	r3, r2
 8007086:	b2d8      	uxtb	r0, r3
 8007088:	f897 2020 	ldrb.w	r2, [r7, #32]
 800708c:	79b9      	ldrb	r1, [r7, #6]
 800708e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	4613      	mov	r3, r2
 8007096:	2230      	movs	r2, #48	; 0x30
 8007098:	f7ff fedc 	bl	8006e54 <OLED_ShowChar>
 800709c:	e019      	b.n	80070d2 <OLED_ShowNum+0xca>
      }
			else 
			{
			  OLED_ShowChar(x+(size1/2+m)*t,y,temp+'0',size1,mode);
 800709e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	4413      	add	r3, r2
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	7bfa      	ldrb	r2, [r7, #15]
 80070ae:	fb12 f303 	smulbb	r3, r2, r3
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	4413      	add	r3, r2
 80070b8:	b2d8      	uxtb	r0, r3
 80070ba:	7b7b      	ldrb	r3, [r7, #13]
 80070bc:	3330      	adds	r3, #48	; 0x30
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	f897 4020 	ldrb.w	r4, [r7, #32]
 80070c4:	79b9      	ldrb	r1, [r7, #6]
 80070c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4623      	mov	r3, r4
 80070ce:	f7ff fec1 	bl	8006e54 <OLED_ShowChar>
	for(t=0;t<len;t++)
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	3301      	adds	r3, #1
 80070d6:	73fb      	strb	r3, [r7, #15]
 80070d8:	7bfa      	ldrb	r2, [r7, #15]
 80070da:	797b      	ldrb	r3, [r7, #5]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d3a9      	bcc.n	8007034 <OLED_ShowNum+0x2c>
			}
  }
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd90      	pop	{r4, r7, pc}
 80070e8:	cccccccd 	.word	0xcccccccd

080070ec <OLED_Init>:
     }
	 }
}
//OLED�ĳ�ʼ��
void OLED_Init(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
	OLED_RES_Clr();
 80070f0:	2200      	movs	r2, #0
 80070f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070f6:	483c      	ldr	r0, [pc, #240]	; (80071e8 <OLED_Init+0xfc>)
 80070f8:	f7fc faf0 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80070fc:	20c8      	movs	r0, #200	; 0xc8
 80070fe:	f7fa f9c1 	bl	8001484 <HAL_Delay>
	OLED_RES_Set();
 8007102:	2201      	movs	r2, #1
 8007104:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007108:	4837      	ldr	r0, [pc, #220]	; (80071e8 <OLED_Init+0xfc>)
 800710a:	f7fc fae7 	bl	80036dc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); /*display off*/ 
 800710e:	2100      	movs	r1, #0
 8007110:	20ae      	movs	r0, #174	; 0xae
 8007112:	f7ff fd87 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); /*set lower column address*/ 
 8007116:	2100      	movs	r1, #0
 8007118:	2002      	movs	r0, #2
 800711a:	f7ff fd83 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD); /*set higher column address*/ 
 800711e:	2100      	movs	r1, #0
 8007120:	2010      	movs	r0, #16
 8007122:	f7ff fd7f 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD); /*set display start line*/ 
 8007126:	2100      	movs	r1, #0
 8007128:	2040      	movs	r0, #64	; 0x40
 800712a:	f7ff fd7b 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD); /*set page address*/
 800712e:	2100      	movs	r1, #0
 8007130:	20b0      	movs	r0, #176	; 0xb0
 8007132:	f7ff fd77 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); /*contract control*/ 
 8007136:	2100      	movs	r1, #0
 8007138:	2081      	movs	r0, #129	; 0x81
 800713a:	f7ff fd73 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xcf,OLED_CMD); /*128*/ 
 800713e:	2100      	movs	r1, #0
 8007140:	20cf      	movs	r0, #207	; 0xcf
 8007142:	f7ff fd6f 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); /*set segment remap*/ 
 8007146:	2100      	movs	r1, #0
 8007148:	20a1      	movs	r0, #161	; 0xa1
 800714a:	f7ff fd6b 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); /*normal / reverse*/ 
 800714e:	2100      	movs	r1, #0
 8007150:	20a6      	movs	r0, #166	; 0xa6
 8007152:	f7ff fd67 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); /*multiplex ratio*/ 
 8007156:	2100      	movs	r1, #0
 8007158:	20a8      	movs	r0, #168	; 0xa8
 800715a:	f7ff fd63 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD); /*duty = 1/64*/ 
 800715e:	2100      	movs	r1, #0
 8007160:	203f      	movs	r0, #63	; 0x3f
 8007162:	f7ff fd5f 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xad,OLED_CMD); /*set charge pump enable*/ 
 8007166:	2100      	movs	r1, #0
 8007168:	20ad      	movs	r0, #173	; 0xad
 800716a:	f7ff fd5b 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x8b,OLED_CMD); /* 0x8B �ڹ� VCC */ 
 800716e:	2100      	movs	r1, #0
 8007170:	208b      	movs	r0, #139	; 0x8b
 8007172:	f7ff fd57 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x33,OLED_CMD); /*0X30---0X33 set VPP 9V */ 
 8007176:	2100      	movs	r1, #0
 8007178:	2033      	movs	r0, #51	; 0x33
 800717a:	f7ff fd53 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD); /*Com scan direction*/ 
 800717e:	2100      	movs	r1, #0
 8007180:	20c8      	movs	r0, #200	; 0xc8
 8007182:	f7ff fd4f 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); /*set display offset*/ 
 8007186:	2100      	movs	r1, #0
 8007188:	20d3      	movs	r0, #211	; 0xd3
 800718a:	f7ff fd4b 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD); /* 0x20 */ 
 800718e:	2100      	movs	r1, #0
 8007190:	2000      	movs	r0, #0
 8007192:	f7ff fd47 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); /*set osc division*/ 
 8007196:	2100      	movs	r1, #0
 8007198:	20d5      	movs	r0, #213	; 0xd5
 800719a:	f7ff fd43 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD); 
 800719e:	2100      	movs	r1, #0
 80071a0:	2080      	movs	r0, #128	; 0x80
 80071a2:	f7ff fd3f 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); /*set pre-charge period*/ 
 80071a6:	2100      	movs	r1, #0
 80071a8:	20d9      	movs	r0, #217	; 0xd9
 80071aa:	f7ff fd3b 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x1f,OLED_CMD); /*0x22*/ 
 80071ae:	2100      	movs	r1, #0
 80071b0:	201f      	movs	r0, #31
 80071b2:	f7ff fd37 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); /*set COM pins*/ 
 80071b6:	2100      	movs	r1, #0
 80071b8:	20da      	movs	r0, #218	; 0xda
 80071ba:	f7ff fd33 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); 
 80071be:	2100      	movs	r1, #0
 80071c0:	2012      	movs	r0, #18
 80071c2:	f7ff fd2f 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0xdb,OLED_CMD); /*set vcomh*/ 
 80071c6:	2100      	movs	r1, #0
 80071c8:	20db      	movs	r0, #219	; 0xdb
 80071ca:	f7ff fd2b 	bl	8006c24 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);
 80071ce:	2100      	movs	r1, #0
 80071d0:	2040      	movs	r0, #64	; 0x40
 80071d2:	f7ff fd27 	bl	8006c24 <OLED_WR_Byte>
	OLED_Clear();
 80071d6:	f7ff fdaf 	bl	8006d38 <OLED_Clear>
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/
 80071da:	2100      	movs	r1, #0
 80071dc:	20af      	movs	r0, #175	; 0xaf
 80071de:	f7ff fd21 	bl	8006c24 <OLED_WR_Byte>
}
 80071e2:	bf00      	nop
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	48000400 	.word	0x48000400

080071ec <__libc_init_array>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	4e0d      	ldr	r6, [pc, #52]	; (8007224 <__libc_init_array+0x38>)
 80071f0:	4c0d      	ldr	r4, [pc, #52]	; (8007228 <__libc_init_array+0x3c>)
 80071f2:	1ba4      	subs	r4, r4, r6
 80071f4:	10a4      	asrs	r4, r4, #2
 80071f6:	2500      	movs	r5, #0
 80071f8:	42a5      	cmp	r5, r4
 80071fa:	d109      	bne.n	8007210 <__libc_init_array+0x24>
 80071fc:	4e0b      	ldr	r6, [pc, #44]	; (800722c <__libc_init_array+0x40>)
 80071fe:	4c0c      	ldr	r4, [pc, #48]	; (8007230 <__libc_init_array+0x44>)
 8007200:	f000 f820 	bl	8007244 <_init>
 8007204:	1ba4      	subs	r4, r4, r6
 8007206:	10a4      	asrs	r4, r4, #2
 8007208:	2500      	movs	r5, #0
 800720a:	42a5      	cmp	r5, r4
 800720c:	d105      	bne.n	800721a <__libc_init_array+0x2e>
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007214:	4798      	blx	r3
 8007216:	3501      	adds	r5, #1
 8007218:	e7ee      	b.n	80071f8 <__libc_init_array+0xc>
 800721a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800721e:	4798      	blx	r3
 8007220:	3501      	adds	r5, #1
 8007222:	e7f2      	b.n	800720a <__libc_init_array+0x1e>
 8007224:	08008c8c 	.word	0x08008c8c
 8007228:	08008c8c 	.word	0x08008c8c
 800722c:	08008c8c 	.word	0x08008c8c
 8007230:	08008c90 	.word	0x08008c90

08007234 <memset>:
 8007234:	4402      	add	r2, r0
 8007236:	4603      	mov	r3, r0
 8007238:	4293      	cmp	r3, r2
 800723a:	d100      	bne.n	800723e <memset+0xa>
 800723c:	4770      	bx	lr
 800723e:	f803 1b01 	strb.w	r1, [r3], #1
 8007242:	e7f9      	b.n	8007238 <memset+0x4>

08007244 <_init>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	bf00      	nop
 8007248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724a:	bc08      	pop	{r3}
 800724c:	469e      	mov	lr, r3
 800724e:	4770      	bx	lr

08007250 <_fini>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	bf00      	nop
 8007254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007256:	bc08      	pop	{r3}
 8007258:	469e      	mov	lr, r3
 800725a:	4770      	bx	lr
