
TypeC-Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a650  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff8  0800a830  0800a830  0001a830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b828  0800b828  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b828  0800b828  0001b828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b830  0800b830  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b830  0800b830  0001b830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b834  0800b834  0001b834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  200001dc  0800ba14  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  0800ba14  00020944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea23  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037e6  00000000  00000000  0003ec2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  00042418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a0  00000000  00000000  00043970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005840  00000000  00000000  00044d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014b0a  00000000  00000000  0004a550  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de3e1  00000000  00000000  0005f05a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d43b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006838  00000000  00000000  0013d4b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a818 	.word	0x0800a818

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800a818 	.word	0x0800a818

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b972 	b.w	8000ef4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4688      	mov	r8, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14b      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4615      	mov	r5, r2
 8000c3a:	d967      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0720 	rsb	r7, r2, #32
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c4e:	4095      	lsls	r5, r2
 8000c50:	ea47 0803 	orr.w	r8, r7, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c60:	fa1f fc85 	uxth.w	ip, r5
 8000c64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18eb      	adds	r3, r5, r3
 8000c76:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7a:	f080 811b 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8118 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	442b      	add	r3, r5
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9c:	45a4      	cmp	ip, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	192c      	adds	r4, r5, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	442c      	add	r4, r5
 8000cb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cb8:	eba4 040c 	sub.w	r4, r4, ip
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	b11e      	cbz	r6, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0xbe>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80eb 	beq.w	8000eae <__udivmoddi4+0x286>
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e9c6 0100 	strd	r0, r1, [r6]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f783 	clz	r7, r3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d147      	bne.n	8000d7e <__udivmoddi4+0x156>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xd0>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80fa 	bhi.w	8000eec <__udivmoddi4+0x2c4>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4698      	mov	r8, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e0      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d06:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0a:	e7dd      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d0c:	b902      	cbnz	r2, 8000d10 <__udivmoddi4+0xe8>
 8000d0e:	deff      	udf	#255	; 0xff
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f040 808f 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d1a:	1b49      	subs	r1, r1, r5
 8000d1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d20:	fa1f f885 	uxth.w	r8, r5
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb08 f10c 	mul.w	r1, r8, ip
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3c:	18eb      	adds	r3, r5, r3
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4299      	cmp	r1, r3
 8000d46:	f200 80cd 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x14c>
 8000d64:	192c      	adds	r4, r5, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x14a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80b6 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e79f      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d9c:	4325      	orrs	r5, r4
 8000d9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da2:	0c2c      	lsrs	r4, r5, #16
 8000da4:	fb08 3319 	mls	r3, r8, r9, r3
 8000da8:	fa1f fa8e 	uxth.w	sl, lr
 8000dac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db0:	fb09 f40a 	mul.w	r4, r9, sl
 8000db4:	429c      	cmp	r4, r3
 8000db6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dba:	fa00 f107 	lsl.w	r1, r0, r7
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4473      	add	r3, lr
 8000dd8:	1b1b      	subs	r3, r3, r4
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000de8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dec:	45a2      	cmp	sl, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1e 0404 	adds.w	r4, lr, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a2      	cmp	sl, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4474      	add	r4, lr
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	eba4 040a 	sub.w	r4, r4, sl
 8000e0e:	454c      	cmp	r4, r9
 8000e10:	46c2      	mov	sl, r8
 8000e12:	464b      	mov	r3, r9
 8000e14:	d354      	bcc.n	8000ec0 <__udivmoddi4+0x298>
 8000e16:	d051      	beq.n	8000ebc <__udivmoddi4+0x294>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d069      	beq.n	8000ef0 <__udivmoddi4+0x2c8>
 8000e1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e20:	eb64 0403 	sbc.w	r4, r4, r3
 8000e24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e28:	40fd      	lsrs	r5, r7
 8000e2a:	40fc      	lsrs	r4, r7
 8000e2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e30:	e9c6 5400 	strd	r5, r4, [r6]
 8000e34:	2700      	movs	r7, #0
 8000e36:	e747      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e40:	4095      	lsls	r5, r2
 8000e42:	fa01 f002 	lsl.w	r0, r1, r2
 8000e46:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e4e:	4338      	orrs	r0, r7
 8000e50:	0c01      	lsrs	r1, r0, #16
 8000e52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e56:	fa1f f885 	uxth.w	r8, r5
 8000e5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb07 f308 	mul.w	r3, r7, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3f02      	subs	r7, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	b281      	uxth	r1, r0
 8000e82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8e:	fb00 f308 	mul.w	r3, r0, r8
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x27e>
 8000e96:	1869      	adds	r1, r5, r1
 8000e98:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e9c:	d217      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d915      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4429      	add	r1, r5
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eac:	e73b      	b.n	8000d26 <__udivmoddi4+0xfe>
 8000eae:	4637      	mov	r7, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e709      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	e6e7      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000ebc:	4541      	cmp	r1, r8
 8000ebe:	d2ab      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ec8:	3801      	subs	r0, #1
 8000eca:	4613      	mov	r3, r2
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4660      	mov	r0, ip
 8000ed0:	e7e9      	b.n	8000ea6 <__udivmoddi4+0x27e>
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4667      	mov	r7, ip
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	4681      	mov	r9, r0
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	442c      	add	r4, r5
 8000ee2:	e747      	b.n	8000d74 <__udivmoddi4+0x14c>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	442b      	add	r3, r5
 8000eea:	e72f      	b.n	8000d4c <__udivmoddi4+0x124>
 8000eec:	4638      	mov	r0, r7
 8000eee:	e708      	b.n	8000d02 <__udivmoddi4+0xda>
 8000ef0:	4637      	mov	r7, r6
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0xa0>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main_ui>:
 * @LastEditTime: 2021-06-27 00:59:25
 */
#include "ui.h"

void main_ui(void)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b08b      	sub	sp, #44	; 0x2c
 8000efc:	af02      	add	r7, sp, #8
	uint8_t str[24] = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
    uint8_t current_x=0, current_y=0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	77fb      	strb	r3, [r7, #31]
 8000f12:	2300      	movs	r3, #0
 8000f14:	77bb      	strb	r3, [r7, #30]

    OLED_ShowString(0, 0, "  Type-C Power  ", 16, 1);
 8000f16:	2301      	movs	r3, #1
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	4a60      	ldr	r2, [pc, #384]	; (80010a0 <main_ui+0x1a8>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2000      	movs	r0, #0
 8000f22:	f006 feb5 	bl	8007c90 <OLED_ShowString>

    sprintf(str, "Vin:%4.1fV",g_adc_buff[0]/100.0);
 8000f26:	4b5f      	ldr	r3, [pc, #380]	; (80010a4 <main_ui+0x1ac>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fb12 	bl	8000554 <__aeabi_ui2d>
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b5c      	ldr	r3, [pc, #368]	; (80010a8 <main_ui+0x1b0>)
 8000f36:	f7ff fcb1 	bl	800089c <__aeabi_ddiv>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460c      	mov	r4, r1
 8000f3e:	1d38      	adds	r0, r7, #4
 8000f40:	461a      	mov	r2, r3
 8000f42:	4623      	mov	r3, r4
 8000f44:	4959      	ldr	r1, [pc, #356]	; (80010ac <main_ui+0x1b4>)
 8000f46:	f007 fbfb 	bl	8008740 <siprintf>
    OLED_ShowString(0, 24, str, 8, 1);
 8000f4a:	1d3a      	adds	r2, r7, #4
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2308      	movs	r3, #8
 8000f52:	2118      	movs	r1, #24
 8000f54:	2000      	movs	r0, #0
 8000f56:	f006 fe9b 	bl	8007c90 <OLED_ShowString>

    sprintf(str, "Iin:%4.1fA",g_adc_buff[1]/100.0-19.8);
 8000f5a:	4b52      	ldr	r3, [pc, #328]	; (80010a4 <main_ui+0x1ac>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff faf8 	bl	8000554 <__aeabi_ui2d>
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <main_ui+0x1b0>)
 8000f6a:	f7ff fc97 	bl	800089c <__aeabi_ddiv>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460c      	mov	r4, r1
 8000f72:	4618      	mov	r0, r3
 8000f74:	4621      	mov	r1, r4
 8000f76:	a348      	add	r3, pc, #288	; (adr r3, 8001098 <main_ui+0x1a0>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff f9ac 	bl	80002d8 <__aeabi_dsub>
 8000f80:	4603      	mov	r3, r0
 8000f82:	460c      	mov	r4, r1
 8000f84:	1d38      	adds	r0, r7, #4
 8000f86:	461a      	mov	r2, r3
 8000f88:	4623      	mov	r3, r4
 8000f8a:	4949      	ldr	r1, [pc, #292]	; (80010b0 <main_ui+0x1b8>)
 8000f8c:	f007 fbd8 	bl	8008740 <siprintf>
    OLED_ShowString(0, 40, str, 8, 1);
 8000f90:	1d3a      	adds	r2, r7, #4
 8000f92:	2301      	movs	r3, #1
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2308      	movs	r3, #8
 8000f98:	2128      	movs	r1, #40	; 0x28
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f006 fe78 	bl	8007c90 <OLED_ShowString>

    sprintf(str, "Vmid:%4.1fV",g_adc_buff[2]/100.0);
 8000fa0:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <main_ui+0x1ac>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fad5 	bl	8000554 <__aeabi_ui2d>
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <main_ui+0x1b0>)
 8000fb0:	f7ff fc74 	bl	800089c <__aeabi_ddiv>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	460c      	mov	r4, r1
 8000fb8:	1d38      	adds	r0, r7, #4
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4623      	mov	r3, r4
 8000fbe:	493d      	ldr	r1, [pc, #244]	; (80010b4 <main_ui+0x1bc>)
 8000fc0:	f007 fbbe 	bl	8008740 <siprintf>
    OLED_ShowString(32, 56, str, 8, 1);
 8000fc4:	1d3a      	adds	r2, r7, #4
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2308      	movs	r3, #8
 8000fcc:	2138      	movs	r1, #56	; 0x38
 8000fce:	2020      	movs	r0, #32
 8000fd0:	f006 fe5e 	bl	8007c90 <OLED_ShowString>

    sprintf(str, "Vout:%4.1fV",g_adc_buff[3]/100.0);
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <main_ui+0x1ac>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fabb 	bl	8000554 <__aeabi_ui2d>
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <main_ui+0x1b0>)
 8000fe4:	f7ff fc5a 	bl	800089c <__aeabi_ddiv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	460c      	mov	r4, r1
 8000fec:	1d38      	adds	r0, r7, #4
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	4931      	ldr	r1, [pc, #196]	; (80010b8 <main_ui+0x1c0>)
 8000ff4:	f007 fba4 	bl	8008740 <siprintf>
    OLED_ShowString(64, 24, str, 8, 1);
 8000ff8:	1d3a      	adds	r2, r7, #4
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2308      	movs	r3, #8
 8001000:	2118      	movs	r1, #24
 8001002:	2040      	movs	r0, #64	; 0x40
 8001004:	f006 fe44 	bl	8007c90 <OLED_ShowString>

    sprintf(str, "Iout:%4.1fA",g_adc_buff[4]/100.0-19.8);
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <main_ui+0x1ac>)
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff faa1 	bl	8000554 <__aeabi_ui2d>
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <main_ui+0x1b0>)
 8001018:	f7ff fc40 	bl	800089c <__aeabi_ddiv>
 800101c:	4603      	mov	r3, r0
 800101e:	460c      	mov	r4, r1
 8001020:	4618      	mov	r0, r3
 8001022:	4621      	mov	r1, r4
 8001024:	a31c      	add	r3, pc, #112	; (adr r3, 8001098 <main_ui+0x1a0>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff f955 	bl	80002d8 <__aeabi_dsub>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	1d38      	adds	r0, r7, #4
 8001034:	461a      	mov	r2, r3
 8001036:	4623      	mov	r3, r4
 8001038:	4920      	ldr	r1, [pc, #128]	; (80010bc <main_ui+0x1c4>)
 800103a:	f007 fb81 	bl	8008740 <siprintf>
    OLED_ShowString(64, 40, str, 8, 1);
 800103e:	1d3a      	adds	r2, r7, #4
 8001040:	2301      	movs	r3, #1
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2308      	movs	r3, #8
 8001046:	2128      	movs	r1, #40	; 0x28
 8001048:	2040      	movs	r0, #64	; 0x40
 800104a:	f006 fe21 	bl	8007c90 <OLED_ShowString>

    sprintf(str, "%2d",cnt1);
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <main_ui+0x1c8>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	491b      	ldr	r1, [pc, #108]	; (80010c4 <main_ui+0x1cc>)
 8001056:	4618      	mov	r0, r3
 8001058:	f007 fb72 	bl	8008740 <siprintf>
    OLED_ShowString(0, 56, str, 8, 1);
 800105c:	1d3a      	adds	r2, r7, #4
 800105e:	2301      	movs	r3, #1
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2308      	movs	r3, #8
 8001064:	2138      	movs	r1, #56	; 0x38
 8001066:	2000      	movs	r0, #0
 8001068:	f006 fe12 	bl	8007c90 <OLED_ShowString>

    sprintf(str, "%2d",cnt2);
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <main_ui+0x1d0>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4914      	ldr	r1, [pc, #80]	; (80010c4 <main_ui+0x1cc>)
 8001074:	4618      	mov	r0, r3
 8001076:	f007 fb63 	bl	8008740 <siprintf>
    OLED_ShowString(96, 56, str, 8, 1);
 800107a:	1d3a      	adds	r2, r7, #4
 800107c:	2301      	movs	r3, #1
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2308      	movs	r3, #8
 8001082:	2138      	movs	r1, #56	; 0x38
 8001084:	2060      	movs	r0, #96	; 0x60
 8001086:	f006 fe03 	bl	8007c90 <OLED_ShowString>

    OLED_Refresh();
 800108a:	f006 fca9 	bl	80079e0 <OLED_Refresh>
}
 800108e:	bf00      	nop
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd90      	pop	{r4, r7, pc}
 8001096:	bf00      	nop
 8001098:	cccccccd 	.word	0xcccccccd
 800109c:	4033cccc 	.word	0x4033cccc
 80010a0:	0800a830 	.word	0x0800a830
 80010a4:	200002ec 	.word	0x200002ec
 80010a8:	40590000 	.word	0x40590000
 80010ac:	0800a844 	.word	0x0800a844
 80010b0:	0800a850 	.word	0x0800a850
 80010b4:	0800a85c 	.word	0x0800a85c
 80010b8:	0800a868 	.word	0x0800a868
 80010bc:	0800a874 	.word	0x0800a874
 80010c0:	200001f8 	.word	0x200001f8
 80010c4:	0800a880 	.word	0x0800a880
 80010c8:	200001fc 	.word	0x200001fc

080010cc <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2220      	movs	r2, #32
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f006 feb5 	bl	8007e48 <memset>

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010de:	4b48      	ldr	r3, [pc, #288]	; (8001200 <MX_ADC2_Init+0x134>)
 80010e0:	4a48      	ldr	r2, [pc, #288]	; (8001204 <MX_ADC2_Init+0x138>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e4:	4b46      	ldr	r3, [pc, #280]	; (8001200 <MX_ADC2_Init+0x134>)
 80010e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010ec:	4b44      	ldr	r3, [pc, #272]	; (8001200 <MX_ADC2_Init+0x134>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f2:	4b43      	ldr	r3, [pc, #268]	; (8001200 <MX_ADC2_Init+0x134>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <MX_ADC2_Init+0x134>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010fe:	4b40      	ldr	r3, [pc, #256]	; (8001200 <MX_ADC2_Init+0x134>)
 8001100:	2201      	movs	r2, #1
 8001102:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001104:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <MX_ADC2_Init+0x134>)
 8001106:	2208      	movs	r2, #8
 8001108:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800110a:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <MX_ADC2_Init+0x134>)
 800110c:	2200      	movs	r2, #0
 800110e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001110:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <MX_ADC2_Init+0x134>)
 8001112:	2200      	movs	r2, #0
 8001114:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 5;
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <MX_ADC2_Init+0x134>)
 8001118:	2205      	movs	r2, #5
 800111a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <MX_ADC2_Init+0x134>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <MX_ADC2_Init+0x134>)
 8001126:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800112c:	4b34      	ldr	r3, [pc, #208]	; (8001200 <MX_ADC2_Init+0x134>)
 800112e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001134:	4b32      	ldr	r3, [pc, #200]	; (8001200 <MX_ADC2_Init+0x134>)
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800113c:	4b30      	ldr	r3, [pc, #192]	; (8001200 <MX_ADC2_Init+0x134>)
 800113e:	2200      	movs	r2, #0
 8001140:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <MX_ADC2_Init+0x134>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800114a:	482d      	ldr	r0, [pc, #180]	; (8001200 <MX_ADC2_Init+0x134>)
 800114c:	f001 fa00 	bl	8002550 <HAL_ADC_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001156:	f000 faf3 	bl	8001740 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <MX_ADC2_Init+0x13c>)
 800115c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115e:	2306      	movs	r3, #6
 8001160:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001162:	2305      	movs	r3, #5
 8001164:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001166:	237f      	movs	r3, #127	; 0x7f
 8001168:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800116a:	2304      	movs	r3, #4
 800116c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4822      	ldr	r0, [pc, #136]	; (8001200 <MX_ADC2_Init+0x134>)
 8001178:	f001 fc44 	bl	8002a04 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001182:	f000 fadd 	bl	8001740 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_ADC2_Init+0x140>)
 8001188:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800118a:	230c      	movs	r3, #12
 800118c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	481b      	ldr	r0, [pc, #108]	; (8001200 <MX_ADC2_Init+0x134>)
 8001194:	f001 fc36 	bl	8002a04 <HAL_ADC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 800119e:	f000 facf 	bl	8001740 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_ADC2_Init+0x144>)
 80011a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011a6:	2312      	movs	r3, #18
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4814      	ldr	r0, [pc, #80]	; (8001200 <MX_ADC2_Init+0x134>)
 80011b0:	f001 fc28 	bl	8002a04 <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 80011ba:	f000 fac1 	bl	8001740 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_ADC2_Init+0x148>)
 80011c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011c2:	2318      	movs	r3, #24
 80011c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_ADC2_Init+0x134>)
 80011cc:	f001 fc1a 	bl	8002a04 <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC2_Init+0x10e>
  {
    Error_Handler();
 80011d6:	f000 fab3 	bl	8001740 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_ADC2_Init+0x14c>)
 80011dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_ADC2_Init+0x134>)
 80011ea:	f001 fc0b 	bl	8002a04 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC2_Init+0x12c>
  {
    Error_Handler();
 80011f4:	f000 faa4 	bl	8001740 <Error_Handler>
  }

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000020c 	.word	0x2000020c
 8001204:	50000100 	.word	0x50000100
 8001208:	04300002 	.word	0x04300002
 800120c:	08600004 	.word	0x08600004
 8001210:	0c900008 	.word	0x0c900008
 8001214:	10c00010 	.word	0x10c00010
 8001218:	14f00020 	.word	0x14f00020

0800121c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a37      	ldr	r2, [pc, #220]	; (8001318 <HAL_ADC_MspInit+0xfc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d167      	bne.n	800130e <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800123e:	4b37      	ldr	r3, [pc, #220]	; (800131c <HAL_ADC_MspInit+0x100>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a36      	ldr	r2, [pc, #216]	; (800131c <HAL_ADC_MspInit+0x100>)
 8001244:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b34      	ldr	r3, [pc, #208]	; (800131c <HAL_ADC_MspInit+0x100>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_ADC_MspInit+0x100>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a30      	ldr	r2, [pc, #192]	; (800131c <HAL_ADC_MspInit+0x100>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_ADC_MspInit+0x100>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_ADC_MspInit+0x100>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a2a      	ldr	r2, [pc, #168]	; (800131c <HAL_ADC_MspInit+0x100>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <HAL_ADC_MspInit+0x100>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001286:	23c3      	movs	r3, #195	; 0xc3
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128a:	2303      	movs	r3, #3
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f002 fec2 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012a0:	2310      	movs	r3, #16
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a4:	2303      	movs	r3, #3
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	481b      	ldr	r0, [pc, #108]	; (8001320 <HAL_ADC_MspInit+0x104>)
 80012b4:	f002 feb6 	bl	8004024 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_ADC_MspInit+0x108>)
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <HAL_ADC_MspInit+0x10c>)
 80012bc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_ADC_MspInit+0x108>)
 80012c0:	2224      	movs	r2, #36	; 0x24
 80012c2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_ADC_MspInit+0x108>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_ADC_MspInit+0x108>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_ADC_MspInit+0x108>)
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_ADC_MspInit+0x108>)
 80012d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012dc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_ADC_MspInit+0x108>)
 80012e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_ADC_MspInit+0x108>)
 80012e8:	2220      	movs	r2, #32
 80012ea:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_ADC_MspInit+0x108>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <HAL_ADC_MspInit+0x108>)
 80012f4:	f002 fbbc 	bl	8003a70 <HAL_DMA_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 80012fe:	f000 fa1f 	bl	8001740 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_ADC_MspInit+0x108>)
 8001306:	655a      	str	r2, [r3, #84]	; 0x54
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_ADC_MspInit+0x108>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	50000100 	.word	0x50000100
 800131c:	40021000 	.word	0x40021000
 8001320:	48000800 	.word	0x48000800
 8001324:	20000278 	.word	0x20000278
 8001328:	40020008 	.word	0x40020008

0800132c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001332:	463b      	mov	r3, r7
 8001334:	2230      	movs	r2, #48	; 0x30
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f006 fd85 	bl	8007e48 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_DAC1_Init+0x84>)
 8001340:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <MX_DAC1_Init+0x88>)
 8001342:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001344:	481a      	ldr	r0, [pc, #104]	; (80013b0 <MX_DAC1_Init+0x84>)
 8001346:	f002 f94a 	bl	80035de <HAL_DAC_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001350:	f000 f9f6 	bl	8001740 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001354:	2302      	movs	r3, #2
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_DAC1_Init+0x84>)
 8001380:	f002 f9ca 	bl	8003718 <HAL_DAC_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800138a:	f000 f9d9 	bl	8001740 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2210      	movs	r2, #16
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_DAC1_Init+0x84>)
 800139a:	f002 f9bd 	bl	8003718 <HAL_DAC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 80013a4:	f000 f9cc 	bl	8001740 <Error_Handler>
  }

}
 80013a8:	bf00      	nop
 80013aa:	3730      	adds	r7, #48	; 0x30
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002d8 	.word	0x200002d8
 80013b4:	50000800 	.word	0x50000800

080013b8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_DAC_MspInit+0x74>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d124      	bne.n	8001424 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_DAC_MspInit+0x78>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a14      	ldr	r2, [pc, #80]	; (8001430 <HAL_DAC_MspInit+0x78>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_DAC_MspInit+0x78>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_DAC_MspInit+0x78>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_DAC_MspInit+0x78>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_DAC_MspInit+0x78>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800140a:	2330      	movs	r3, #48	; 0x30
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f002 fe00 	bl	8004024 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	50000800 	.word	0x50000800
 8001430:	40021000 	.word	0x40021000

08001434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_DMA_Init+0x50>)
 800143c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <MX_DMA_Init+0x50>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6493      	str	r3, [r2, #72]	; 0x48
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_DMA_Init+0x50>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_DMA_Init+0x50>)
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <MX_DMA_Init+0x50>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6493      	str	r3, [r2, #72]	; 0x48
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_DMA_Init+0x50>)
 8001460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	200b      	movs	r0, #11
 8001470:	f002 f881 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001474:	200b      	movs	r0, #11
 8001476:	f002 f898 	bl	80035aa <HAL_NVIC_EnableIRQ>

}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149e:	4b43      	ldr	r3, [pc, #268]	; (80015ac <MX_GPIO_Init+0x124>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a42      	ldr	r2, [pc, #264]	; (80015ac <MX_GPIO_Init+0x124>)
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b40      	ldr	r3, [pc, #256]	; (80015ac <MX_GPIO_Init+0x124>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <MX_GPIO_Init+0x124>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <MX_GPIO_Init+0x124>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <MX_GPIO_Init+0x124>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	4b37      	ldr	r3, [pc, #220]	; (80015ac <MX_GPIO_Init+0x124>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a36      	ldr	r2, [pc, #216]	; (80015ac <MX_GPIO_Init+0x124>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <MX_GPIO_Init+0x124>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <MX_GPIO_Init+0x124>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a30      	ldr	r2, [pc, #192]	; (80015ac <MX_GPIO_Init+0x124>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <MX_GPIO_Init+0x124>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CV_Pin|CC_Pin|OLED_D1_Pin|OLED_D0_Pin
 80014fe:	2201      	movs	r2, #1
 8001500:	f643 4123 	movw	r1, #15395	; 0x3c23
 8001504:	482a      	ldr	r0, [pc, #168]	; (80015b0 <MX_GPIO_Init+0x128>)
 8001506:	f002 ff0f 	bl	8004328 <HAL_GPIO_WritePin>
                          |OLED_DC_Pin|OLED_RES_Pin|LED_HEART_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001510:	4828      	ldr	r0, [pc, #160]	; (80015b4 <MX_GPIO_Init+0x12c>)
 8001512:	f002 ff09 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CV_Pin|CC_Pin|OLED_D1_Pin|OLED_D0_Pin
 8001516:	f643 4323 	movw	r3, #15395	; 0x3c23
 800151a:	617b      	str	r3, [r7, #20]
                          |OLED_DC_Pin|OLED_RES_Pin|LED_HEART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	4820      	ldr	r0, [pc, #128]	; (80015b0 <MX_GPIO_Init+0x128>)
 8001530:	f002 fd78 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ON_OFF_Pin|S1_A_Pin|S1_B_Pin;
 8001534:	f24c 0304 	movw	r3, #49156	; 0xc004
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4819      	ldr	r0, [pc, #100]	; (80015b0 <MX_GPIO_Init+0x128>)
 800154a:	f002 fd6b 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = S1_M_Pin|SHUTDOWN_Pin;
 800154e:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001558:	2301      	movs	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	4814      	ldr	r0, [pc, #80]	; (80015b4 <MX_GPIO_Init+0x12c>)
 8001564:	f002 fd5e 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = S2_M_Pin|S2_A_Pin|S2_B_Pin;
 8001568:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001572:	2301      	movs	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f002 fd50 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_GPIO_Init+0x12c>)
 800159e:	f002 fd41 	bl	8004024 <HAL_GPIO_Init>

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	48000400 	.word	0x48000400
 80015b4:	48000800 	.word	0x48000800

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  unsigned int i = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c2:	f000 fd14 	bl	8001fee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c6:	f000 f855 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ca:	f7ff ff5d 	bl	8001488 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ce:	f7ff ff31 	bl	8001434 <MX_DMA_Init>
  MX_ADC2_Init();
 80015d2:	f7ff fd7b 	bl	80010cc <MX_ADC2_Init>
  MX_DAC1_Init();
 80015d6:	f7ff fea9 	bl	800132c <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80015da:	f000 fc33 	bl	8001e44 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80015de:	f000 fa7d 	bl	8001adc <MX_TIM16_Init>
  MX_TIM17_Init();
 80015e2:	f000 faf7 	bl	8001bd4 <MX_TIM17_Init>
  MX_TIM2_Init();
 80015e6:	f000 f9df 	bl	80019a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015ea:	f000 fa29 	bl	8001a40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);             //TIM2触发ADC
 80015ee:	4819      	ldr	r0, [pc, #100]	; (8001654 <main+0x9c>)
 80015f0:	f003 fefc 	bl	80053ec <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc2, g_adc_buff, 5); //�??启DMA
 80015f4:	2205      	movs	r2, #5
 80015f6:	4918      	ldr	r1, [pc, #96]	; (8001658 <main+0xa0>)
 80015f8:	4818      	ldr	r0, [pc, #96]	; (800165c <main+0xa4>)
 80015fa:	f001 f931 	bl	8002860 <HAL_ADC_Start_DMA>

  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048); //设置DAC1_CH1输出1.65V
 80015fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	4816      	ldr	r0, [pc, #88]	; (8001660 <main+0xa8>)
 8001608:	f002 f85e 	bl	80036c8 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2048); //设置DAC1_CH2输出1.65V
 800160c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001610:	2200      	movs	r2, #0
 8001612:	2110      	movs	r1, #16
 8001614:	4812      	ldr	r0, [pc, #72]	; (8001660 <main+0xa8>)
 8001616:	f002 f857 	bl	80036c8 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);                           //�??启DAC1_CH1
 800161a:	2100      	movs	r1, #0
 800161c:	4810      	ldr	r0, [pc, #64]	; (8001660 <main+0xa8>)
 800161e:	f002 f800 	bl	8003622 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);                           //�??启DAC1_CH2
 8001622:	2110      	movs	r1, #16
 8001624:	480e      	ldr	r0, [pc, #56]	; (8001660 <main+0xa8>)
 8001626:	f001 fffc 	bl	8003622 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <main+0xac>)
 800162c:	f003 ff40 	bl	80054b0 <HAL_TIM_Base_Start_IT>
  OLED_Init();                                                    //OLED初始�??
 8001630:	f006 fb60 	bl	8007cf4 <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(LED_HEART_GPIO_Port, LED_HEART_Pin);
 8001634:	2120      	movs	r1, #32
 8001636:	480c      	ldr	r0, [pc, #48]	; (8001668 <main+0xb0>)
 8001638:	f002 fe8e 	bl	8004358 <HAL_GPIO_TogglePin>

    main_ui();
 800163c:	f7ff fc5c 	bl	8000ef8 <main_ui>
    printf("now time is %5d ms\n", sys_time_ms);
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <main+0xb4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	480a      	ldr	r0, [pc, #40]	; (8001670 <main+0xb8>)
 8001648:	f007 f862 	bl	8008710 <iprintf>
    HAL_Delay(10);
 800164c:	200a      	movs	r0, #10
 800164e:	f000 fd3f 	bl	80020d0 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_HEART_GPIO_Port, LED_HEART_Pin);
 8001652:	e7ef      	b.n	8001634 <main+0x7c>
 8001654:	20000398 	.word	0x20000398
 8001658:	200002ec 	.word	0x200002ec
 800165c:	2000020c 	.word	0x2000020c
 8001660:	200002d8 	.word	0x200002d8
 8001664:	2000034c 	.word	0x2000034c
 8001668:	48000400 	.word	0x48000400
 800166c:	200004bc 	.word	0x200004bc
 8001670:	0800a884 	.word	0x0800a884

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0a4      	sub	sp, #144	; 0x90
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800167e:	2238      	movs	r2, #56	; 0x38
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f006 fbe0 	bl	8007e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001698:	463b      	mov	r3, r7
 800169a:	2244      	movs	r2, #68	; 0x44
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f006 fbd2 	bl	8007e48 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f002 fe71 	bl	800438c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b4:	2302      	movs	r3, #2
 80016b6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b8:	2303      	movs	r3, #3
 80016ba:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016bc:	2301      	movs	r3, #1
 80016be:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016c0:	2328      	movs	r3, #40	; 0x28
 80016c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 ff09 	bl	80044f4 <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x78>
  {
    Error_Handler();
 80016e8:	f000 f82a 	bl	8001740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ec:	230f      	movs	r3, #15
 80016ee:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2303      	movs	r3, #3
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001700:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001704:	2104      	movs	r1, #4
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fa0c 	bl	8004b24 <HAL_RCC_ClockConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001712:	f000 f815 	bl	8001740 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8001716:	f248 0301 	movw	r3, #32769	; 0x8001
 800171a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001720:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	4618      	mov	r0, r3
 800172a:	f003 fc17 	bl	8004f5c <HAL_RCCEx_PeriphCLKConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001734:	f000 f804 	bl	8001740 <Error_Handler>
  }
}
 8001738:	bf00      	nop
 800173a:	3790      	adds	r7, #144	; 0x90
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001746:	e7fe      	b.n	8001746 <Error_Handler+0x6>

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_MspInit+0x44>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <HAL_MspInit+0x44>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6613      	str	r3, [r2, #96]	; 0x60
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_MspInit+0x44>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_MspInit+0x44>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_MspInit+0x44>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6593      	str	r3, [r2, #88]	; 0x58
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_MspInit+0x44>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800177e:	f002 fea9 	bl	80044d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 fc5a 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <DMA1_Channel1_IRQHandler+0x10>)
 80017ea:	f002 facb 	bl	8003d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000278 	.word	0x20000278

080017f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(CC_GPIO_Port, CC_Pin);
 80017fc:	2102      	movs	r1, #2
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <TIM3_IRQHandler+0x20>)
 8001800:	f002 fdaa 	bl	8004358 <HAL_GPIO_TogglePin>

  HAL_GPIO_TogglePin(CC_GPIO_Port, CC_Pin);
 8001804:	2102      	movs	r1, #2
 8001806:	4804      	ldr	r0, [pc, #16]	; (8001818 <TIM3_IRQHandler+0x20>)
 8001808:	f002 fda6 	bl	8004358 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <TIM3_IRQHandler+0x24>)
 800180e:	f003 ff1a 	bl	8005646 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	48000400 	.word	0x48000400
 800181c:	2000034c 	.word	0x2000034c

08001820 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <USART1_IRQHandler+0x10>)
 8001826:	f005 f941 	bl	8006aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000430 	.word	0x20000430

08001834 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
	}

return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fb75 	bl	8001f78 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
	}
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f006 fa58 	bl	8007df4 <__errno>
 8001944:	4602      	mov	r2, r0
 8001946:	230c      	movs	r3, #12
 8001948:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20008000 	.word	0x20008000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000200 	.word	0x20000200
 8001978:	20000948 	.word	0x20000948

0800197c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <SystemInit+0x28>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <SystemInit+0x28>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SystemInit+0x28>)
 8001992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001996:	609a      	str	r2, [r3, #8]
#endif
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <MX_TIM2_Init+0x94>)
 80019c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <MX_TIM2_Init+0x94>)
 80019d0:	229f      	movs	r2, #159	; 0x9f
 80019d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <MX_TIM2_Init+0x94>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <MX_TIM2_Init+0x94>)
 80019dc:	2263      	movs	r2, #99	; 0x63
 80019de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <MX_TIM2_Init+0x94>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_TIM2_Init+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ec:	4813      	ldr	r0, [pc, #76]	; (8001a3c <MX_TIM2_Init+0x94>)
 80019ee:	f003 fca5 	bl	800533c <HAL_TIM_Base_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019f8:	f7ff fea2 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <MX_TIM2_Init+0x94>)
 8001a0a:	f004 f8ab 	bl	8005b64 <HAL_TIM_ConfigClockSource>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a14:	f7ff fe94 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	4619      	mov	r1, r3
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_TIM2_Init+0x94>)
 8001a26:	f004 fdc3 	bl	80065b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a30:	f7ff fe86 	bl	8001740 <Error_Handler>
  }

}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000398 	.word	0x20000398

08001a40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a60:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <MX_TIM3_Init+0x98>)
 8001a62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a66:	229f      	movs	r2, #159	; 0x9f
 8001a68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a84:	4813      	ldr	r0, [pc, #76]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a86:	f003 fc59 	bl	800533c <HAL_TIM_Base_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a90:	f7ff fe56 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001aa2:	f004 f85f 	bl	8005b64 <HAL_TIM_ConfigClockSource>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001aac:	f7ff fe48 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001abe:	f004 fd77 	bl	80065b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ac8:	f7ff fe3a 	bl	8001740 <Error_Handler>
  }

}
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000034c 	.word	0x2000034c
 8001ad8:	40000400 	.word	0x40000400

08001adc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001af6:	463b      	mov	r3, r7
 8001af8:	2234      	movs	r2, #52	; 0x34
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f006 f9a3 	bl	8007e48 <memset>

  htim16.Instance = TIM16;
 8001b02:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b04:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <MX_TIM16_Init+0xf4>)
 8001b06:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3;
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 199;
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b16:	22c7      	movs	r2, #199	; 0xc7
 8001b18:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b20:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b26:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b2c:	4827      	ldr	r0, [pc, #156]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b2e:	f003 fc05 	bl	800533c <HAL_TIM_Base_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001b38:	f7ff fe02 	bl	8001740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001b3c:	4823      	ldr	r0, [pc, #140]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b3e:	f003 fd21 	bl	8005584 <HAL_TIM_PWM_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001b48:	f7ff fdfa 	bl	8001740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001b4c:	2370      	movs	r3, #112	; 0x70
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500;
 8001b50:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b56:	2300      	movs	r3, #0
 8001b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4619      	mov	r1, r3
 8001b72:	4816      	ldr	r0, [pc, #88]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b74:	f003 fee6 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001b7e:	f7ff fddf 	bl	8001740 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim16);
 8001b82:	4812      	ldr	r0, [pc, #72]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001b84:	f004 fe36 	bl	80067f4 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 32;
 8001b94:	2320      	movs	r3, #32
 8001b96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001baa:	463b      	mov	r3, r7
 8001bac:	4619      	mov	r1, r3
 8001bae:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001bb0:	f004 fd80 	bl	80066b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM16_Init+0xe2>
  {
    Error_Handler();
 8001bba:	f7ff fdc1 	bl	8001740 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 8001bbe:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM16_Init+0xf0>)
 8001bc0:	f000 f8e4 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001bc4:	bf00      	nop
 8001bc6:	3750      	adds	r7, #80	; 0x50
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200003e4 	.word	0x200003e4
 8001bd0:	40014400 	.word	0x40014400

08001bd4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b094      	sub	sp, #80	; 0x50
 8001bd8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bee:	463b      	mov	r3, r7
 8001bf0:	2234      	movs	r2, #52	; 0x34
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f006 f927 	bl	8007e48 <memset>

  htim17.Instance = TIM17;
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001bfc:	4a32      	ldr	r2, [pc, #200]	; (8001cc8 <MX_TIM17_Init+0xf4>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3;
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001c02:	2203      	movs	r2, #3
 8001c04:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 199;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001c0e:	22c7      	movs	r2, #199	; 0xc7
 8001c10:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c24:	4827      	ldr	r0, [pc, #156]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001c26:	f003 fb89 	bl	800533c <HAL_TIM_Base_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001c30:	f7ff fd86 	bl	8001740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001c34:	4823      	ldr	r0, [pc, #140]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001c36:	f003 fca5 	bl	8005584 <HAL_TIM_PWM_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001c40:	f7ff fd7e 	bl	8001740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001c44:	2370      	movs	r3, #112	; 0x70
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500;
 8001c48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c52:	2300      	movs	r3, #0
 8001c54:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4816      	ldr	r0, [pc, #88]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001c6c:	f003 fe6a 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001c76:	f7ff fd63 	bl	8001740 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim17);
 8001c7a:	4812      	ldr	r0, [pc, #72]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001c7c:	f004 fdba 	bl	80067f4 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 32;
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001ca8:	f004 fd04 	bl	80066b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM17_Init+0xe2>
  {
    Error_Handler();
 8001cb2:	f7ff fd45 	bl	8001740 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <MX_TIM17_Init+0xf0>)
 8001cb8:	f000 f868 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001cbc:	bf00      	nop
 8001cbe:	3750      	adds	r7, #80	; 0x50
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000300 	.word	0x20000300
 8001cc8:	40014800 	.word	0x40014800

08001ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	4a26      	ldr	r2, [pc, #152]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001cf6:	e03c      	b.n	8001d72 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_TIM_Base_MspInit+0xb4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d114      	bne.n	8001d2c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	201d      	movs	r0, #29
 8001d20:	f001 fc29 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d24:	201d      	movs	r0, #29
 8001d26:	f001 fc40 	bl	80035aa <HAL_NVIC_EnableIRQ>
}
 8001d2a:	e022      	b.n	8001d72 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <HAL_TIM_Base_MspInit+0xb8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d10c      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	6613      	str	r3, [r2, #96]	; 0x60
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	e010      	b.n	8001d72 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM17)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <HAL_TIM_Base_MspInit+0xbc>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10b      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d64:	6613      	str	r3, [r2, #96]	; 0x60
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_TIM_Base_MspInit+0xb0>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40014400 	.word	0x40014400
 8001d88:	40014800 	.word	0x40014800

08001d8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a22      	ldr	r2, [pc, #136]	; (8001e34 <HAL_TIM_MspPostInit+0xa8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d11c      	bne.n	8001de8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_TIM_MspPostInit+0xac>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <HAL_TIM_MspPostInit+0xac>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dba:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <HAL_TIM_MspPostInit+0xac>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001dc6:	2350      	movs	r3, #80	; 0x50
 8001dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4816      	ldr	r0, [pc, #88]	; (8001e3c <HAL_TIM_MspPostInit+0xb0>)
 8001de2:	f002 f91f 	bl	8004024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001de6:	e021      	b.n	8001e2c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM17)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_TIM_MspPostInit+0xb4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d11c      	bne.n	8001e2c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_TIM_MspPostInit+0xac>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_TIM_MspPostInit+0xac>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <HAL_TIM_MspPostInit+0xac>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001e0a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <HAL_TIM_MspPostInit+0xb0>)
 8001e28:	f002 f8fc 	bl	8004024 <HAL_GPIO_Init>
}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	; 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40014400 	.word	0x40014400
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	48000400 	.word	0x48000400
 8001e40:	40014800 	.word	0x40014800

08001e44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001e48:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e4a:	4a24      	ldr	r2, [pc, #144]	; (8001edc <MX_USART1_UART_Init+0x98>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4811      	ldr	r0, [pc, #68]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001e92:	f004 fd08 	bl	80068a6 <HAL_MultiProcessor_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001e9c:	f7ff fc50 	bl	8001740 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001ea4:	f005 fc52 	bl	800774c <HAL_UARTEx_SetTxFifoThreshold>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001eae:	f7ff fc47 	bl	8001740 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4808      	ldr	r0, [pc, #32]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001eb6:	f005 fc87 	bl	80077c8 <HAL_UARTEx_SetRxFifoThreshold>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001ec0:	f7ff fc3e 	bl	8001740 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <MX_USART1_UART_Init+0x94>)
 8001ec6:	f005 fc08 	bl	80076da <HAL_UARTEx_DisableFifoMode>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001ed0:	f7ff fc36 	bl	8001740 <Error_Handler>
  }

}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000430 	.word	0x20000430
 8001edc:	40013800 	.word	0x40013800

08001ee0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <HAL_UART_MspInit+0x90>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d131      	bne.n	8001f66 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_UART_MspInit+0x94>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f06:	4a1b      	ldr	r2, [pc, #108]	; (8001f74 <HAL_UART_MspInit+0x94>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_UART_MspInit+0x94>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_UART_MspInit+0x94>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <HAL_UART_MspInit+0x94>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <HAL_UART_MspInit+0x94>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f38:	2312      	movs	r3, #18
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f44:	2307      	movs	r3, #7
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f52:	f002 f867 	bl	8004024 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2025      	movs	r0, #37	; 0x25
 8001f5c:	f001 fb0b 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f60:	2025      	movs	r0, #37	; 0x25
 8001f62:	f001 fb22 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	; 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40021000 	.word	0x40021000

08001f78 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001f80:	1d39      	adds	r1, r7, #4
 8001f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f86:	2201      	movs	r2, #1
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <__io_putchar+0x20>)
 8001f8a:	f004 fcf8 	bl	800697e <HAL_UART_Transmit>
 
	return ch;
 8001f8e:	687b      	ldr	r3, [r7, #4]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000430 	.word	0x20000430

08001f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa0:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fa2:	490e      	ldr	r1, [pc, #56]	; (8001fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <LoopForever+0xe>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb8:	4c0b      	ldr	r4, [pc, #44]	; (8001fe8 <LoopForever+0x16>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc6:	f7ff fcd9 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fca:	f005 ff19 	bl	8007e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fce:	f7ff faf3 	bl	80015b8 <main>

08001fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd2:	e7fe      	b.n	8001fd2 <LoopForever>
  ldr   r0, =_estack
 8001fd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001fe0:	0800b838 	.word	0x0800b838
  ldr r2, =_sbss
 8001fe4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001fe8:	20000944 	.word	0x20000944

08001fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC1_2_IRQHandler>

08001fee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f001 fab1 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f80e 	bl	8002020 <HAL_InitTick>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	71fb      	strb	r3, [r7, #7]
 800200e:	e001      	b.n	8002014 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002010:	f7ff fb9a 	bl	8001748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002014:	79fb      	ldrb	r3, [r7, #7]

}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_InitTick+0x68>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d022      	beq.n	800207a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_InitTick+0x6c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_InitTick+0x68>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002040:	fbb1 f3f3 	udiv	r3, r1, r3
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	4618      	mov	r0, r3
 800204a:	f001 fabc 	bl	80035c6 <HAL_SYSTICK_Config>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10f      	bne.n	8002074 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	d809      	bhi.n	800206e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205a:	2200      	movs	r2, #0
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	f04f 30ff 	mov.w	r0, #4294967295
 8002062:	f001 fa88 	bl	8003576 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_InitTick+0x70>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e007      	b.n	800207e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	e004      	b.n	800207e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e001      	b.n	800207e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000008 	.word	0x20000008
 800208c:	20000000 	.word	0x20000000
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_IncTick+0x1c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_IncTick+0x20>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a03      	ldr	r2, [pc, #12]	; (80020b0 <HAL_IncTick+0x1c>)
 80020a4:	6013      	str	r3, [r2, #0]
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	200004bc 	.word	0x200004bc
 80020b4:	20000008 	.word	0x20000008

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200004bc 	.word	0x200004bc

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d004      	beq.n	80020f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_Delay+0x40>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f4:	bf00      	nop
 80020f6:	f7ff ffdf 	bl	80020b8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	429a      	cmp	r2, r3
 8002104:	d8f7      	bhi.n	80020f6 <HAL_Delay+0x26>
  {
  }
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000008 	.word	0x20000008

08002114 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3360      	adds	r3, #96	; 0x60
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <LL_ADC_SetOffset+0x44>)
 800219e:	4013      	ands	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021b4:	bf00      	nop
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	03fff000 	.word	0x03fff000

080021c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3360      	adds	r3, #96	; 0x60
 80021d2:	461a      	mov	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3360      	adds	r3, #96	; 0x60
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	431a      	orrs	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002226:	b480      	push	{r7}
 8002228:	b087      	sub	sp, #28
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3360      	adds	r3, #96	; 0x60
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	431a      	orrs	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002250:	bf00      	nop
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3360      	adds	r3, #96	; 0x60
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	615a      	str	r2, [r3, #20]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022de:	b480      	push	{r7}
 80022e0:	b087      	sub	sp, #28
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3330      	adds	r3, #48	; 0x30
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	4413      	add	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	211f      	movs	r1, #31
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	401a      	ands	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	f003 011f 	and.w	r1, r3, #31
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	431a      	orrs	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002336:	b480      	push	{r7}
 8002338:	b087      	sub	sp, #28
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3314      	adds	r3, #20
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0e5b      	lsrs	r3, r3, #25
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	4413      	add	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	0d1b      	lsrs	r3, r3, #20
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2107      	movs	r1, #7
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	401a      	ands	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	0d1b      	lsrs	r3, r3, #20
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	431a      	orrs	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a4:	43db      	mvns	r3, r3
 80023a6:	401a      	ands	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0318 	and.w	r3, r3, #24
 80023ae:	4908      	ldr	r1, [pc, #32]	; (80023d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023b0:	40d9      	lsrs	r1, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	400b      	ands	r3, r1
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	0007ffff 	.word	0x0007ffff

080023d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 031f 	and.w	r3, r3, #31
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002400:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6093      	str	r3, [r2, #8]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002428:	d101      	bne.n	800242e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800244c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002450:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002478:	d101      	bne.n	800247e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800249c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <LL_ADC_IsEnabled+0x18>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <LL_ADC_IsEnabled+0x1a>
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ee:	f043 0204 	orr.w	r2, r3, #4
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b04      	cmp	r3, #4
 8002514:	d101      	bne.n	800251a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b08      	cmp	r3, #8
 800253a:	d101      	bne.n	8002540 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b089      	sub	sp, #36	; 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e16b      	b.n	8002842 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7fe fe4f 	bl	800121c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff3f 	bl	8002414 <LL_ADC_IsDeepPowerDownEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff25 	bl	80023f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff5a 	bl	8002464 <LL_ADC_IsInternalRegulatorEnabled>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d113      	bne.n	80025de <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff3e 	bl	800243c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025c0:	4ba2      	ldr	r3, [pc, #648]	; (800284c <HAL_ADC_Init+0x2fc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	4aa2      	ldr	r2, [pc, #648]	; (8002850 <HAL_ADC_Init+0x300>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025d0:	e002      	b.n	80025d8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f9      	bne.n	80025d2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff3e 	bl	8002464 <LL_ADC_IsInternalRegulatorEnabled>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	f043 0210 	orr.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff77 	bl	8002502 <LL_ADC_REG_IsConversionOngoing>
 8002614:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 8106 	bne.w	8002830 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 8102 	bne.w	8002830 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002634:	f043 0202 	orr.w	r2, r3, #2
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff37 	bl	80024b4 <LL_ADC_IsEnabled>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d111      	bne.n	8002670 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800264c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002650:	f7ff ff30 	bl	80024b4 <LL_ADC_IsEnabled>
 8002654:	4604      	mov	r4, r0
 8002656:	487f      	ldr	r0, [pc, #508]	; (8002854 <HAL_ADC_Init+0x304>)
 8002658:	f7ff ff2c 	bl	80024b4 <LL_ADC_IsEnabled>
 800265c:	4603      	mov	r3, r0
 800265e:	4323      	orrs	r3, r4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4619      	mov	r1, r3
 800266a:	487b      	ldr	r0, [pc, #492]	; (8002858 <HAL_ADC_Init+0x308>)
 800266c:	f7ff fd52 	bl	8002114 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7f5b      	ldrb	r3, [r3, #29]
 8002674:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800267a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002680:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002686:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800268e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269a:	2b01      	cmp	r3, #1
 800269c:	d106      	bne.n	80026ac <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	3b01      	subs	r3, #1
 80026a4:	045b      	lsls	r3, r3, #17
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_ADC_Init+0x30c>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	69b9      	ldr	r1, [r7, #24]
 80026d8:	430b      	orrs	r3, r1
 80026da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff03 	bl	8002502 <LL_ADC_REG_IsConversionOngoing>
 80026fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff10 	bl	8002528 <LL_ADC_INJ_IsConversionOngoing>
 8002708:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d16d      	bne.n	80027ec <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d16a      	bne.n	80027ec <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800271a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002722:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002732:	f023 0302 	bic.w	r3, r3, #2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	69b9      	ldr	r1, [r7, #24]
 800273c:	430b      	orrs	r3, r1
 800273e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d017      	beq.n	8002778 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002756:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002760:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002764:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6911      	ldr	r1, [r2, #16]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	430b      	orrs	r3, r1
 8002772:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002776:	e013      	b.n	80027a0 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002786:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800279c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d118      	bne.n	80027dc <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027c0:	4311      	orrs	r1, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027cc:	430a      	orrs	r2, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	611a      	str	r2, [r3, #16]
 80027da:	e007      	b.n	80027ec <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d10c      	bne.n	800280e <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f023 010f 	bic.w	r1, r3, #15
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
 800280c:	e007      	b.n	800281e <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 020f 	bic.w	r2, r2, #15
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	f023 0303 	bic.w	r3, r3, #3
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	65da      	str	r2, [r3, #92]	; 0x5c
 800282e:	e007      	b.n	8002840 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	f043 0210 	orr.w	r2, r3, #16
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002840:	7ffb      	ldrb	r3, [r7, #31]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd90      	pop	{r4, r7, pc}
 800284a:	bf00      	nop
 800284c:	20000000 	.word	0x20000000
 8002850:	053e2d63 	.word	0x053e2d63
 8002854:	50000100 	.word	0x50000100
 8002858:	50000300 	.word	0x50000300
 800285c:	fff04007 	.word	0xfff04007

08002860 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800286c:	4851      	ldr	r0, [pc, #324]	; (80029b4 <HAL_ADC_Start_DMA+0x154>)
 800286e:	f7ff fdb1 	bl	80023d4 <LL_ADC_GetMultimode>
 8002872:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fe42 	bl	8002502 <LL_ADC_REG_IsConversionOngoing>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	f040 808f 	bne.w	80029a4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_ADC_Start_DMA+0x34>
 8002890:	2302      	movs	r3, #2
 8002892:	e08a      	b.n	80029aa <HAL_ADC_Start_DMA+0x14a>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d002      	beq.n	80028ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b09      	cmp	r3, #9
 80028ac:	d173      	bne.n	8002996 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fc98 	bl	80031e4 <ADC_Enable>
 80028b4:	4603      	mov	r3, r0
 80028b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d166      	bne.n	800298c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a38      	ldr	r2, [pc, #224]	; (80029b8 <HAL_ADC_Start_DMA+0x158>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d002      	beq.n	80028e2 <HAL_ADC_Start_DMA+0x82>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	e001      	b.n	80028e6 <HAL_ADC_Start_DMA+0x86>
 80028e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d002      	beq.n	80028f4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d006      	beq.n	800291a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	f023 0206 	bic.w	r2, r3, #6
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	661a      	str	r2, [r3, #96]	; 0x60
 8002918:	e002      	b.n	8002920 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	4a25      	ldr	r2, [pc, #148]	; (80029bc <HAL_ADC_Start_DMA+0x15c>)
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <HAL_ADC_Start_DMA+0x160>)
 800292e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_ADC_Start_DMA+0x164>)
 8002936:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	221c      	movs	r2, #28
 800293e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0210 	orr.w	r2, r2, #16
 8002956:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3340      	adds	r3, #64	; 0x40
 8002972:	4619      	mov	r1, r3
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f001 f922 	bl	8003bc0 <HAL_DMA_Start_IT>
 800297c:	4603      	mov	r3, r0
 800297e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fda8 	bl	80024da <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800298a:	e00d      	b.n	80029a8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002994:	e008      	b.n	80029a8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80029a2:	e001      	b.n	80029a8 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
 80029a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	50000300 	.word	0x50000300
 80029b8:	50000100 	.word	0x50000100
 80029bc:	08003299 	.word	0x08003299
 80029c0:	08003371 	.word	0x08003371
 80029c4:	0800338d 	.word	0x0800338d

080029c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b0b6      	sub	sp, #216	; 0xd8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x22>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e3c7      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x7b2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fd65 	bl	8002502 <LL_ADC_REG_IsConversionOngoing>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 83ac 	bne.w	8003198 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f7ff fc46 	bl	80022de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fd53 	bl	8002502 <LL_ADC_REG_IsConversionOngoing>
 8002a5c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fd5f 	bl	8002528 <LL_ADC_INJ_IsConversionOngoing>
 8002a6a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 81d9 	bne.w	8002e2a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f040 81d4 	bne.w	8002e2a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a8a:	d10f      	bne.n	8002aac <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2200      	movs	r2, #0
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7ff fc4d 	bl	8002336 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fbf4 	bl	8002292 <LL_ADC_SetSamplingTimeCommonConfig>
 8002aaa:	e00e      	b.n	8002aca <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f7ff fc3c 	bl	8002336 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fbe4 	bl	8002292 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	08db      	lsrs	r3, r3, #3
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d022      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6919      	ldr	r1, [r3, #16]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002afc:	f7ff fb3e 	bl	800217c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6919      	ldr	r1, [r3, #16]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f7ff fb8a 	bl	8002226 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6919      	ldr	r1, [r3, #16]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	7f1b      	ldrb	r3, [r3, #28]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d102      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x124>
 8002b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b26:	e000      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x126>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f7ff fb96 	bl	800225c <LL_ADC_SetOffsetSaturation>
 8002b30:	e17b      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fb43 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x15a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fb38 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	0e9b      	lsrs	r3, r3, #26
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	e01e      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x198>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fb2d 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e004      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002b90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x1b0>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	e018      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x1e2>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	e004      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002bdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d106      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fafc 	bl	80021f0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fae0 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x220>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2101      	movs	r1, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fad5 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	f003 021f 	and.w	r2, r3, #31
 8002c22:	e01e      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x25e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff faca 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e004      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x276>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	e018      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2a8>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e004      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002ca2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d106      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fa99 	bl	80021f0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fa7d 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x2e6>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fa72 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	e01e      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x324>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2102      	movs	r1, #2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fa67 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	e004      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x33c>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	e016      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x36a>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e004      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d106      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	2102      	movs	r1, #2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fa38 	bl	80021f0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2103      	movs	r1, #3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fa1c 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x3a8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fa11 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	0e9b      	lsrs	r3, r3, #26
 8002da6:	f003 021f 	and.w	r2, r3, #31
 8002daa:	e017      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x3d8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2103      	movs	r1, #3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fa06 	bl	80021c4 <LL_ADC_GetOffsetChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002dce:	2320      	movs	r3, #32
 8002dd0:	e003      	b.n	8002dda <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002dd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d105      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x3f0>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	e011      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x414>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e04:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e003      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d106      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2103      	movs	r1, #3
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f9e3 	bl	80021f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fb40 	bl	80024b4 <LL_ADC_IsEnabled>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 8140 	bne.w	80030bc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f7ff fa9f 	bl	800238c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4a8f      	ldr	r2, [pc, #572]	; (8003090 <HAL_ADC_ConfigChannel+0x68c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	f040 8131 	bne.w	80030bc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x47e>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2b09      	cmp	r3, #9
 8002e78:	bf94      	ite	ls
 8002e7a:	2301      	movls	r3, #1
 8002e7c:	2300      	movhi	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	e019      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x4b2>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e92:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e003      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d079      	beq.n	8002fae <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x4d2>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	3301      	adds	r3, #1
 8002ece:	069b      	lsls	r3, r3, #26
 8002ed0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ed4:	e015      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x4fe>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e003      	b.n	8002efa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	069b      	lsls	r3, r3, #26
 8002efe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x51e>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	3301      	adds	r3, #1
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	e017      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x54e>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	e003      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	ea42 0103 	orr.w	r1, r2, r3
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x574>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0e9b      	lsrs	r3, r3, #26
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f003 021f 	and.w	r2, r3, #31
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	051b      	lsls	r3, r3, #20
 8002f76:	e018      	b.n	8002faa <HAL_ADC_ConfigChannel+0x5a6>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f003 021f 	and.w	r2, r3, #31
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002faa:	430b      	orrs	r3, r1
 8002fac:	e081      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x5c6>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	069b      	lsls	r3, r3, #26
 8002fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc8:	e015      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x5f2>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002fe2:	2320      	movs	r3, #32
 8002fe4:	e003      	b.n	8002fee <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	069b      	lsls	r3, r3, #26
 8002ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x612>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0e9b      	lsrs	r3, r3, #26
 8003008:	3301      	adds	r3, #1
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	e017      	b.n	8003046 <HAL_ADC_ConfigChannel+0x642>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	61fb      	str	r3, [r7, #28]
  return result;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e003      	b.n	800303a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	ea42 0103 	orr.w	r1, r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x66e>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0e9b      	lsrs	r3, r3, #26
 800305c:	3301      	adds	r3, #1
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	3b1e      	subs	r3, #30
 800306a:	051b      	lsls	r3, r3, #20
 800306c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003070:	e01e      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x6ac>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	613b      	str	r3, [r7, #16]
  return result;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e006      	b.n	800309c <HAL_ADC_ConfigChannel+0x698>
 800308e:	bf00      	nop
 8003090:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f003 021f 	and.w	r2, r3, #31
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	3b1e      	subs	r3, #30
 80030aa:	051b      	lsls	r3, r3, #20
 80030ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b0:	430b      	orrs	r3, r1
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	6892      	ldr	r2, [r2, #8]
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7ff f93d 	bl	8002336 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <HAL_ADC_ConfigChannel+0x7bc>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d070      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c8:	483e      	ldr	r0, [pc, #248]	; (80031c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80030ca:	f7ff f849 	bl	8002160 <LL_ADC_GetCommonPathInternalCh>
 80030ce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3c      	ldr	r2, [pc, #240]	; (80031c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_ADC_ConfigChannel+0x6e2>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3a      	ldr	r2, [pc, #232]	; (80031cc <HAL_ADC_ConfigChannel+0x7c8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d126      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d120      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fa:	d156      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003100:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003104:	4619      	mov	r1, r3
 8003106:	482f      	ldr	r0, [pc, #188]	; (80031c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003108:	f7ff f817 	bl	800213a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	4a30      	ldr	r2, [pc, #192]	; (80031d4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	099a      	lsrs	r2, r3, #6
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003124:	e002      	b.n	800312c <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3b01      	subs	r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f9      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003132:	e03a      	b.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a27      	ldr	r2, [pc, #156]	; (80031d8 <HAL_ADC_ConfigChannel+0x7d4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d113      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x762>
 800313e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a23      	ldr	r2, [pc, #140]	; (80031dc <HAL_ADC_ConfigChannel+0x7d8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d02a      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315c:	4619      	mov	r1, r3
 800315e:	4819      	ldr	r0, [pc, #100]	; (80031c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003160:	f7fe ffeb 	bl	800213a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003164:	e021      	b.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d11c      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d116      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a16      	ldr	r2, [pc, #88]	; (80031dc <HAL_ADC_ConfigChannel+0x7d8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d011      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800318a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800318e:	4619      	mov	r1, r3
 8003190:	480c      	ldr	r0, [pc, #48]	; (80031c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003192:	f7fe ffd2 	bl	800213a <LL_ADC_SetCommonPathInternalCh>
 8003196:	e008      	b.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	37d8      	adds	r7, #216	; 0xd8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	80080000 	.word	0x80080000
 80031c4:	50000300 	.word	0x50000300
 80031c8:	c3210000 	.word	0xc3210000
 80031cc:	90c00010 	.word	0x90c00010
 80031d0:	20000000 	.word	0x20000000
 80031d4:	053e2d63 	.word	0x053e2d63
 80031d8:	c7520000 	.word	0xc7520000
 80031dc:	50000100 	.word	0x50000100
 80031e0:	cb840000 	.word	0xcb840000

080031e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f95f 	bl	80024b4 <LL_ADC_IsEnabled>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d146      	bne.n	800328a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <ADC_Enable+0xb0>)
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	f043 0210 	orr.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e032      	b.n	800328c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff f92e 	bl	800248c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003230:	f7fe ff42 	bl	80020b8 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003236:	e021      	b.n	800327c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff f939 	bl	80024b4 <LL_ADC_IsEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff f91d 	bl	800248c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003252:	f7fe ff31 	bl	80020b8 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d90d      	bls.n	800327c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	f043 0210 	orr.w	r2, r3, #16
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e007      	b.n	800328c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	d1d6      	bne.n	8003238 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	8000003f 	.word	0x8000003f

08003298 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d14b      	bne.n	800334a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d021      	beq.n	8003310 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe fff1 	bl	80022b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d032      	beq.n	8003342 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d12b      	bne.n	8003342 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11f      	bne.n	8003342 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	65da      	str	r2, [r3, #92]	; 0x5c
 800330e:	e018      	b.n	8003342 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d111      	bne.n	8003342 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f7ff fb40 	bl	80029c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003348:	e00e      	b.n	8003368 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff fb4a 	bl	80029f0 <HAL_ADC_ErrorCallback>
}
 800335c:	e004      	b.n	8003368 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff fb2c 	bl	80029dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033aa:	f043 0204 	orr.w	r2, r3, #4
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff fb1c 	bl	80029f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f2:	4a04      	ldr	r2, [pc, #16]	; (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	60d3      	str	r3, [r2, #12]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <__NVIC_GetPriorityGrouping+0x18>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	f003 0307 	and.w	r3, r3, #7
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	2b00      	cmp	r3, #0
 8003434:	db0b      	blt.n	800344e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	4907      	ldr	r1, [pc, #28]	; (800345c <__NVIC_EnableIRQ+0x38>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2001      	movs	r0, #1
 8003446:	fa00 f202 	lsl.w	r2, r0, r2
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000e100 	.word	0xe000e100

08003460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	; (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	; (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0307 	rsb	r3, r3, #7
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	bf28      	it	cs
 80034d2:	2304      	movcs	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3304      	adds	r3, #4
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d902      	bls.n	80034e4 <NVIC_EncodePriority+0x30>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3b03      	subs	r3, #3
 80034e2:	e000      	b.n	80034e6 <NVIC_EncodePriority+0x32>
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43d9      	mvns	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	4313      	orrs	r3, r2
         );
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff8e 	bl	8003460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff29 	bl	80033c0 <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003584:	f7ff ff40 	bl	8003408 <__NVIC_GetPriorityGrouping>
 8003588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7ff ff90 	bl	80034b4 <NVIC_EncodePriority>
 8003594:	4602      	mov	r2, r0
 8003596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359a:	4611      	mov	r1, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff5f 	bl	8003460 <__NVIC_SetPriority>
}
 80035a2:	bf00      	nop
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff33 	bl	8003424 <__NVIC_EnableIRQ>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff ffa4 	bl	800351c <SysTick_Config>
 80035d4:	4603      	mov	r3, r0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e014      	b.n	800361a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	791b      	ldrb	r3, [r3, #4]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d105      	bne.n	8003606 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fd fed9 	bl	80013b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	795b      	ldrb	r3, [r3, #5]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_DAC_Start+0x16>
 8003634:	2302      	movs	r3, #2
 8003636:	e043      	b.n	80036c0 <HAL_DAC_Start+0x9e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2201      	movs	r2, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800365c:	2001      	movs	r0, #1
 800365e:	f7fe fd37 	bl	80020d0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10f      	bne.n	8003688 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003672:	2b02      	cmp	r3, #2
 8003674:	d11d      	bne.n	80036b2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	e014      	b.n	80036b2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2102      	movs	r1, #2
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	429a      	cmp	r2, r3
 80036a0:	d107      	bne.n	80036b2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0202 	orr.w	r2, r2, #2
 80036b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	3308      	adds	r3, #8
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e004      	b.n	8003702 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	3314      	adds	r3, #20
 8003700:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	461a      	mov	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	795b      	ldrb	r3, [r3, #5]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_DAC_ConfigChannel+0x1c>
 8003730:	2302      	movs	r3, #2
 8003732:	e194      	b.n	8003a5e <HAL_DAC_ConfigChannel+0x346>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2202      	movs	r2, #2
 800373e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d174      	bne.n	8003832 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d137      	bne.n	80037be <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800374e:	f7fe fcb3 	bl	80020b8 <HAL_GetTick>
 8003752:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003754:	e011      	b.n	800377a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003756:	f7fe fcaf 	bl	80020b8 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d90a      	bls.n	800377a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f043 0208 	orr.w	r2, r3, #8
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2203      	movs	r2, #3
 8003774:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e171      	b.n	8003a5e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e6      	bne.n	8003756 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003788:	2001      	movs	r0, #1
 800378a:	f7fe fca1 	bl	80020d0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
 8003798:	e01e      	b.n	80037d8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800379a:	f7fe fc8d 	bl	80020b8 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d90a      	bls.n	80037be <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f043 0208 	orr.w	r2, r3, #8
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2203      	movs	r2, #3
 80037b8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e14f      	b.n	8003a5e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	dbe8      	blt.n	800379a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80037c8:	2001      	movs	r0, #1
 80037ca:	f7fe fc81 	bl	80020d0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	ea02 0103 	and.w	r1, r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	409a      	lsls	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	21ff      	movs	r1, #255	; 0xff
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	ea02 0103 	and.w	r1, r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	409a      	lsls	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d11d      	bne.n	8003876 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	221f      	movs	r2, #31
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	4013      	ands	r3, r2
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386a:	4313      	orrs	r3, r2
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2207      	movs	r2, #7
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	4013      	ands	r3, r2
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	e011      	b.n	80038c8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80038b0:	2301      	movs	r3, #1
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	e008      	b.n	80038c8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80038be:	2301      	movs	r3, #1
 80038c0:	623b      	str	r3, [r7, #32]
 80038c2:	e001      	b.n	80038c8 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	6a3a      	ldr	r2, [r7, #32]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	4013      	ands	r3, r2
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	791b      	ldrb	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_DAC_ConfigChannel+0x1e4>
 80038f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038fa:	e000      	b.n	80038fe <HAL_DAC_ConfigChannel+0x1e6>
 80038fc:	2300      	movs	r3, #0
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003916:	4013      	ands	r3, r2
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	795b      	ldrb	r3, [r3, #5]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d102      	bne.n	8003928 <HAL_DAC_ConfigChannel+0x210>
 8003922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003926:	e000      	b.n	800392a <HAL_DAC_ConfigChannel+0x212>
 8003928:	2300      	movs	r3, #0
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d114      	bne.n	800396a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003940:	f001 fa8e 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8003944:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	4a47      	ldr	r2, [pc, #284]	; (8003a68 <HAL_DAC_ConfigChannel+0x350>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d904      	bls.n	8003958 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	e00d      	b.n	8003974 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4a44      	ldr	r2, [pc, #272]	; (8003a6c <HAL_DAC_ConfigChannel+0x354>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d909      	bls.n	8003974 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	e004      	b.n	8003974 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003970:	4313      	orrs	r3, r2
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003982:	4313      	orrs	r3, r2
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6819      	ldr	r1, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	400a      	ands	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	4013      	ands	r3, r2
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	4313      	orrs	r3, r2
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6819      	ldr	r1, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	22c0      	movs	r2, #192	; 0xc0
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43da      	mvns	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	400a      	ands	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	ea02 0103 	and.w	r1, r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	09896800 	.word	0x09896800
 8003a6c:	04c4b400 	.word	0x04c4b400

08003a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e08d      	b.n	8003b9e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_DMA_Init+0x138>)
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d80f      	bhi.n	8003aae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	4b45      	ldr	r3, [pc, #276]	; (8003bac <HAL_DMA_Init+0x13c>)
 8003a96:	4413      	add	r3, r2
 8003a98:	4a45      	ldr	r2, [pc, #276]	; (8003bb0 <HAL_DMA_Init+0x140>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	009a      	lsls	r2, r3, #2
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a42      	ldr	r2, [pc, #264]	; (8003bb4 <HAL_DMA_Init+0x144>)
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
 8003aac:	e00e      	b.n	8003acc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4b40      	ldr	r3, [pc, #256]	; (8003bb8 <HAL_DMA_Init+0x148>)
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4a3d      	ldr	r2, [pc, #244]	; (8003bb0 <HAL_DMA_Init+0x140>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	009a      	lsls	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a3c      	ldr	r2, [pc, #240]	; (8003bbc <HAL_DMA_Init+0x14c>)
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa1e 	bl	8003f60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b2c:	d102      	bne.n	8003b34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b48:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d010      	beq.n	8003b74 <HAL_DMA_Init+0x104>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d80c      	bhi.n	8003b74 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fa3e 	bl	8003fdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	e008      	b.n	8003b86 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40020407 	.word	0x40020407
 8003bac:	bffdfff8 	.word	0xbffdfff8
 8003bb0:	cccccccd 	.word	0xcccccccd
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	bffdfbf8 	.word	0xbffdfbf8
 8003bbc:	40020400 	.word	0x40020400

08003bc0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_DMA_Start_IT+0x20>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e066      	b.n	8003cae <HAL_DMA_Start_IT+0xee>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d155      	bne.n	8003ca0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f962 	bl	8003ee2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 020e 	orr.w	r2, r2, #14
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e00f      	b.n	8003c58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 020a 	orr.w	r2, r2, #10
 8003c56:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c74:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c8c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e005      	b.n	8003cac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d00d      	beq.n	8003cea <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e047      	b.n	8003d7a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 020e 	bic.w	r2, r2, #14
 8003cf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f003 021f 	and.w	r2, r3, #31
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d36:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00c      	beq.n	8003d5a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d58:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
    }
  }
  return status;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	2204      	movs	r2, #4
 8003da6:	409a      	lsls	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d026      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x7a>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d021      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0204 	bic.w	r2, r2, #4
 8003dd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	f003 021f 	and.w	r2, r3, #31
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2104      	movs	r1, #4
 8003de6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d071      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dfc:	e06c      	b.n	8003ed8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	2202      	movs	r2, #2
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d02e      	beq.n	8003e70 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d029      	beq.n	8003e70 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 020a 	bic.w	r2, r2, #10
 8003e38:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f003 021f 	and.w	r2, r3, #31
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	2102      	movs	r1, #2
 8003e50:	fa01 f202 	lsl.w	r2, r1, r2
 8003e54:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d038      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e6e:	e033      	b.n	8003ed8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2208      	movs	r2, #8
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d02a      	beq.n	8003eda <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d025      	beq.n	8003eda <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 020e 	bic.w	r2, r2, #14
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f003 021f 	and.w	r2, r3, #31
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2101      	movs	r1, #1
 8003eac:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
}
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b085      	sub	sp, #20
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ef8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f0a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	2101      	movs	r1, #1
 8003f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f1e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d108      	bne.n	8003f42 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f40:	e007      	b.n	8003f52 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	60da      	str	r2, [r3, #12]
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b16      	ldr	r3, [pc, #88]	; (8003fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d802      	bhi.n	8003f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e001      	b.n	8003f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f7c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	3b08      	subs	r3, #8
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	009a      	lsls	r2, r3, #2
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a0b      	ldr	r2, [pc, #44]	; (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003faa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40020407 	.word	0x40020407
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	40020820 	.word	0x40020820
 8003fd4:	cccccccd 	.word	0xcccccccd
 8003fd8:	40020880 	.word	0x40020880

08003fdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a08      	ldr	r2, [pc, #32]	; (8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ffe:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3b01      	subs	r3, #1
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2201      	movs	r2, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	1000823f 	.word	0x1000823f
 8004020:	40020940 	.word	0x40020940

08004024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004032:	e15a      	b.n	80042ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2101      	movs	r1, #1
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	4013      	ands	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 814c 	beq.w	80042e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d00b      	beq.n	800406c <HAL_GPIO_Init+0x48>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d007      	beq.n	800406c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004060:	2b11      	cmp	r3, #17
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b12      	cmp	r3, #18
 800406a:	d130      	bne.n	80040ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	2203      	movs	r2, #3
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040a2:	2201      	movs	r2, #1
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f003 0201 	and.w	r2, r3, #1
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2203      	movs	r2, #3
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0xea>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b12      	cmp	r3, #18
 800410c:	d123      	bne.n	8004156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	08da      	lsrs	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3208      	adds	r2, #8
 8004116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	220f      	movs	r2, #15
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	08da      	lsrs	r2, r3, #3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3208      	adds	r2, #8
 8004150:	6939      	ldr	r1, [r7, #16]
 8004152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	2203      	movs	r2, #3
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4013      	ands	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f003 0203 	and.w	r2, r3, #3
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80a6 	beq.w	80042e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004198:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <HAL_GPIO_Init+0x2e4>)
 800419a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419c:	4a5a      	ldr	r2, [pc, #360]	; (8004308 <HAL_GPIO_Init+0x2e4>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	6613      	str	r3, [r2, #96]	; 0x60
 80041a4:	4b58      	ldr	r3, [pc, #352]	; (8004308 <HAL_GPIO_Init+0x2e4>)
 80041a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041b0:	4a56      	ldr	r2, [pc, #344]	; (800430c <HAL_GPIO_Init+0x2e8>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	3302      	adds	r3, #2
 80041b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	220f      	movs	r2, #15
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4013      	ands	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041da:	d01f      	beq.n	800421c <HAL_GPIO_Init+0x1f8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a4c      	ldr	r2, [pc, #304]	; (8004310 <HAL_GPIO_Init+0x2ec>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d019      	beq.n	8004218 <HAL_GPIO_Init+0x1f4>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a4b      	ldr	r2, [pc, #300]	; (8004314 <HAL_GPIO_Init+0x2f0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <HAL_GPIO_Init+0x1f0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a4a      	ldr	r2, [pc, #296]	; (8004318 <HAL_GPIO_Init+0x2f4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00d      	beq.n	8004210 <HAL_GPIO_Init+0x1ec>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a49      	ldr	r2, [pc, #292]	; (800431c <HAL_GPIO_Init+0x2f8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <HAL_GPIO_Init+0x1e8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a48      	ldr	r2, [pc, #288]	; (8004320 <HAL_GPIO_Init+0x2fc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <HAL_GPIO_Init+0x1e4>
 8004204:	2305      	movs	r3, #5
 8004206:	e00a      	b.n	800421e <HAL_GPIO_Init+0x1fa>
 8004208:	2306      	movs	r3, #6
 800420a:	e008      	b.n	800421e <HAL_GPIO_Init+0x1fa>
 800420c:	2304      	movs	r3, #4
 800420e:	e006      	b.n	800421e <HAL_GPIO_Init+0x1fa>
 8004210:	2303      	movs	r3, #3
 8004212:	e004      	b.n	800421e <HAL_GPIO_Init+0x1fa>
 8004214:	2302      	movs	r3, #2
 8004216:	e002      	b.n	800421e <HAL_GPIO_Init+0x1fa>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_GPIO_Init+0x1fa>
 800421c:	2300      	movs	r3, #0
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	f002 0203 	and.w	r2, r2, #3
 8004224:	0092      	lsls	r2, r2, #2
 8004226:	4093      	lsls	r3, r2
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800422e:	4937      	ldr	r1, [pc, #220]	; (800430c <HAL_GPIO_Init+0x2e8>)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	089b      	lsrs	r3, r3, #2
 8004234:	3302      	adds	r3, #2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800423c:	4b39      	ldr	r3, [pc, #228]	; (8004324 <HAL_GPIO_Init+0x300>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	43db      	mvns	r3, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4013      	ands	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004260:	4a30      	ldr	r2, [pc, #192]	; (8004324 <HAL_GPIO_Init+0x300>)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004266:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <HAL_GPIO_Init+0x300>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	43db      	mvns	r3, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800428a:	4a26      	ldr	r2, [pc, #152]	; (8004324 <HAL_GPIO_Init+0x300>)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004290:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_GPIO_Init+0x300>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	43db      	mvns	r3, r3
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042b4:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <HAL_GPIO_Init+0x300>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042ba:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_GPIO_Init+0x300>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042de:	4a11      	ldr	r2, [pc, #68]	; (8004324 <HAL_GPIO_Init+0x300>)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3301      	adds	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f47f ae9d 	bne.w	8004034 <HAL_GPIO_Init+0x10>
  }
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	40010000 	.word	0x40010000
 8004310:	48000400 	.word	0x48000400
 8004314:	48000800 	.word	0x48000800
 8004318:	48000c00 	.word	0x48000c00
 800431c:	48001000 	.word	0x48001000
 8004320:	48001400 	.word	0x48001400
 8004324:	40010400 	.word	0x40010400

08004328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
 8004334:	4613      	mov	r3, r2
 8004336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004338:	787b      	ldrb	r3, [r7, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004344:	e002      	b.n	800434c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4013      	ands	r3, r2
 8004370:	041a      	lsls	r2, r3, #16
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43d9      	mvns	r1, r3
 8004376:	887b      	ldrh	r3, [r7, #2]
 8004378:	400b      	ands	r3, r1
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	619a      	str	r2, [r3, #24]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d141      	bne.n	800441e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800439a:	4b4b      	ldr	r3, [pc, #300]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a6:	d131      	bne.n	800440c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a8:	4b47      	ldr	r3, [pc, #284]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ae:	4a46      	ldr	r2, [pc, #280]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b8:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043c0:	4a41      	ldr	r2, [pc, #260]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043c8:	4b40      	ldr	r3, [pc, #256]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2232      	movs	r2, #50	; 0x32
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	4a3f      	ldr	r2, [pc, #252]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	0c9b      	lsrs	r3, r3, #18
 80043da:	3301      	adds	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043de:	e002      	b.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e6:	4b38      	ldr	r3, [pc, #224]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f2:	d102      	bne.n	80043fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f2      	bne.n	80043e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043fa:	4b33      	ldr	r3, [pc, #204]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d158      	bne.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e057      	b.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800440c:	4b2e      	ldr	r3, [pc, #184]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004412:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800441c:	e04d      	b.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	d141      	bne.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004426:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004432:	d131      	bne.n	8004498 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443a:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004440:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004444:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800444c:	4a1e      	ldr	r2, [pc, #120]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004452:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004454:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2232      	movs	r2, #50	; 0x32
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	4a1c      	ldr	r2, [pc, #112]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	0c9b      	lsrs	r3, r3, #18
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800446a:	e002      	b.n	8004472 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3b01      	subs	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447e:	d102      	bne.n	8004486 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f2      	bne.n	800446c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004492:	d112      	bne.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e011      	b.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044a8:	e007      	b.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40007000 	.word	0x40007000
 80044cc:	20000000 	.word	0x20000000
 80044d0:	431bde83 	.word	0x431bde83

080044d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e2:	6093      	str	r3, [r2, #8]
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40007000 	.word	0x40007000

080044f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e308      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d075      	beq.n	80045fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004512:	4ba3      	ldr	r3, [pc, #652]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800451c:	4ba0      	ldr	r3, [pc, #640]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d102      	bne.n	8004532 <HAL_RCC_OscConfig+0x3e>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d002      	beq.n	8004538 <HAL_RCC_OscConfig+0x44>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d10b      	bne.n	8004550 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	4b99      	ldr	r3, [pc, #612]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d05b      	beq.n	80045fc <HAL_RCC_OscConfig+0x108>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d157      	bne.n	80045fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e2e3      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004558:	d106      	bne.n	8004568 <HAL_RCC_OscConfig+0x74>
 800455a:	4b91      	ldr	r3, [pc, #580]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a90      	ldr	r2, [pc, #576]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e01d      	b.n	80045a4 <HAL_RCC_OscConfig+0xb0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004570:	d10c      	bne.n	800458c <HAL_RCC_OscConfig+0x98>
 8004572:	4b8b      	ldr	r3, [pc, #556]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a8a      	ldr	r2, [pc, #552]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a87      	ldr	r2, [pc, #540]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e00b      	b.n	80045a4 <HAL_RCC_OscConfig+0xb0>
 800458c:	4b84      	ldr	r3, [pc, #528]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a83      	ldr	r2, [pc, #524]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	4b81      	ldr	r3, [pc, #516]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a80      	ldr	r2, [pc, #512]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800459e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d013      	beq.n	80045d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd fd84 	bl	80020b8 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fd fd80 	bl	80020b8 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	; 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e2a8      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c6:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0xc0>
 80045d2:	e014      	b.n	80045fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd fd70 	bl	80020b8 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045dc:	f7fd fd6c 	bl	80020b8 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b64      	cmp	r3, #100	; 0x64
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e294      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ee:	4b6c      	ldr	r3, [pc, #432]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0xe8>
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d075      	beq.n	80046f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460a:	4b65      	ldr	r3, [pc, #404]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004614:	4b62      	ldr	r3, [pc, #392]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b0c      	cmp	r3, #12
 8004622:	d102      	bne.n	800462a <HAL_RCC_OscConfig+0x136>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d002      	beq.n	8004630 <HAL_RCC_OscConfig+0x13c>
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d11f      	bne.n	8004670 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004630:	4b5b      	ldr	r3, [pc, #364]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_RCC_OscConfig+0x154>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e267      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004648:	4b55      	ldr	r3, [pc, #340]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	4952      	ldr	r1, [pc, #328]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800465c:	4b51      	ldr	r3, [pc, #324]	; (80047a4 <HAL_RCC_OscConfig+0x2b0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7fd fcdd 	bl	8002020 <HAL_InitTick>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d043      	beq.n	80046f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e253      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d023      	beq.n	80046c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004678:	4b49      	ldr	r3, [pc, #292]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a48      	ldr	r2, [pc, #288]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800467e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fd fd18 	bl	80020b8 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468c:	f7fd fd14 	bl	80020b8 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e23c      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800469e:	4b40      	ldr	r3, [pc, #256]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046aa:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	061b      	lsls	r3, r3, #24
 80046b8:	4939      	ldr	r1, [pc, #228]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	604b      	str	r3, [r1, #4]
 80046be:	e01a      	b.n	80046f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c0:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a36      	ldr	r2, [pc, #216]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 80046c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fd fcf4 	bl	80020b8 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fd fcf0 	bl	80020b8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e218      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e6:	4b2e      	ldr	r3, [pc, #184]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1e0>
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d03c      	beq.n	800477c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01c      	beq.n	8004744 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470a:	4b25      	ldr	r3, [pc, #148]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004710:	4a23      	ldr	r2, [pc, #140]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd fccd 	bl	80020b8 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004722:	f7fd fcc9 	bl	80020b8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e1f1      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004734:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0ef      	beq.n	8004722 <HAL_RCC_OscConfig+0x22e>
 8004742:	e01b      	b.n	800477c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004744:	4b16      	ldr	r3, [pc, #88]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474a:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fd fcb0 	bl	80020b8 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475c:	f7fd fcac 	bl	80020b8 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e1d4      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1ef      	bne.n	800475c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80ab 	beq.w	80048e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478a:	2300      	movs	r3, #0
 800478c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800478e:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <HAL_RCC_OscConfig+0x2ac>)
 8004790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_RCC_OscConfig+0x2b4>
 800479a:	2301      	movs	r3, #1
 800479c:	e005      	b.n	80047aa <HAL_RCC_OscConfig+0x2b6>
 800479e:	bf00      	nop
 80047a0:	40021000 	.word	0x40021000
 80047a4:	20000004 	.word	0x20000004
 80047a8:	2300      	movs	r3, #0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00d      	beq.n	80047ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	4baf      	ldr	r3, [pc, #700]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	4aae      	ldr	r2, [pc, #696]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80047b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6593      	str	r3, [r2, #88]	; 0x58
 80047ba:	4bac      	ldr	r3, [pc, #688]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ca:	4ba9      	ldr	r3, [pc, #676]	; (8004a70 <HAL_RCC_OscConfig+0x57c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d118      	bne.n	8004808 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d6:	4ba6      	ldr	r3, [pc, #664]	; (8004a70 <HAL_RCC_OscConfig+0x57c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4aa5      	ldr	r2, [pc, #660]	; (8004a70 <HAL_RCC_OscConfig+0x57c>)
 80047dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e2:	f7fd fc69 	bl	80020b8 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ea:	f7fd fc65 	bl	80020b8 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e18d      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fc:	4b9c      	ldr	r3, [pc, #624]	; (8004a70 <HAL_RCC_OscConfig+0x57c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d108      	bne.n	8004822 <HAL_RCC_OscConfig+0x32e>
 8004810:	4b96      	ldr	r3, [pc, #600]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	4a95      	ldr	r2, [pc, #596]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004820:	e024      	b.n	800486c <HAL_RCC_OscConfig+0x378>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b05      	cmp	r3, #5
 8004828:	d110      	bne.n	800484c <HAL_RCC_OscConfig+0x358>
 800482a:	4b90      	ldr	r3, [pc, #576]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	4a8e      	ldr	r2, [pc, #568]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483a:	4b8c      	ldr	r3, [pc, #560]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	4a8a      	ldr	r2, [pc, #552]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484a:	e00f      	b.n	800486c <HAL_RCC_OscConfig+0x378>
 800484c:	4b87      	ldr	r3, [pc, #540]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	4a86      	ldr	r2, [pc, #536]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800485c:	4b83      	ldr	r3, [pc, #524]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	4a82      	ldr	r2, [pc, #520]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004864:	f023 0304 	bic.w	r3, r3, #4
 8004868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d016      	beq.n	80048a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fd fc20 	bl	80020b8 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487a:	e00a      	b.n	8004892 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487c:	f7fd fc1c 	bl	80020b8 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e142      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004892:	4b76      	ldr	r3, [pc, #472]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ed      	beq.n	800487c <HAL_RCC_OscConfig+0x388>
 80048a0:	e015      	b.n	80048ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fd fc09 	bl	80020b8 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fd fc05 	bl	80020b8 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e12b      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c0:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1ed      	bne.n	80048aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048ce:	7ffb      	ldrb	r3, [r7, #31]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d105      	bne.n	80048e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d4:	4b65      	ldr	r3, [pc, #404]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	4a64      	ldr	r2, [pc, #400]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80048da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d03c      	beq.n	8004966 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01c      	beq.n	800492e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048f4:	4b5d      	ldr	r3, [pc, #372]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80048f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048fa:	4a5c      	ldr	r2, [pc, #368]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fd fbd8 	bl	80020b8 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800490c:	f7fd fbd4 	bl	80020b8 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0fc      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800491e:	4b53      	ldr	r3, [pc, #332]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ef      	beq.n	800490c <HAL_RCC_OscConfig+0x418>
 800492c:	e01b      	b.n	8004966 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800492e:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004934:	4a4d      	ldr	r2, [pc, #308]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493e:	f7fd fbbb 	bl	80020b8 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004946:	f7fd fbb7 	bl	80020b8 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e0df      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004958:	4b44      	ldr	r3, [pc, #272]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 800495a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ef      	bne.n	8004946 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80d3 	beq.w	8004b16 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004970:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b0c      	cmp	r3, #12
 800497a:	f000 808d 	beq.w	8004a98 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d15a      	bne.n	8004a3c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004986:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a38      	ldr	r2, [pc, #224]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 800498c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fd fb91 	bl	80020b8 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499a:	f7fd fb8d 	bl	80020b8 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e0b5      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ac:	4b2f      	ldr	r3, [pc, #188]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f0      	bne.n	800499a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b8:	4b2c      	ldr	r3, [pc, #176]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	4b2d      	ldr	r3, [pc, #180]	; (8004a74 <HAL_RCC_OscConfig+0x580>)
 80049be:	4013      	ands	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6a11      	ldr	r1, [r2, #32]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c8:	3a01      	subs	r2, #1
 80049ca:	0112      	lsls	r2, r2, #4
 80049cc:	4311      	orrs	r1, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80049d2:	0212      	lsls	r2, r2, #8
 80049d4:	4311      	orrs	r1, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049da:	0852      	lsrs	r2, r2, #1
 80049dc:	3a01      	subs	r2, #1
 80049de:	0552      	lsls	r2, r2, #21
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049e6:	0852      	lsrs	r2, r2, #1
 80049e8:	3a01      	subs	r2, #1
 80049ea:	0652      	lsls	r2, r2, #25
 80049ec:	4311      	orrs	r1, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049f2:	06d2      	lsls	r2, r2, #27
 80049f4:	430a      	orrs	r2, r1
 80049f6:	491d      	ldr	r1, [pc, #116]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1a      	ldr	r2, [pc, #104]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a08:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fd fb50 	bl	80020b8 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fd fb4c 	bl	80020b8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e074      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x528>
 8004a3a:	e06c      	b.n	8004b16 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a46:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <HAL_RCC_OscConfig+0x578>)
 8004a5a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fd fb28 	bl	80020b8 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a6a:	e00e      	b.n	8004a8a <HAL_RCC_OscConfig+0x596>
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40007000 	.word	0x40007000
 8004a74:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fd fb1e 	bl	80020b8 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e046      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a8a:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <HAL_RCC_OscConfig+0x62c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x584>
 8004a96:	e03e      	b.n	8004b16 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e039      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <HAL_RCC_OscConfig+0x62c>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0203 	and.w	r2, r3, #3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d12c      	bne.n	8004b12 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d123      	bne.n	8004b12 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d11b      	bne.n	8004b12 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d113      	bne.n	8004b12 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	3b01      	subs	r3, #1
 8004af8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d001      	beq.n	8004b16 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40021000 	.word	0x40021000

08004b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e11e      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b91      	ldr	r3, [pc, #580]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d910      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b8e      	ldr	r3, [pc, #568]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 020f 	bic.w	r2, r3, #15
 8004b52:	498c      	ldr	r1, [pc, #560]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b8a      	ldr	r3, [pc, #552]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e106      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d073      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d129      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b80:	4b81      	ldr	r3, [pc, #516]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0f4      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b90:	f000 f99e 	bl	8004ed0 <RCC_GetSysClockFreqFromPLLSource>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4a7c      	ldr	r2, [pc, #496]	; (8004d8c <HAL_RCC_ClockConfig+0x268>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d93f      	bls.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d033      	beq.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d12f      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bbe:	4b72      	ldr	r3, [pc, #456]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc6:	4a70      	ldr	r2, [pc, #448]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bcc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e024      	b.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d107      	bne.n	8004bec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bdc:	4b6a      	ldr	r3, [pc, #424]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0c6      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bec:	4b66      	ldr	r3, [pc, #408]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0be      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004bfc:	f000 f8ce 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4a61      	ldr	r2, [pc, #388]	; (8004d8c <HAL_RCC_ClockConfig+0x268>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d909      	bls.n	8004c1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c0a:	4b5f      	ldr	r3, [pc, #380]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c12:	4a5d      	ldr	r2, [pc, #372]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c1e:	4b5a      	ldr	r3, [pc, #360]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f023 0203 	bic.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4957      	ldr	r1, [pc, #348]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c30:	f7fd fa42 	bl	80020b8 <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c38:	f7fd fa3e 	bl	80020b8 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e095      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	4b4e      	ldr	r3, [pc, #312]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 020c 	and.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d1eb      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d023      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c78:	4b43      	ldr	r3, [pc, #268]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a42      	ldr	r2, [pc, #264]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c90:	4b3d      	ldr	r3, [pc, #244]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c98:	4a3b      	ldr	r2, [pc, #236]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004c9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca0:	4b39      	ldr	r3, [pc, #228]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4936      	ldr	r1, [pc, #216]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	608b      	str	r3, [r1, #8]
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b80      	cmp	r3, #128	; 0x80
 8004cb8:	d105      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cba:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4a32      	ldr	r2, [pc, #200]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d21d      	bcs.n	8004d10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd4:	4b2b      	ldr	r3, [pc, #172]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f023 020f 	bic.w	r2, r3, #15
 8004cdc:	4929      	ldr	r1, [pc, #164]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ce4:	f7fd f9e8 	bl	80020b8 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7fd f9e4 	bl	80020b8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e03b      	b.n	8004d7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1ed      	bne.n	8004cec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4917      	ldr	r1, [pc, #92]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	490f      	ldr	r1, [pc, #60]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d4e:	f000 f825 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004d52:	4601      	mov	r1, r0
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <HAL_RCC_ClockConfig+0x264>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <HAL_RCC_ClockConfig+0x26c>)
 8004d60:	5cd3      	ldrb	r3, [r2, r3]
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	fa21 f303 	lsr.w	r3, r1, r3
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <HAL_RCC_ClockConfig+0x270>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <HAL_RCC_ClockConfig+0x274>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fd f954 	bl	8002020 <HAL_InitTick>
 8004d78:	4603      	mov	r3, r0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40022000 	.word	0x40022000
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	04c4b400 	.word	0x04c4b400
 8004d90:	0800a8a8 	.word	0x0800a8a8
 8004d94:	20000000 	.word	0x20000000
 8004d98:	20000004 	.word	0x20000004

08004d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004da2:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d102      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dae:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e047      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc0:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e03e      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dc6:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b0c      	cmp	r3, #12
 8004dd0:	d136      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dd2:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	3301      	adds	r3, #1
 8004de8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d10c      	bne.n	8004e0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df0:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dfa:	68d2      	ldr	r2, [r2, #12]
 8004dfc:	0a12      	lsrs	r2, r2, #8
 8004dfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	617b      	str	r3, [r7, #20]
      break;
 8004e08:	e00c      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e0a:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e14:	68d2      	ldr	r2, [r2, #12]
 8004e16:	0a12      	lsrs	r2, r2, #8
 8004e18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
      break;
 8004e22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0e5b      	lsrs	r3, r3, #25
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e001      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e44:	693b      	ldr	r3, [r7, #16]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	00f42400 	.word	0x00f42400
 8004e5c:	007a1200 	.word	0x007a1200

08004e60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e64:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000000 	.word	0x20000000

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e7c:	f7ff fff0 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004e80:	4601      	mov	r1, r0
 8004e82:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e8e:	5cd3      	ldrb	r3, [r2, r3]
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	0800a8b8 	.word	0x0800a8b8

08004ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ea8:	f7ff ffda 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004eac:	4601      	mov	r1, r0
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	0adb      	lsrs	r3, r3, #11
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eba:	5cd3      	ldrb	r3, [r2, r3]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	0800a8b8 	.word	0x0800a8b8

08004ed0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ed6:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d10c      	bne.n	8004f0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ef4:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	4a14      	ldr	r2, [pc, #80]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004efe:	68d2      	ldr	r2, [r2, #12]
 8004f00:	0a12      	lsrs	r2, r2, #8
 8004f02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	617b      	str	r3, [r7, #20]
    break;
 8004f0c:	e00c      	b.n	8004f28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f0e:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	4a0e      	ldr	r2, [pc, #56]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f18:	68d2      	ldr	r2, [r2, #12]
 8004f1a:	0a12      	lsrs	r2, r2, #8
 8004f1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
    break;
 8004f26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	0e5b      	lsrs	r3, r3, #25
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f42:	687b      	ldr	r3, [r7, #4]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40021000 	.word	0x40021000
 8004f54:	007a1200 	.word	0x007a1200
 8004f58:	00f42400 	.word	0x00f42400

08004f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f64:	2300      	movs	r3, #0
 8004f66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8098 	beq.w	80050aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7e:	4b43      	ldr	r3, [pc, #268]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10d      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8a:	4b40      	ldr	r3, [pc, #256]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	4a3f      	ldr	r2, [pc, #252]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6593      	str	r3, [r2, #88]	; 0x58
 8004f96:	4b3d      	ldr	r3, [pc, #244]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa6:	4b3a      	ldr	r3, [pc, #232]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a39      	ldr	r2, [pc, #228]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb2:	f7fd f881 	bl	80020b8 <HAL_GetTick>
 8004fb6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb8:	e009      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fba:	f7fd f87d 	bl	80020b8 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d902      	bls.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	74fb      	strb	r3, [r7, #19]
        break;
 8004fcc:	e005      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fce:	4b30      	ldr	r3, [pc, #192]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0ef      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d159      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fe0:	4b2a      	ldr	r3, [pc, #168]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01e      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d019      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ffc:	4b23      	ldr	r3, [pc, #140]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005006:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005008:	4b20      	ldr	r3, [pc, #128]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	4a1f      	ldr	r2, [pc, #124]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005018:	4b1c      	ldr	r3, [pc, #112]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	4a1b      	ldr	r2, [pc, #108]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005028:	4a18      	ldr	r2, [pc, #96]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fd f83d 	bl	80020b8 <HAL_GetTick>
 800503e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005040:	e00b      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fd f839 	bl	80020b8 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d902      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	74fb      	strb	r3, [r7, #19]
            break;
 8005058:	e006      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0ec      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800506e:	4b07      	ldr	r3, [pc, #28]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	4903      	ldr	r1, [pc, #12]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005084:	e008      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005086:	7cfb      	ldrb	r3, [r7, #19]
 8005088:	74bb      	strb	r3, [r7, #18]
 800508a:	e005      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800508c:	40021000 	.word	0x40021000
 8005090:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005094:	7cfb      	ldrb	r3, [r7, #19]
 8005096:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005098:	7c7b      	ldrb	r3, [r7, #17]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d105      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509e:	4ba6      	ldr	r3, [pc, #664]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a2:	4aa5      	ldr	r2, [pc, #660]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050b6:	4ba0      	ldr	r3, [pc, #640]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	f023 0203 	bic.w	r2, r3, #3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	499c      	ldr	r1, [pc, #624]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050d8:	4b97      	ldr	r3, [pc, #604]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f023 020c 	bic.w	r2, r3, #12
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	4994      	ldr	r1, [pc, #592]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050fa:	4b8f      	ldr	r3, [pc, #572]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	498b      	ldr	r1, [pc, #556]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800511c:	4b86      	ldr	r3, [pc, #536]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	4983      	ldr	r1, [pc, #524]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800513e:	4b7e      	ldr	r3, [pc, #504]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	497a      	ldr	r1, [pc, #488]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005160:	4b75      	ldr	r3, [pc, #468]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005166:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	4972      	ldr	r1, [pc, #456]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005182:	4b6d      	ldr	r3, [pc, #436]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005188:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	4969      	ldr	r1, [pc, #420]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051a4:	4b64      	ldr	r3, [pc, #400]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	4961      	ldr	r1, [pc, #388]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051c6:	4b5c      	ldr	r3, [pc, #368]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	4958      	ldr	r1, [pc, #352]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051e8:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	4950      	ldr	r1, [pc, #320]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005206:	d105      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005208:	4b4b      	ldr	r3, [pc, #300]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a4a      	ldr	r2, [pc, #296]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005212:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521c:	2b00      	cmp	r3, #0
 800521e:	d015      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005220:	4b45      	ldr	r3, [pc, #276]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	4942      	ldr	r1, [pc, #264]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005240:	4b3d      	ldr	r3, [pc, #244]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a3c      	ldr	r2, [pc, #240]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800524a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005258:	4b37      	ldr	r3, [pc, #220]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	4934      	ldr	r1, [pc, #208]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005276:	d105      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005278:	4b2f      	ldr	r3, [pc, #188]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a2e      	ldr	r2, [pc, #184]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005282:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d015      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005290:	4b29      	ldr	r3, [pc, #164]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529e:	4926      	ldr	r1, [pc, #152]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ae:	d105      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052b0:	4b21      	ldr	r3, [pc, #132]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a20      	ldr	r2, [pc, #128]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d015      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052c8:	4b1b      	ldr	r3, [pc, #108]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	4918      	ldr	r1, [pc, #96]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e6:	d105      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e8:	4b13      	ldr	r3, [pc, #76]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4a12      	ldr	r2, [pc, #72]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d015      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005300:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	490a      	ldr	r1, [pc, #40]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800531e:	d105      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800532c:	7cbb      	ldrb	r3, [r7, #18]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000

0800533c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e049      	b.n	80053e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fc fcb2 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f000 fcf6 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d001      	beq.n	8005404 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e042      	b.n	800548a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a21      	ldr	r2, [pc, #132]	; (8005498 <HAL_TIM_Base_Start+0xac>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <HAL_TIM_Base_Start+0x5c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d013      	beq.n	8005448 <HAL_TIM_Base_Start+0x5c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1d      	ldr	r2, [pc, #116]	; (800549c <HAL_TIM_Base_Start+0xb0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_TIM_Base_Start+0x5c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <HAL_TIM_Base_Start+0xb4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_TIM_Base_Start+0x5c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <HAL_TIM_Base_Start+0xb8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_TIM_Base_Start+0x5c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a19      	ldr	r2, [pc, #100]	; (80054a8 <HAL_TIM_Base_Start+0xbc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d115      	bne.n	8005474 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	4b17      	ldr	r3, [pc, #92]	; (80054ac <HAL_TIM_Base_Start+0xc0>)
 8005450:	4013      	ands	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b06      	cmp	r3, #6
 8005458:	d015      	beq.n	8005486 <HAL_TIM_Base_Start+0x9a>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	d011      	beq.n	8005486 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0201 	orr.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	e008      	b.n	8005486 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	e000      	b.n	8005488 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005486:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	00010007 	.word	0x00010007

080054b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d001      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e04a      	b.n	800555e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a21      	ldr	r2, [pc, #132]	; (800556c <HAL_TIM_Base_Start_IT+0xbc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d018      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x6c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f2:	d013      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x6c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <HAL_TIM_Base_Start_IT+0xc0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00e      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x6c>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <HAL_TIM_Base_Start_IT+0xc4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d009      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x6c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1a      	ldr	r2, [pc, #104]	; (8005578 <HAL_TIM_Base_Start_IT+0xc8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x6c>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a19      	ldr	r2, [pc, #100]	; (800557c <HAL_TIM_Base_Start_IT+0xcc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d115      	bne.n	8005548 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	4b17      	ldr	r3, [pc, #92]	; (8005580 <HAL_TIM_Base_Start_IT+0xd0>)
 8005524:	4013      	ands	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b06      	cmp	r3, #6
 800552c:	d015      	beq.n	800555a <HAL_TIM_Base_Start_IT+0xaa>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005534:	d011      	beq.n	800555a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	e008      	b.n	800555a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e000      	b.n	800555c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40000400 	.word	0x40000400
 8005574:	40000800 	.word	0x40000800
 8005578:	40013400 	.word	0x40013400
 800557c:	40014000 	.word	0x40014000
 8005580:	00010007 	.word	0x00010007

08005584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e049      	b.n	800562a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f841 	bl	8005632 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f000 fbd2 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b02      	cmp	r3, #2
 800565a:	d122      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d11b      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f06f 0202 	mvn.w	r2, #2
 8005672:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fb51 	bl	8005d30 <HAL_TIM_IC_CaptureCallback>
 800568e:	e005      	b.n	800569c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb43 	bl	8005d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fb54 	bl	8005d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d122      	bne.n	80056f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d11b      	bne.n	80056f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0204 	mvn.w	r2, #4
 80056c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fb27 	bl	8005d30 <HAL_TIM_IC_CaptureCallback>
 80056e2:	e005      	b.n	80056f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fb19 	bl	8005d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fb2a 	bl	8005d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b08      	cmp	r3, #8
 8005702:	d122      	bne.n	800574a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b08      	cmp	r3, #8
 8005710:	d11b      	bne.n	800574a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f06f 0208 	mvn.w	r2, #8
 800571a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2204      	movs	r2, #4
 8005720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fafd 	bl	8005d30 <HAL_TIM_IC_CaptureCallback>
 8005736:	e005      	b.n	8005744 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 faef 	bl	8005d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fb00 	bl	8005d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b10      	cmp	r3, #16
 8005756:	d122      	bne.n	800579e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b10      	cmp	r3, #16
 8005764:	d11b      	bne.n	800579e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f06f 0210 	mvn.w	r2, #16
 800576e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2208      	movs	r2, #8
 8005774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fad3 	bl	8005d30 <HAL_TIM_IC_CaptureCallback>
 800578a:	e005      	b.n	8005798 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fac5 	bl	8005d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fad6 	bl	8005d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d10e      	bne.n	80057ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d107      	bne.n	80057ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f06f 0201 	mvn.w	r2, #1
 80057c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fa9f 	bl	8005d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d4:	2b80      	cmp	r3, #128	; 0x80
 80057d6:	d10e      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d107      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 f81c 	bl	800682e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005810:	2b80      	cmp	r3, #128	; 0x80
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f001 f80f 	bl	8006842 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d10e      	bne.n	8005850 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d107      	bne.n	8005850 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa84 	bl	8005d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b20      	cmp	r3, #32
 800585c:	d10e      	bne.n	800587c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b20      	cmp	r3, #32
 800586a:	d107      	bne.n	800587c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0220 	mvn.w	r2, #32
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 ffcf 	bl	800681a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800588a:	d10f      	bne.n	80058ac <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589a:	d107      	bne.n	80058ac <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 ffd5 	bl	8006856 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058ba:	d10f      	bne.n	80058dc <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058ca:	d107      	bne.n	80058dc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 ffc7 	bl	800686a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ea:	d10f      	bne.n	800590c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058fa:	d107      	bne.n	800590c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 ffb9 	bl	800687e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800591a:	d10f      	bne.n	800593c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800592a:	d107      	bne.n	800593c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 ffab 	bl	8006892 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800595a:	2302      	movs	r3, #2
 800595c:	e0fd      	b.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x216>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b14      	cmp	r3, #20
 800596a:	f200 80f0 	bhi.w	8005b4e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800596e:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	080059c9 	.word	0x080059c9
 8005978:	08005b4f 	.word	0x08005b4f
 800597c:	08005b4f 	.word	0x08005b4f
 8005980:	08005b4f 	.word	0x08005b4f
 8005984:	08005a09 	.word	0x08005a09
 8005988:	08005b4f 	.word	0x08005b4f
 800598c:	08005b4f 	.word	0x08005b4f
 8005990:	08005b4f 	.word	0x08005b4f
 8005994:	08005a4b 	.word	0x08005a4b
 8005998:	08005b4f 	.word	0x08005b4f
 800599c:	08005b4f 	.word	0x08005b4f
 80059a0:	08005b4f 	.word	0x08005b4f
 80059a4:	08005a8b 	.word	0x08005a8b
 80059a8:	08005b4f 	.word	0x08005b4f
 80059ac:	08005b4f 	.word	0x08005b4f
 80059b0:	08005b4f 	.word	0x08005b4f
 80059b4:	08005acd 	.word	0x08005acd
 80059b8:	08005b4f 	.word	0x08005b4f
 80059bc:	08005b4f 	.word	0x08005b4f
 80059c0:	08005b4f 	.word	0x08005b4f
 80059c4:	08005b0d 	.word	0x08005b0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68b9      	ldr	r1, [r7, #8]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fa5c 	bl	8005e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0208 	orr.w	r2, r2, #8
 80059e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0204 	bic.w	r2, r2, #4
 80059f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6999      	ldr	r1, [r3, #24]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	619a      	str	r2, [r3, #24]
      break;
 8005a06:	e0a3      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 facc 	bl	8005fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6999      	ldr	r1, [r3, #24]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	021a      	lsls	r2, r3, #8
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	619a      	str	r2, [r3, #24]
      break;
 8005a48:	e082      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fb35 	bl	80060c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0208 	orr.w	r2, r2, #8
 8005a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0204 	bic.w	r2, r2, #4
 8005a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69d9      	ldr	r1, [r3, #28]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	61da      	str	r2, [r3, #28]
      break;
 8005a88:	e062      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fb9d 	bl	80061d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69d9      	ldr	r1, [r3, #28]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	021a      	lsls	r2, r3, #8
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	61da      	str	r2, [r3, #28]
      break;
 8005aca:	e041      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fc06 	bl	80062e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0208 	orr.w	r2, r2, #8
 8005ae6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0204 	bic.w	r2, r2, #4
 8005af6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005b0a:	e021      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fc4a 	bl	80063ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b36:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	021a      	lsls	r2, r3, #8
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005b4c:	e000      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005b4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop

08005b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_TIM_ConfigClockSource+0x18>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e0b9      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x18c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ba6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b70      	cmp	r3, #112	; 0x70
 8005bb6:	d02e      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0xb2>
 8005bb8:	2b70      	cmp	r3, #112	; 0x70
 8005bba:	d812      	bhi.n	8005be2 <HAL_TIM_ConfigClockSource+0x7e>
 8005bbc:	2b30      	cmp	r3, #48	; 0x30
 8005bbe:	f000 8084 	beq.w	8005cca <HAL_TIM_ConfigClockSource+0x166>
 8005bc2:	2b30      	cmp	r3, #48	; 0x30
 8005bc4:	d806      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x70>
 8005bc6:	2b10      	cmp	r3, #16
 8005bc8:	d07f      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x166>
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d07d      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x166>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d07b      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005bd2:	e084      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8005bd4:	2b50      	cmp	r3, #80	; 0x50
 8005bd6:	d048      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x106>
 8005bd8:	2b60      	cmp	r3, #96	; 0x60
 8005bda:	d056      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0x126>
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d064      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x146>
      break;
 8005be0:	e07d      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8005be2:	4a45      	ldr	r2, [pc, #276]	; (8005cf8 <HAL_TIM_ConfigClockSource+0x194>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d070      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x166>
 8005be8:	4a43      	ldr	r2, [pc, #268]	; (8005cf8 <HAL_TIM_ConfigClockSource+0x194>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d809      	bhi.n	8005c02 <HAL_TIM_ConfigClockSource+0x9e>
 8005bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf2:	d027      	beq.n	8005c44 <HAL_TIM_ConfigClockSource+0xe0>
 8005bf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005bf8:	d067      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x166>
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	d06d      	beq.n	8005cdc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005c00:	e06d      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8005c02:	4a3e      	ldr	r2, [pc, #248]	; (8005cfc <HAL_TIM_ConfigClockSource+0x198>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d060      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x166>
 8005c08:	4a3d      	ldr	r2, [pc, #244]	; (8005d00 <HAL_TIM_ConfigClockSource+0x19c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d05d      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x166>
 8005c0e:	4a3d      	ldr	r2, [pc, #244]	; (8005d04 <HAL_TIM_ConfigClockSource+0x1a0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d05a      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x166>
      break;
 8005c14:	e063      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	6899      	ldr	r1, [r3, #8]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f000 fca3 	bl	8006570 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	609a      	str	r2, [r3, #8]
      break;
 8005c42:	e04c      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	6899      	ldr	r1, [r3, #8]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f000 fc8c 	bl	8006570 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c66:	609a      	str	r2, [r3, #8]
      break;
 8005c68:	e039      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6859      	ldr	r1, [r3, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f000 fbfe 	bl	8006478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2150      	movs	r1, #80	; 0x50
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fc57 	bl	8006536 <TIM_ITRx_SetConfig>
      break;
 8005c88:	e029      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6859      	ldr	r1, [r3, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f000 fc1d 	bl	80064d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2160      	movs	r1, #96	; 0x60
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fc47 	bl	8006536 <TIM_ITRx_SetConfig>
      break;
 8005ca8:	e019      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6859      	ldr	r1, [r3, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f000 fbde 	bl	8006478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2140      	movs	r1, #64	; 0x40
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fc37 	bl	8006536 <TIM_ITRx_SetConfig>
      break;
 8005cc8:	e009      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f000 fc2e 	bl	8006536 <TIM_ITRx_SetConfig>
        break;
 8005cda:	e000      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8005cdc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	00100020 	.word	0x00100020
 8005cfc:	00100040 	.word	0x00100040
 8005d00:	00100070 	.word	0x00100070
 8005d04:	00100030 	.word	0x00100030

08005d08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <TIM_Base_SetConfig+0x104>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00f      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8a:	d00b      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a39      	ldr	r2, [pc, #228]	; (8005e74 <TIM_Base_SetConfig+0x108>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a38      	ldr	r2, [pc, #224]	; (8005e78 <TIM_Base_SetConfig+0x10c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a37      	ldr	r2, [pc, #220]	; (8005e7c <TIM_Base_SetConfig+0x110>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2d      	ldr	r2, [pc, #180]	; (8005e70 <TIM_Base_SetConfig+0x104>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d01b      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d017      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <TIM_Base_SetConfig+0x108>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a29      	ldr	r2, [pc, #164]	; (8005e78 <TIM_Base_SetConfig+0x10c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00f      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a28      	ldr	r2, [pc, #160]	; (8005e7c <TIM_Base_SetConfig+0x110>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00b      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a27      	ldr	r2, [pc, #156]	; (8005e80 <TIM_Base_SetConfig+0x114>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <TIM_Base_SetConfig+0x118>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d003      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a25      	ldr	r2, [pc, #148]	; (8005e88 <TIM_Base_SetConfig+0x11c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d108      	bne.n	8005e08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a10      	ldr	r2, [pc, #64]	; (8005e70 <TIM_Base_SetConfig+0x104>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00f      	beq.n	8005e54 <TIM_Base_SetConfig+0xe8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <TIM_Base_SetConfig+0x110>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00b      	beq.n	8005e54 <TIM_Base_SetConfig+0xe8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a10      	ldr	r2, [pc, #64]	; (8005e80 <TIM_Base_SetConfig+0x114>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d007      	beq.n	8005e54 <TIM_Base_SetConfig+0xe8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a0f      	ldr	r2, [pc, #60]	; (8005e84 <TIM_Base_SetConfig+0x118>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_Base_SetConfig+0xe8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a0e      	ldr	r2, [pc, #56]	; (8005e88 <TIM_Base_SetConfig+0x11c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d103      	bne.n	8005e5c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	615a      	str	r2, [r3, #20]
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40000400 	.word	0x40000400
 8005e78:	40000800 	.word	0x40000800
 8005e7c:	40013400 	.word	0x40013400
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40014400 	.word	0x40014400
 8005e88:	40014800 	.word	0x40014800

08005e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 0302 	bic.w	r3, r3, #2
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a2c      	ldr	r2, [pc, #176]	; (8005f98 <TIM_OC1_SetConfig+0x10c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00f      	beq.n	8005f0c <TIM_OC1_SetConfig+0x80>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a2b      	ldr	r2, [pc, #172]	; (8005f9c <TIM_OC1_SetConfig+0x110>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <TIM_OC1_SetConfig+0x80>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <TIM_OC1_SetConfig+0x114>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_OC1_SetConfig+0x80>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a29      	ldr	r2, [pc, #164]	; (8005fa4 <TIM_OC1_SetConfig+0x118>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC1_SetConfig+0x80>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a28      	ldr	r2, [pc, #160]	; (8005fa8 <TIM_OC1_SetConfig+0x11c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d10c      	bne.n	8005f26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f023 0308 	bic.w	r3, r3, #8
 8005f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f023 0304 	bic.w	r3, r3, #4
 8005f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1b      	ldr	r2, [pc, #108]	; (8005f98 <TIM_OC1_SetConfig+0x10c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00f      	beq.n	8005f4e <TIM_OC1_SetConfig+0xc2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1a      	ldr	r2, [pc, #104]	; (8005f9c <TIM_OC1_SetConfig+0x110>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00b      	beq.n	8005f4e <TIM_OC1_SetConfig+0xc2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a19      	ldr	r2, [pc, #100]	; (8005fa0 <TIM_OC1_SetConfig+0x114>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d007      	beq.n	8005f4e <TIM_OC1_SetConfig+0xc2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a18      	ldr	r2, [pc, #96]	; (8005fa4 <TIM_OC1_SetConfig+0x118>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <TIM_OC1_SetConfig+0xc2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <TIM_OC1_SetConfig+0x11c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d111      	bne.n	8005f72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	621a      	str	r2, [r3, #32]
}
 8005f8c:	bf00      	nop
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40013400 	.word	0x40013400
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800

08005fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f023 0210 	bic.w	r2, r3, #16
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0320 	bic.w	r3, r3, #32
 8005ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a28      	ldr	r2, [pc, #160]	; (80060ac <TIM_OC2_SetConfig+0x100>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_OC2_SetConfig+0x6c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a27      	ldr	r2, [pc, #156]	; (80060b0 <TIM_OC2_SetConfig+0x104>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d10d      	bne.n	8006034 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800601e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <TIM_OC2_SetConfig+0x100>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00f      	beq.n	800605c <TIM_OC2_SetConfig+0xb0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <TIM_OC2_SetConfig+0x104>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <TIM_OC2_SetConfig+0xb0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <TIM_OC2_SetConfig+0x108>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d007      	beq.n	800605c <TIM_OC2_SetConfig+0xb0>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a1a      	ldr	r2, [pc, #104]	; (80060b8 <TIM_OC2_SetConfig+0x10c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_OC2_SetConfig+0xb0>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a19      	ldr	r2, [pc, #100]	; (80060bc <TIM_OC2_SetConfig+0x110>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d113      	bne.n	8006084 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800606a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40013400 	.word	0x40013400
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40014400 	.word	0x40014400
 80060bc:	40014800 	.word	0x40014800

080060c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800610c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	021b      	lsls	r3, r3, #8
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a27      	ldr	r2, [pc, #156]	; (80061bc <TIM_OC3_SetConfig+0xfc>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_OC3_SetConfig+0x6a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a26      	ldr	r2, [pc, #152]	; (80061c0 <TIM_OC3_SetConfig+0x100>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d10d      	bne.n	8006146 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <TIM_OC3_SetConfig+0xfc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00f      	beq.n	800616e <TIM_OC3_SetConfig+0xae>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1b      	ldr	r2, [pc, #108]	; (80061c0 <TIM_OC3_SetConfig+0x100>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00b      	beq.n	800616e <TIM_OC3_SetConfig+0xae>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a1a      	ldr	r2, [pc, #104]	; (80061c4 <TIM_OC3_SetConfig+0x104>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d007      	beq.n	800616e <TIM_OC3_SetConfig+0xae>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a19      	ldr	r2, [pc, #100]	; (80061c8 <TIM_OC3_SetConfig+0x108>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_OC3_SetConfig+0xae>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a18      	ldr	r2, [pc, #96]	; (80061cc <TIM_OC3_SetConfig+0x10c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d113      	bne.n	8006196 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	621a      	str	r2, [r3, #32]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	40012c00 	.word	0x40012c00
 80061c0:	40013400 	.word	0x40013400
 80061c4:	40014000 	.word	0x40014000
 80061c8:	40014400 	.word	0x40014400
 80061cc:	40014800 	.word	0x40014800

080061d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800620a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800621e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	031b      	lsls	r3, r3, #12
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a28      	ldr	r2, [pc, #160]	; (80062d0 <TIM_OC4_SetConfig+0x100>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_OC4_SetConfig+0x6c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a27      	ldr	r2, [pc, #156]	; (80062d4 <TIM_OC4_SetConfig+0x104>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d10d      	bne.n	8006258 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	031b      	lsls	r3, r3, #12
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006256:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a1d      	ldr	r2, [pc, #116]	; (80062d0 <TIM_OC4_SetConfig+0x100>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00f      	beq.n	8006280 <TIM_OC4_SetConfig+0xb0>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <TIM_OC4_SetConfig+0x104>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00b      	beq.n	8006280 <TIM_OC4_SetConfig+0xb0>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <TIM_OC4_SetConfig+0x108>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d007      	beq.n	8006280 <TIM_OC4_SetConfig+0xb0>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <TIM_OC4_SetConfig+0x10c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC4_SetConfig+0xb0>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <TIM_OC4_SetConfig+0x110>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d113      	bne.n	80062a8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006286:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800628e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	019b      	lsls	r3, r3, #6
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	019b      	lsls	r3, r3, #6
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40013400 	.word	0x40013400
 80062d8:	40014000 	.word	0x40014000
 80062dc:	40014400 	.word	0x40014400
 80062e0:	40014800 	.word	0x40014800

080062e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006328:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a17      	ldr	r2, [pc, #92]	; (8006398 <TIM_OC5_SetConfig+0xb4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00f      	beq.n	800635e <TIM_OC5_SetConfig+0x7a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a16      	ldr	r2, [pc, #88]	; (800639c <TIM_OC5_SetConfig+0xb8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00b      	beq.n	800635e <TIM_OC5_SetConfig+0x7a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <TIM_OC5_SetConfig+0xbc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <TIM_OC5_SetConfig+0x7a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <TIM_OC5_SetConfig+0xc0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_OC5_SetConfig+0x7a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a13      	ldr	r2, [pc, #76]	; (80063a8 <TIM_OC5_SetConfig+0xc4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d109      	bne.n	8006372 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006364:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	621a      	str	r2, [r3, #32]
}
 800638c:	bf00      	nop
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	40012c00 	.word	0x40012c00
 800639c:	40013400 	.word	0x40013400
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40014400 	.word	0x40014400
 80063a8:	40014800 	.word	0x40014800

080063ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	051b      	lsls	r3, r3, #20
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a18      	ldr	r2, [pc, #96]	; (8006464 <TIM_OC6_SetConfig+0xb8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00f      	beq.n	8006428 <TIM_OC6_SetConfig+0x7c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a17      	ldr	r2, [pc, #92]	; (8006468 <TIM_OC6_SetConfig+0xbc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00b      	beq.n	8006428 <TIM_OC6_SetConfig+0x7c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a16      	ldr	r2, [pc, #88]	; (800646c <TIM_OC6_SetConfig+0xc0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d007      	beq.n	8006428 <TIM_OC6_SetConfig+0x7c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a15      	ldr	r2, [pc, #84]	; (8006470 <TIM_OC6_SetConfig+0xc4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC6_SetConfig+0x7c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a14      	ldr	r2, [pc, #80]	; (8006474 <TIM_OC6_SetConfig+0xc8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d109      	bne.n	800643c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800642e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	029b      	lsls	r3, r3, #10
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40013400 	.word	0x40013400
 800646c:	40014000 	.word	0x40014000
 8006470:	40014400 	.word	0x40014400
 8006474:	40014800 	.word	0x40014800

08006478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f023 0201 	bic.w	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f023 030a 	bic.w	r3, r3, #10
 80064b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	f023 0210 	bic.w	r2, r3, #16
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	031b      	lsls	r3, r3, #12
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006512:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800654c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	f043 0307 	orr.w	r3, r3, #7
 800655c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	609a      	str	r2, [r3, #8]
}
 8006564:	bf00      	nop
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800658a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	021a      	lsls	r2, r3, #8
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	431a      	orrs	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4313      	orrs	r3, r2
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	609a      	str	r2, [r3, #8]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e065      	b.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a2c      	ldr	r2, [pc, #176]	; (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a2b      	ldr	r2, [pc, #172]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d108      	bne.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006602:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d018      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663e:	d013      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00e      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a17      	ldr	r2, [pc, #92]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d009      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a12      	ldr	r2, [pc, #72]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d10c      	bne.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800666e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	4313      	orrs	r3, r2
 8006678:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40013400 	.word	0x40013400
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40014000 	.word	0x40014000

080066b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e087      	b.n	80067e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a27      	ldr	r2, [pc, #156]	; (80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d004      	beq.n	800675e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d106      	bne.n	800676c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1e      	ldr	r2, [pc, #120]	; (80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1d      	ldr	r2, [pc, #116]	; (80067f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d126      	bne.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	051b      	lsls	r3, r3, #20
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a0e      	ldr	r2, [pc, #56]	; (80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d004      	beq.n	80067c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a0d      	ldr	r2, [pc, #52]	; (80067f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d106      	bne.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	40013400 	.word	0x40013400

080067f4 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800680a:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	460b      	mov	r3, r1
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e05b      	b.n	8006976 <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7fb fb05 	bl	8001ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2224      	movs	r2, #36	; 0x24
 80068da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0201 	bic.w	r2, r2, #1
 80068ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 fa70 	bl	8006dd4 <UART_SetConfig>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_MultiProcessor_Init+0x58>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e03b      	b.n	8006976 <HAL_MultiProcessor_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_MultiProcessor_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 fd0c 	bl	8007324 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800691a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800692a:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006932:	d10a      	bne.n	800694a <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800693e:	7afb      	ldrb	r3, [r7, #11]
 8006940:	061a      	lsls	r2, r3, #24
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	430a      	orrs	r2, r1
 800695c:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0201 	orr.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fd7a 	bl	8007468 <UART_CheckIdleState>
 8006974:	4603      	mov	r3, r0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b08a      	sub	sp, #40	; 0x28
 8006982:	af02      	add	r7, sp, #8
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	603b      	str	r3, [r7, #0]
 800698a:	4613      	mov	r3, r2
 800698c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006994:	2b20      	cmp	r3, #32
 8006996:	f040 8083 	bne.w	8006aa0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <HAL_UART_Transmit+0x28>
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e07b      	b.n	8006aa2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_UART_Transmit+0x3a>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e074      	b.n	8006aa2 <HAL_UART_Transmit+0x124>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2221      	movs	r2, #33	; 0x21
 80069cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069d0:	f7fb fb72 	bl	80020b8 <HAL_GetTick>
 80069d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	88fa      	ldrh	r2, [r7, #6]
 80069da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	88fa      	ldrh	r2, [r7, #6]
 80069e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ee:	d108      	bne.n	8006a02 <HAL_UART_Transmit+0x84>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	61bb      	str	r3, [r7, #24]
 8006a00:	e003      	b.n	8006a0a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8006a12:	e02c      	b.n	8006a6e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2180      	movs	r1, #128	; 0x80
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 fd6a 	bl	80074f8 <UART_WaitOnFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e039      	b.n	8006aa2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	3302      	adds	r3, #2
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	e007      	b.n	8006a5c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	781a      	ldrb	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1cc      	bne.n	8006a14 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2200      	movs	r2, #0
 8006a82:	2140      	movs	r1, #64	; 0x40
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fd37 	bl	80074f8 <UART_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e006      	b.n	8006aa2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e000      	b.n	8006aa2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006aa0:	2302      	movs	r3, #2
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3720      	adds	r7, #32
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d118      	bne.n	8006b0e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d013      	beq.n	8006b0e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d104      	bne.n	8006afa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8145 	beq.w	8006d8e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
      }
      return;
 8006b0c:	e13f      	b.n	8006d8e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80e8 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4ba1      	ldr	r3, [pc, #644]	; (8006da0 <HAL_UART_IRQHandler+0x2f4>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	4ba0      	ldr	r3, [pc, #640]	; (8006da4 <HAL_UART_IRQHandler+0x2f8>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80dd 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d010      	beq.n	8006b58 <HAL_UART_IRQHandler+0xac>
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2201      	movs	r2, #1
 8006b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4e:	f043 0201 	orr.w	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d010      	beq.n	8006b84 <HAL_UART_IRQHandler+0xd8>
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00b      	beq.n	8006b84 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2202      	movs	r2, #2
 8006b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f043 0204 	orr.w	r2, r3, #4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 0304 	and.w	r3, r3, #4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d010      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x104>
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba6:	f043 0202 	orr.w	r2, r3, #2
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d015      	beq.n	8006be6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4b76      	ldr	r3, [pc, #472]	; (8006da0 <HAL_UART_IRQHandler+0x2f4>)
 8006bc8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bdc:	f043 0208 	orr.w	r2, r3, #8
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d011      	beq.n	8006c14 <HAL_UART_IRQHandler+0x168>
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00c      	beq.n	8006c14 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0a:	f043 0220 	orr.w	r2, r3, #32
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 80b9 	beq.w	8006d92 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d011      	beq.n	8006c4e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d007      	beq.n	8006c4e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c54:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	d004      	beq.n	8006c6e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d031      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fcc2 	bl	80075f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d123      	bne.n	8006cca <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c90:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d013      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c9e:	4a42      	ldr	r2, [pc, #264]	; (8006da8 <HAL_UART_IRQHandler+0x2fc>)
 8006ca0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fd f805 	bl	8003cb6 <HAL_DMA_Abort_IT>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d017      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	e00f      	b.n	8006ce2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f87c 	bl	8006dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc8:	e00b      	b.n	8006ce2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f878 	bl	8006dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd0:	e007      	b.n	8006ce2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f874 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006ce0:	e057      	b.n	8006d92 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce2:	bf00      	nop
    return;
 8006ce4:	e055      	b.n	8006d92 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00d      	beq.n	8006d0c <HAL_UART_IRQHandler+0x260>
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d008      	beq.n	8006d0c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fcca 	bl	800769e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d0a:	e045      	b.n	8006d98 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d012      	beq.n	8006d3c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d031      	beq.n	8006d96 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
    }
    return;
 8006d3a:	e02c      	b.n	8006d96 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d008      	beq.n	8006d58 <HAL_UART_IRQHandler+0x2ac>
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fc8a 	bl	800766a <UART_EndTransmit_IT>
    return;
 8006d56:	e01f      	b.n	8006d98 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d008      	beq.n	8006d74 <HAL_UART_IRQHandler+0x2c8>
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fcaa 	bl	80076c6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d72:	e011      	b.n	8006d98 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00c      	beq.n	8006d98 <HAL_UART_IRQHandler+0x2ec>
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	da09      	bge.n	8006d98 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc94 	bl	80076b2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d8a:	bf00      	nop
 8006d8c:	e004      	b.n	8006d98 <HAL_UART_IRQHandler+0x2ec>
      return;
 8006d8e:	bf00      	nop
 8006d90:	e002      	b.n	8006d98 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006d96:	bf00      	nop
  }
}
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	10000001 	.word	0x10000001
 8006da4:	04000120 	.word	0x04000120
 8006da8:	0800763f 	.word	0x0800763f

08006dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006dd8:	b088      	sub	sp, #32
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	4bb0      	ldr	r3, [pc, #704]	; (80070cc <UART_SetConfig+0x2f8>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	69f9      	ldr	r1, [r7, #28]
 8006e14:	430b      	orrs	r3, r1
 8006e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4aa5      	ldr	r2, [pc, #660]	; (80070d0 <UART_SetConfig+0x2fc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d004      	beq.n	8006e48 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	69fa      	ldr	r2, [r7, #28]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	69f9      	ldr	r1, [r7, #28]
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	f023 010f 	bic.w	r1, r3, #15
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a96      	ldr	r2, [pc, #600]	; (80070d4 <UART_SetConfig+0x300>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d121      	bne.n	8006ec4 <UART_SetConfig+0xf0>
 8006e80:	4b95      	ldr	r3, [pc, #596]	; (80070d8 <UART_SetConfig+0x304>)
 8006e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d816      	bhi.n	8006ebc <UART_SetConfig+0xe8>
 8006e8e:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <UART_SetConfig+0xc0>)
 8006e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e94:	08006ea5 	.word	0x08006ea5
 8006e98:	08006eb1 	.word	0x08006eb1
 8006e9c:	08006eab 	.word	0x08006eab
 8006ea0:	08006eb7 	.word	0x08006eb7
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	76fb      	strb	r3, [r7, #27]
 8006ea8:	e0be      	b.n	8007028 <UART_SetConfig+0x254>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	76fb      	strb	r3, [r7, #27]
 8006eae:	e0bb      	b.n	8007028 <UART_SetConfig+0x254>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	76fb      	strb	r3, [r7, #27]
 8006eb4:	e0b8      	b.n	8007028 <UART_SetConfig+0x254>
 8006eb6:	2308      	movs	r3, #8
 8006eb8:	76fb      	strb	r3, [r7, #27]
 8006eba:	e0b5      	b.n	8007028 <UART_SetConfig+0x254>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	76fb      	strb	r3, [r7, #27]
 8006ec0:	bf00      	nop
 8006ec2:	e0b1      	b.n	8007028 <UART_SetConfig+0x254>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a84      	ldr	r2, [pc, #528]	; (80070dc <UART_SetConfig+0x308>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d134      	bne.n	8006f38 <UART_SetConfig+0x164>
 8006ece:	4b82      	ldr	r3, [pc, #520]	; (80070d8 <UART_SetConfig+0x304>)
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed4:	f003 030c 	and.w	r3, r3, #12
 8006ed8:	2b0c      	cmp	r3, #12
 8006eda:	d829      	bhi.n	8006f30 <UART_SetConfig+0x15c>
 8006edc:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <UART_SetConfig+0x110>)
 8006ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee2:	bf00      	nop
 8006ee4:	08006f19 	.word	0x08006f19
 8006ee8:	08006f31 	.word	0x08006f31
 8006eec:	08006f31 	.word	0x08006f31
 8006ef0:	08006f31 	.word	0x08006f31
 8006ef4:	08006f25 	.word	0x08006f25
 8006ef8:	08006f31 	.word	0x08006f31
 8006efc:	08006f31 	.word	0x08006f31
 8006f00:	08006f31 	.word	0x08006f31
 8006f04:	08006f1f 	.word	0x08006f1f
 8006f08:	08006f31 	.word	0x08006f31
 8006f0c:	08006f31 	.word	0x08006f31
 8006f10:	08006f31 	.word	0x08006f31
 8006f14:	08006f2b 	.word	0x08006f2b
 8006f18:	2300      	movs	r3, #0
 8006f1a:	76fb      	strb	r3, [r7, #27]
 8006f1c:	e084      	b.n	8007028 <UART_SetConfig+0x254>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	76fb      	strb	r3, [r7, #27]
 8006f22:	e081      	b.n	8007028 <UART_SetConfig+0x254>
 8006f24:	2304      	movs	r3, #4
 8006f26:	76fb      	strb	r3, [r7, #27]
 8006f28:	e07e      	b.n	8007028 <UART_SetConfig+0x254>
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	76fb      	strb	r3, [r7, #27]
 8006f2e:	e07b      	b.n	8007028 <UART_SetConfig+0x254>
 8006f30:	2310      	movs	r3, #16
 8006f32:	76fb      	strb	r3, [r7, #27]
 8006f34:	bf00      	nop
 8006f36:	e077      	b.n	8007028 <UART_SetConfig+0x254>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a68      	ldr	r2, [pc, #416]	; (80070e0 <UART_SetConfig+0x30c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d120      	bne.n	8006f84 <UART_SetConfig+0x1b0>
 8006f42:	4b65      	ldr	r3, [pc, #404]	; (80070d8 <UART_SetConfig+0x304>)
 8006f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d00f      	beq.n	8006f70 <UART_SetConfig+0x19c>
 8006f50:	2b10      	cmp	r3, #16
 8006f52:	d802      	bhi.n	8006f5a <UART_SetConfig+0x186>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <UART_SetConfig+0x190>
 8006f58:	e010      	b.n	8006f7c <UART_SetConfig+0x1a8>
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d005      	beq.n	8006f6a <UART_SetConfig+0x196>
 8006f5e:	2b30      	cmp	r3, #48	; 0x30
 8006f60:	d009      	beq.n	8006f76 <UART_SetConfig+0x1a2>
 8006f62:	e00b      	b.n	8006f7c <UART_SetConfig+0x1a8>
 8006f64:	2300      	movs	r3, #0
 8006f66:	76fb      	strb	r3, [r7, #27]
 8006f68:	e05e      	b.n	8007028 <UART_SetConfig+0x254>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	76fb      	strb	r3, [r7, #27]
 8006f6e:	e05b      	b.n	8007028 <UART_SetConfig+0x254>
 8006f70:	2304      	movs	r3, #4
 8006f72:	76fb      	strb	r3, [r7, #27]
 8006f74:	e058      	b.n	8007028 <UART_SetConfig+0x254>
 8006f76:	2308      	movs	r3, #8
 8006f78:	76fb      	strb	r3, [r7, #27]
 8006f7a:	e055      	b.n	8007028 <UART_SetConfig+0x254>
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	76fb      	strb	r3, [r7, #27]
 8006f80:	bf00      	nop
 8006f82:	e051      	b.n	8007028 <UART_SetConfig+0x254>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a56      	ldr	r2, [pc, #344]	; (80070e4 <UART_SetConfig+0x310>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d120      	bne.n	8006fd0 <UART_SetConfig+0x1fc>
 8006f8e:	4b52      	ldr	r3, [pc, #328]	; (80070d8 <UART_SetConfig+0x304>)
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f98:	2b40      	cmp	r3, #64	; 0x40
 8006f9a:	d00f      	beq.n	8006fbc <UART_SetConfig+0x1e8>
 8006f9c:	2b40      	cmp	r3, #64	; 0x40
 8006f9e:	d802      	bhi.n	8006fa6 <UART_SetConfig+0x1d2>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <UART_SetConfig+0x1dc>
 8006fa4:	e010      	b.n	8006fc8 <UART_SetConfig+0x1f4>
 8006fa6:	2b80      	cmp	r3, #128	; 0x80
 8006fa8:	d005      	beq.n	8006fb6 <UART_SetConfig+0x1e2>
 8006faa:	2bc0      	cmp	r3, #192	; 0xc0
 8006fac:	d009      	beq.n	8006fc2 <UART_SetConfig+0x1ee>
 8006fae:	e00b      	b.n	8006fc8 <UART_SetConfig+0x1f4>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	76fb      	strb	r3, [r7, #27]
 8006fb4:	e038      	b.n	8007028 <UART_SetConfig+0x254>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	76fb      	strb	r3, [r7, #27]
 8006fba:	e035      	b.n	8007028 <UART_SetConfig+0x254>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	76fb      	strb	r3, [r7, #27]
 8006fc0:	e032      	b.n	8007028 <UART_SetConfig+0x254>
 8006fc2:	2308      	movs	r3, #8
 8006fc4:	76fb      	strb	r3, [r7, #27]
 8006fc6:	e02f      	b.n	8007028 <UART_SetConfig+0x254>
 8006fc8:	2310      	movs	r3, #16
 8006fca:	76fb      	strb	r3, [r7, #27]
 8006fcc:	bf00      	nop
 8006fce:	e02b      	b.n	8007028 <UART_SetConfig+0x254>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a3e      	ldr	r2, [pc, #248]	; (80070d0 <UART_SetConfig+0x2fc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d124      	bne.n	8007024 <UART_SetConfig+0x250>
 8006fda:	4b3f      	ldr	r3, [pc, #252]	; (80070d8 <UART_SetConfig+0x304>)
 8006fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe8:	d012      	beq.n	8007010 <UART_SetConfig+0x23c>
 8006fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fee:	d802      	bhi.n	8006ff6 <UART_SetConfig+0x222>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <UART_SetConfig+0x230>
 8006ff4:	e012      	b.n	800701c <UART_SetConfig+0x248>
 8006ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffa:	d006      	beq.n	800700a <UART_SetConfig+0x236>
 8006ffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007000:	d009      	beq.n	8007016 <UART_SetConfig+0x242>
 8007002:	e00b      	b.n	800701c <UART_SetConfig+0x248>
 8007004:	2300      	movs	r3, #0
 8007006:	76fb      	strb	r3, [r7, #27]
 8007008:	e00e      	b.n	8007028 <UART_SetConfig+0x254>
 800700a:	2302      	movs	r3, #2
 800700c:	76fb      	strb	r3, [r7, #27]
 800700e:	e00b      	b.n	8007028 <UART_SetConfig+0x254>
 8007010:	2304      	movs	r3, #4
 8007012:	76fb      	strb	r3, [r7, #27]
 8007014:	e008      	b.n	8007028 <UART_SetConfig+0x254>
 8007016:	2308      	movs	r3, #8
 8007018:	76fb      	strb	r3, [r7, #27]
 800701a:	e005      	b.n	8007028 <UART_SetConfig+0x254>
 800701c:	2310      	movs	r3, #16
 800701e:	76fb      	strb	r3, [r7, #27]
 8007020:	bf00      	nop
 8007022:	e001      	b.n	8007028 <UART_SetConfig+0x254>
 8007024:	2310      	movs	r3, #16
 8007026:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a28      	ldr	r2, [pc, #160]	; (80070d0 <UART_SetConfig+0x2fc>)
 800702e:	4293      	cmp	r3, r2
 8007030:	f040 80a1 	bne.w	8007176 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007034:	7efb      	ldrb	r3, [r7, #27]
 8007036:	2b08      	cmp	r3, #8
 8007038:	d823      	bhi.n	8007082 <UART_SetConfig+0x2ae>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x26c>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007065 	.word	0x08007065
 8007044:	08007083 	.word	0x08007083
 8007048:	0800706d 	.word	0x0800706d
 800704c:	08007083 	.word	0x08007083
 8007050:	08007073 	.word	0x08007073
 8007054:	08007083 	.word	0x08007083
 8007058:	08007083 	.word	0x08007083
 800705c:	08007083 	.word	0x08007083
 8007060:	0800707b 	.word	0x0800707b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007064:	f7fd ff08 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8007068:	6178      	str	r0, [r7, #20]
        break;
 800706a:	e00f      	b.n	800708c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800706c:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <UART_SetConfig+0x314>)
 800706e:	617b      	str	r3, [r7, #20]
        break;
 8007070:	e00c      	b.n	800708c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007072:	f7fd fe93 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8007076:	6178      	str	r0, [r7, #20]
        break;
 8007078:	e008      	b.n	800708c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800707e:	617b      	str	r3, [r7, #20]
        break;
 8007080:	e004      	b.n	800708c <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	76bb      	strb	r3, [r7, #26]
        break;
 800708a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 8130 	beq.w	80072f4 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	4a14      	ldr	r2, [pc, #80]	; (80070ec <UART_SetConfig+0x318>)
 800709a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800709e:	461a      	mov	r2, r3
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	4613      	mov	r3, r2
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	4413      	add	r3, r2
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d305      	bcc.n	80070c4 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d915      	bls.n	80070f0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	76bb      	strb	r3, [r7, #26]
 80070c8:	e114      	b.n	80072f4 <UART_SetConfig+0x520>
 80070ca:	bf00      	nop
 80070cc:	cfff69f3 	.word	0xcfff69f3
 80070d0:	40008000 	.word	0x40008000
 80070d4:	40013800 	.word	0x40013800
 80070d8:	40021000 	.word	0x40021000
 80070dc:	40004400 	.word	0x40004400
 80070e0:	40004800 	.word	0x40004800
 80070e4:	40004c00 	.word	0x40004c00
 80070e8:	00f42400 	.word	0x00f42400
 80070ec:	0800a8c0 	.word	0x0800a8c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f04f 0100 	mov.w	r1, #0
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	4a87      	ldr	r2, [pc, #540]	; (800731c <UART_SetConfig+0x548>)
 80070fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007102:	b29b      	uxth	r3, r3
 8007104:	f04f 0400 	mov.w	r4, #0
 8007108:	461a      	mov	r2, r3
 800710a:	4623      	mov	r3, r4
 800710c:	f7f9 fd74 	bl	8000bf8 <__aeabi_uldivmod>
 8007110:	4603      	mov	r3, r0
 8007112:	460c      	mov	r4, r1
 8007114:	4619      	mov	r1, r3
 8007116:	4622      	mov	r2, r4
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	f04f 0400 	mov.w	r4, #0
 8007120:	0214      	lsls	r4, r2, #8
 8007122:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007126:	020b      	lsls	r3, r1, #8
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6852      	ldr	r2, [r2, #4]
 800712c:	0852      	lsrs	r2, r2, #1
 800712e:	4611      	mov	r1, r2
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	eb13 0b01 	adds.w	fp, r3, r1
 8007138:	eb44 0c02 	adc.w	ip, r4, r2
 800713c:	4658      	mov	r0, fp
 800713e:	4661      	mov	r1, ip
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f04f 0400 	mov.w	r4, #0
 8007148:	461a      	mov	r2, r3
 800714a:	4623      	mov	r3, r4
 800714c:	f7f9 fd54 	bl	8000bf8 <__aeabi_uldivmod>
 8007150:	4603      	mov	r3, r0
 8007152:	460c      	mov	r4, r1
 8007154:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800715c:	d308      	bcc.n	8007170 <UART_SetConfig+0x39c>
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007164:	d204      	bcs.n	8007170 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	e0c1      	b.n	80072f4 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	76bb      	strb	r3, [r7, #26]
 8007174:	e0be      	b.n	80072f4 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800717e:	d164      	bne.n	800724a <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8007180:	7efb      	ldrb	r3, [r7, #27]
 8007182:	2b08      	cmp	r3, #8
 8007184:	d827      	bhi.n	80071d6 <UART_SetConfig+0x402>
 8007186:	a201      	add	r2, pc, #4	; (adr r2, 800718c <UART_SetConfig+0x3b8>)
 8007188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718c:	080071b1 	.word	0x080071b1
 8007190:	080071b9 	.word	0x080071b9
 8007194:	080071c1 	.word	0x080071c1
 8007198:	080071d7 	.word	0x080071d7
 800719c:	080071c7 	.word	0x080071c7
 80071a0:	080071d7 	.word	0x080071d7
 80071a4:	080071d7 	.word	0x080071d7
 80071a8:	080071d7 	.word	0x080071d7
 80071ac:	080071cf 	.word	0x080071cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b0:	f7fd fe62 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 80071b4:	6178      	str	r0, [r7, #20]
        break;
 80071b6:	e013      	b.n	80071e0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071b8:	f7fd fe74 	bl	8004ea4 <HAL_RCC_GetPCLK2Freq>
 80071bc:	6178      	str	r0, [r7, #20]
        break;
 80071be:	e00f      	b.n	80071e0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c0:	4b57      	ldr	r3, [pc, #348]	; (8007320 <UART_SetConfig+0x54c>)
 80071c2:	617b      	str	r3, [r7, #20]
        break;
 80071c4:	e00c      	b.n	80071e0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c6:	f7fd fde9 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 80071ca:	6178      	str	r0, [r7, #20]
        break;
 80071cc:	e008      	b.n	80071e0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071d2:	617b      	str	r3, [r7, #20]
        break;
 80071d4:	e004      	b.n	80071e0 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	76bb      	strb	r3, [r7, #26]
        break;
 80071de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8086 	beq.w	80072f4 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	4a4b      	ldr	r2, [pc, #300]	; (800731c <UART_SetConfig+0x548>)
 80071ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f2:	461a      	mov	r2, r3
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071fa:	005a      	lsls	r2, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	441a      	add	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	fbb2 f3f3 	udiv	r3, r2, r3
 800720c:	b29b      	uxth	r3, r3
 800720e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b0f      	cmp	r3, #15
 8007214:	d916      	bls.n	8007244 <UART_SetConfig+0x470>
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721c:	d212      	bcs.n	8007244 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	b29b      	uxth	r3, r3
 8007222:	f023 030f 	bic.w	r3, r3, #15
 8007226:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	b29b      	uxth	r3, r3
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	b29a      	uxth	r2, r3
 8007234:	89fb      	ldrh	r3, [r7, #14]
 8007236:	4313      	orrs	r3, r2
 8007238:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	89fa      	ldrh	r2, [r7, #14]
 8007240:	60da      	str	r2, [r3, #12]
 8007242:	e057      	b.n	80072f4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	76bb      	strb	r3, [r7, #26]
 8007248:	e054      	b.n	80072f4 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800724a:	7efb      	ldrb	r3, [r7, #27]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d828      	bhi.n	80072a2 <UART_SetConfig+0x4ce>
 8007250:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <UART_SetConfig+0x484>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	0800727d 	.word	0x0800727d
 800725c:	08007285 	.word	0x08007285
 8007260:	0800728d 	.word	0x0800728d
 8007264:	080072a3 	.word	0x080072a3
 8007268:	08007293 	.word	0x08007293
 800726c:	080072a3 	.word	0x080072a3
 8007270:	080072a3 	.word	0x080072a3
 8007274:	080072a3 	.word	0x080072a3
 8007278:	0800729b 	.word	0x0800729b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800727c:	f7fd fdfc 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8007280:	6178      	str	r0, [r7, #20]
        break;
 8007282:	e013      	b.n	80072ac <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007284:	f7fd fe0e 	bl	8004ea4 <HAL_RCC_GetPCLK2Freq>
 8007288:	6178      	str	r0, [r7, #20]
        break;
 800728a:	e00f      	b.n	80072ac <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800728c:	4b24      	ldr	r3, [pc, #144]	; (8007320 <UART_SetConfig+0x54c>)
 800728e:	617b      	str	r3, [r7, #20]
        break;
 8007290:	e00c      	b.n	80072ac <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007292:	f7fd fd83 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8007296:	6178      	str	r0, [r7, #20]
        break;
 8007298:	e008      	b.n	80072ac <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800729a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800729e:	617b      	str	r3, [r7, #20]
        break;
 80072a0:	e004      	b.n	80072ac <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	76bb      	strb	r3, [r7, #26]
        break;
 80072aa:	bf00      	nop
    }

    if (pclk != 0U)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d020      	beq.n	80072f4 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	4a19      	ldr	r2, [pc, #100]	; (800731c <UART_SetConfig+0x548>)
 80072b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072bc:	461a      	mov	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	085b      	lsrs	r3, r3, #1
 80072ca:	441a      	add	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2b0f      	cmp	r3, #15
 80072dc:	d908      	bls.n	80072f0 <UART_SetConfig+0x51c>
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e4:	d204      	bcs.n	80072f0 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	60da      	str	r2, [r3, #12]
 80072ee:	e001      	b.n	80072f4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007310:	7ebb      	ldrb	r3, [r7, #26]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800731c:	0800a8c0 	.word	0x0800a8c0
 8007320:	00f42400 	.word	0x00f42400

08007324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	f003 0308 	and.w	r3, r3, #8
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00a      	beq.n	80073d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01a      	beq.n	800743a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007422:	d10a      	bne.n	800743a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	605a      	str	r2, [r3, #4]
  }
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af02      	add	r7, sp, #8
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007478:	f7fa fe1e 	bl	80020b8 <HAL_GetTick>
 800747c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b08      	cmp	r3, #8
 800748a:	d10e      	bne.n	80074aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800748c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f82c 	bl	80074f8 <UART_WaitOnFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e022      	b.n	80074f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d10e      	bne.n	80074d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f816 	bl	80074f8 <UART_WaitOnFlagUntilTimeout>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e00c      	b.n	80074f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	4613      	mov	r3, r2
 8007506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007508:	e062      	b.n	80075d0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007510:	d05e      	beq.n	80075d0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007512:	f7fa fdd1 	bl	80020b8 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	429a      	cmp	r2, r3
 8007520:	d302      	bcc.n	8007528 <UART_WaitOnFlagUntilTimeout+0x30>
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d11d      	bne.n	8007564 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007536:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0201 	bic.w	r2, r2, #1
 8007546:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2220      	movs	r2, #32
 800754c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e045      	b.n	80075f0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	d02e      	beq.n	80075d0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800757c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007580:	d126      	bne.n	80075d0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800758a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800759a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0201 	bic.w	r2, r2, #1
 80075aa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e00f      	b.n	80075f0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	69da      	ldr	r2, [r3, #28]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	4013      	ands	r3, r2
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	429a      	cmp	r2, r3
 80075de:	bf0c      	ite	eq
 80075e0:	2301      	moveq	r3, #1
 80075e2:	2300      	movne	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d08d      	beq.n	800750a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800760e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6812      	ldr	r2, [r2, #0]
 800761a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800761e:	f023 0301 	bic.w	r3, r3, #1
 8007622:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f7ff fbaf 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007680:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff fb8b 	bl	8006dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076da:	b480      	push	{r7}
 80076dc:	b085      	sub	sp, #20
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e027      	b.n	8007740 <HAL_UARTEx_DisableFifoMode+0x66>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2224      	movs	r2, #36	; 0x24
 80076fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0201 	bic.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800771e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007760:	2302      	movs	r3, #2
 8007762:	e02d      	b.n	80077c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2224      	movs	r2, #36	; 0x24
 8007770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0201 	bic.w	r2, r2, #1
 800778a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f84f 	bl	8007844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077dc:	2302      	movs	r3, #2
 80077de:	e02d      	b.n	800783c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2224      	movs	r2, #36	; 0x24
 80077ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0201 	bic.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f811 	bl	8007844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2220      	movs	r2, #32
 800782e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007844:	b480      	push	{r7}
 8007846:	b089      	sub	sp, #36	; 0x24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800784c:	4a2f      	ldr	r2, [pc, #188]	; (800790c <UARTEx_SetNbDataToProcess+0xc8>)
 800784e:	f107 0314 	add.w	r3, r7, #20
 8007852:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007856:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800785a:	4a2d      	ldr	r2, [pc, #180]	; (8007910 <UARTEx_SetNbDataToProcess+0xcc>)
 800785c:	f107 030c 	add.w	r3, r7, #12
 8007860:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007864:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800786c:	2b00      	cmp	r3, #0
 800786e:	d108      	bne.n	8007882 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007880:	e03d      	b.n	80078fe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007882:	2308      	movs	r3, #8
 8007884:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007886:	2308      	movs	r3, #8
 8007888:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	0e5b      	lsrs	r3, r3, #25
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	0f5b      	lsrs	r3, r3, #29
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078aa:	7fbb      	ldrb	r3, [r7, #30]
 80078ac:	7f3a      	ldrb	r2, [r7, #28]
 80078ae:	f107 0120 	add.w	r1, r7, #32
 80078b2:	440a      	add	r2, r1
 80078b4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80078b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078bc:	7f3a      	ldrb	r2, [r7, #28]
 80078be:	f107 0120 	add.w	r1, r7, #32
 80078c2:	440a      	add	r2, r1
 80078c4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078d4:	7ffb      	ldrb	r3, [r7, #31]
 80078d6:	7f7a      	ldrb	r2, [r7, #29]
 80078d8:	f107 0120 	add.w	r1, r7, #32
 80078dc:	440a      	add	r2, r1
 80078de:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80078e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078e6:	7f7a      	ldrb	r2, [r7, #29]
 80078e8:	f107 0120 	add.w	r1, r7, #32
 80078ec:	440a      	add	r2, r1
 80078ee:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078fe:	bf00      	nop
 8007900:	3724      	adds	r7, #36	; 0x24
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	0800a898 	.word	0x0800a898
 8007910:	0800a8a0 	.word	0x0800a8a0

08007914 <delay>:
#include "stdlib.h"
#include "oledfont.h"

u8 OLED_GRAM[144][8];
void delay(void)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
	u8 t = 3;
 800791a:	2303      	movs	r3, #3
 800791c:	71fb      	strb	r3, [r7, #7]
	while (t--)
 800791e:	bf00      	nop
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	1e5a      	subs	r2, r3, #1
 8007924:	71fa      	strb	r2, [r7, #7]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1fa      	bne.n	8007920 <delay+0xc>
		;
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <OLED_WR_Byte>:
void OLED_WR_Byte(u8 dat, u8 cmd)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	460a      	mov	r2, r1
 8007942:	71fb      	strb	r3, [r7, #7]
 8007944:	4613      	mov	r3, r2
 8007946:	71bb      	strb	r3, [r7, #6]
	u8 i;
	if (cmd)
 8007948:	79bb      	ldrb	r3, [r7, #6]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d006      	beq.n	800795c <OLED_WR_Byte+0x24>
		OLED_DC_Set();
 800794e:	2201      	movs	r2, #1
 8007950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007954:	4821      	ldr	r0, [pc, #132]	; (80079dc <OLED_WR_Byte+0xa4>)
 8007956:	f7fc fce7 	bl	8004328 <HAL_GPIO_WritePin>
 800795a:	e005      	b.n	8007968 <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800795c:	2200      	movs	r2, #0
 800795e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007962:	481e      	ldr	r0, [pc, #120]	; (80079dc <OLED_WR_Byte+0xa4>)
 8007964:	f7fc fce0 	bl	8004328 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
 800796c:	e028      	b.n	80079c0 <OLED_WR_Byte+0x88>
	{
		OLED_SCL_Clr();
 800796e:	2200      	movs	r2, #0
 8007970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007974:	4819      	ldr	r0, [pc, #100]	; (80079dc <OLED_WR_Byte+0xa4>)
 8007976:	f7fc fcd7 	bl	8004328 <HAL_GPIO_WritePin>

		delay();
 800797a:	f7ff ffcb 	bl	8007914 <delay>
		if (dat & 0x80)
 800797e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007982:	2b00      	cmp	r3, #0
 8007984:	da06      	bge.n	8007994 <OLED_WR_Byte+0x5c>
			OLED_SDA_Set();
 8007986:	2201      	movs	r2, #1
 8007988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800798c:	4813      	ldr	r0, [pc, #76]	; (80079dc <OLED_WR_Byte+0xa4>)
 800798e:	f7fc fccb 	bl	8004328 <HAL_GPIO_WritePin>
 8007992:	e005      	b.n	80079a0 <OLED_WR_Byte+0x68>
		else
			OLED_SDA_Clr();
 8007994:	2200      	movs	r2, #0
 8007996:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800799a:	4810      	ldr	r0, [pc, #64]	; (80079dc <OLED_WR_Byte+0xa4>)
 800799c:	f7fc fcc4 	bl	8004328 <HAL_GPIO_WritePin>
		delay();
 80079a0:	f7ff ffb8 	bl	8007914 <delay>
		OLED_SCL_Set();
 80079a4:	2201      	movs	r2, #1
 80079a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079aa:	480c      	ldr	r0, [pc, #48]	; (80079dc <OLED_WR_Byte+0xa4>)
 80079ac:	f7fc fcbc 	bl	8004328 <HAL_GPIO_WritePin>
		delay();
 80079b0:	f7ff ffb0 	bl	8007914 <delay>
		dat <<= 1;
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	3301      	adds	r3, #1
 80079be:	73fb      	strb	r3, [r7, #15]
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	2b07      	cmp	r3, #7
 80079c4:	d9d3      	bls.n	800796e <OLED_WR_Byte+0x36>
	}
	OLED_DC_Set();
 80079c6:	2201      	movs	r2, #1
 80079c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079cc:	4803      	ldr	r0, [pc, #12]	; (80079dc <OLED_WR_Byte+0xa4>)
 80079ce:	f7fc fcab 	bl	8004328 <HAL_GPIO_WritePin>
}
 80079d2:	bf00      	nop
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	48000400 	.word	0x48000400

080079e0 <OLED_Refresh>:
	OLED_WR_Byte(0x10, OLED_CMD); //�رյ�ɱ�?
	OLED_WR_Byte(0xAE, OLED_CMD); //�ر���Ļ
}

void OLED_Refresh(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
	u8 i, n;
	for (i = 0; i < 8; i++)
 80079e6:	2300      	movs	r3, #0
 80079e8:	71fb      	strb	r3, [r7, #7]
 80079ea:	e026      	b.n	8007a3a <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); //��������ʼ��ַ
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	3b50      	subs	r3, #80	; 0x50
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2100      	movs	r1, #0
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7ff ff9f 	bl	8007938 <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);	  //���õ�����ʼ��ַ
 80079fa:	2100      	movs	r1, #0
 80079fc:	2002      	movs	r0, #2
 80079fe:	f7ff ff9b 	bl	8007938 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  //���ø�����ʼ��ַ
 8007a02:	2100      	movs	r1, #0
 8007a04:	2010      	movs	r0, #16
 8007a06:	f7ff ff97 	bl	8007938 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	71bb      	strb	r3, [r7, #6]
 8007a0e:	e00d      	b.n	8007a2c <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8007a10:	79ba      	ldrb	r2, [r7, #6]
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	490c      	ldr	r1, [pc, #48]	; (8007a48 <OLED_Refresh+0x68>)
 8007a16:	00d2      	lsls	r2, r2, #3
 8007a18:	440a      	add	r2, r1
 8007a1a:	4413      	add	r3, r2
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff ff89 	bl	8007938 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8007a26:	79bb      	ldrb	r3, [r7, #6]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	71bb      	strb	r3, [r7, #6]
 8007a2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	daed      	bge.n	8007a10 <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	3301      	adds	r3, #1
 8007a38:	71fb      	strb	r3, [r7, #7]
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	2b07      	cmp	r3, #7
 8007a3e:	d9d5      	bls.n	80079ec <OLED_Refresh+0xc>
	}
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	200004c0 	.word	0x200004c0

08007a4c <OLED_Clear>:

void OLED_Clear(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
	u8 i, n;
	for (i = 0; i < 8; i++)
 8007a52:	2300      	movs	r3, #0
 8007a54:	71fb      	strb	r3, [r7, #7]
 8007a56:	e014      	b.n	8007a82 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	71bb      	strb	r3, [r7, #6]
 8007a5c:	e00a      	b.n	8007a74 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; //�����������?
 8007a5e:	79ba      	ldrb	r2, [r7, #6]
 8007a60:	79fb      	ldrb	r3, [r7, #7]
 8007a62:	490c      	ldr	r1, [pc, #48]	; (8007a94 <OLED_Clear+0x48>)
 8007a64:	00d2      	lsls	r2, r2, #3
 8007a66:	440a      	add	r2, r1
 8007a68:	4413      	add	r3, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 8007a6e:	79bb      	ldrb	r3, [r7, #6]
 8007a70:	3301      	adds	r3, #1
 8007a72:	71bb      	strb	r3, [r7, #6]
 8007a74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	daf0      	bge.n	8007a5e <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	71fb      	strb	r3, [r7, #7]
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	2b07      	cmp	r3, #7
 8007a86:	d9e7      	bls.n	8007a58 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); //������ʾ
 8007a88:	f7ff ffaa 	bl	80079e0 <OLED_Refresh>
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	200004c0 	.word	0x200004c0

08007a98 <OLED_DrawPoint>:

void OLED_DrawPoint(u8 x, u8 y, u8 t)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	71fb      	strb	r3, [r7, #7]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	71bb      	strb	r3, [r7, #6]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	717b      	strb	r3, [r7, #5]
	u8 i, j;
	i = y / 8;
 8007aaa:	79bb      	ldrb	r3, [r7, #6]
 8007aac:	08db      	lsrs	r3, r3, #3
 8007aae:	73fb      	strb	r3, [r7, #15]
	j = y % 8;
 8007ab0:	79bb      	ldrb	r3, [r7, #6]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	73bb      	strb	r3, [r7, #14]
	if (t)
 8007ab8:	797b      	ldrb	r3, [r7, #5]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d018      	beq.n	8007af0 <OLED_DrawPoint+0x58>
	{
		OLED_GRAM[x][i] |= 1 << j;
 8007abe:	79fa      	ldrb	r2, [r7, #7]
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	491b      	ldr	r1, [pc, #108]	; (8007b30 <OLED_DrawPoint+0x98>)
 8007ac4:	00d2      	lsls	r2, r2, #3
 8007ac6:	440a      	add	r2, r1
 8007ac8:	4413      	add	r3, r2
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b25a      	sxtb	r2, r3
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	b259      	sxtb	r1, r3
 8007adc:	79fa      	ldrb	r2, [r7, #7]
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	b2c8      	uxtb	r0, r1
 8007ae2:	4913      	ldr	r1, [pc, #76]	; (8007b30 <OLED_DrawPoint+0x98>)
 8007ae4:	00d2      	lsls	r2, r2, #3
 8007ae6:	440a      	add	r2, r1
 8007ae8:	4413      	add	r3, r2
 8007aea:	4602      	mov	r2, r0
 8007aec:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		OLED_GRAM[x][i] &= ~(1 << j);
	}
}
 8007aee:	e019      	b.n	8007b24 <OLED_DrawPoint+0x8c>
		OLED_GRAM[x][i] &= ~(1 << j);
 8007af0:	79fa      	ldrb	r2, [r7, #7]
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	490e      	ldr	r1, [pc, #56]	; (8007b30 <OLED_DrawPoint+0x98>)
 8007af6:	00d2      	lsls	r2, r2, #3
 8007af8:	440a      	add	r2, r1
 8007afa:	4413      	add	r3, r2
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b25a      	sxtb	r2, r3
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2101      	movs	r1, #1
 8007b04:	fa01 f303 	lsl.w	r3, r1, r3
 8007b08:	b25b      	sxtb	r3, r3
 8007b0a:	43db      	mvns	r3, r3
 8007b0c:	b25b      	sxtb	r3, r3
 8007b0e:	4013      	ands	r3, r2
 8007b10:	b259      	sxtb	r1, r3
 8007b12:	79fa      	ldrb	r2, [r7, #7]
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	b2c8      	uxtb	r0, r1
 8007b18:	4905      	ldr	r1, [pc, #20]	; (8007b30 <OLED_DrawPoint+0x98>)
 8007b1a:	00d2      	lsls	r2, r2, #3
 8007b1c:	440a      	add	r2, r1
 8007b1e:	4413      	add	r3, r2
 8007b20:	4602      	mov	r2, r0
 8007b22:	701a      	strb	r2, [r3, #0]
}
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	200004c0 	.word	0x200004c0

08007b34 <OLED_ShowChar>:
		}
	}
}

void OLED_ShowChar(u8 x, u8 y, u8 chr, u8 size1, u8 mode)
{
 8007b34:	b590      	push	{r4, r7, lr}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	4611      	mov	r1, r2
 8007b40:	461a      	mov	r2, r3
 8007b42:	4623      	mov	r3, r4
 8007b44:	71fb      	strb	r3, [r7, #7]
 8007b46:	4603      	mov	r3, r0
 8007b48:	71bb      	strb	r3, [r7, #6]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	717b      	strb	r3, [r7, #5]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	713b      	strb	r3, [r7, #4]
	u8 i, m, temp, size2, chr1;
	u8 x0 = x, y0 = y;
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	72bb      	strb	r3, [r7, #10]
 8007b56:	79bb      	ldrb	r3, [r7, #6]
 8007b58:	72fb      	strb	r3, [r7, #11]
	if (size1 == 8)
 8007b5a:	793b      	ldrb	r3, [r7, #4]
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d102      	bne.n	8007b66 <OLED_ShowChar+0x32>
		size2 = 6;
 8007b60:	2306      	movs	r3, #6
 8007b62:	733b      	strb	r3, [r7, #12]
 8007b64:	e014      	b.n	8007b90 <OLED_ShowChar+0x5c>
	else
		size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); 
 8007b66:	793b      	ldrb	r3, [r7, #4]
 8007b68:	08db      	lsrs	r3, r3, #3
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	793b      	ldrb	r3, [r7, #4]
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf14      	ite	ne
 8007b7a:	2301      	movne	r3, #1
 8007b7c:	2300      	moveq	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	4413      	add	r3, r2
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	793b      	ldrb	r3, [r7, #4]
 8007b86:	085b      	lsrs	r3, r3, #1
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	fb12 f303 	smulbb	r3, r2, r3
 8007b8e:	733b      	strb	r3, [r7, #12]
	chr1 = chr - ' ';											   
 8007b90:	797b      	ldrb	r3, [r7, #5]
 8007b92:	3b20      	subs	r3, #32
 8007b94:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < size2; i++)
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
 8007b9a:	e069      	b.n	8007c70 <OLED_ShowChar+0x13c>
	{
		if (size1 == 8)
 8007b9c:	793b      	ldrb	r3, [r7, #4]
 8007b9e:	2b08      	cmp	r3, #8
 8007ba0:	d10b      	bne.n	8007bba <OLED_ShowChar+0x86>
		{
			temp = asc2_0806[chr1][i];
 8007ba2:	7a7a      	ldrb	r2, [r7, #9]
 8007ba4:	7bf9      	ldrb	r1, [r7, #15]
 8007ba6:	4837      	ldr	r0, [pc, #220]	; (8007c84 <OLED_ShowChar+0x150>)
 8007ba8:	4613      	mov	r3, r2
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	4413      	add	r3, r2
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	4403      	add	r3, r0
 8007bb2:	440b      	add	r3, r1
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	737b      	strb	r3, [r7, #13]
 8007bb8:	e019      	b.n	8007bee <OLED_ShowChar+0xba>
		} 
		else if (size1 == 12)
 8007bba:	793b      	ldrb	r3, [r7, #4]
 8007bbc:	2b0c      	cmp	r3, #12
 8007bbe:	d10b      	bne.n	8007bd8 <OLED_ShowChar+0xa4>
		{
			temp = asc2_1206[chr1][i];
 8007bc0:	7a7a      	ldrb	r2, [r7, #9]
 8007bc2:	7bf9      	ldrb	r1, [r7, #15]
 8007bc4:	4830      	ldr	r0, [pc, #192]	; (8007c88 <OLED_ShowChar+0x154>)
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4403      	add	r3, r0
 8007bd0:	440b      	add	r3, r1
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	737b      	strb	r3, [r7, #13]
 8007bd6:	e00a      	b.n	8007bee <OLED_ShowChar+0xba>
		} 
		else if (size1 == 16)
 8007bd8:	793b      	ldrb	r3, [r7, #4]
 8007bda:	2b10      	cmp	r3, #16
 8007bdc:	d14d      	bne.n	8007c7a <OLED_ShowChar+0x146>
		{
			temp = asc2_1608[chr1][i];
 8007bde:	7a7a      	ldrb	r2, [r7, #9]
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	492a      	ldr	r1, [pc, #168]	; (8007c8c <OLED_ShowChar+0x158>)
 8007be4:	0112      	lsls	r2, r2, #4
 8007be6:	440a      	add	r2, r1
 8007be8:	4413      	add	r3, r2
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	737b      	strb	r3, [r7, #13]
		} 
		else
			return;
		for (m = 0; m < 8; m++)
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73bb      	strb	r3, [r7, #14]
 8007bf2:	e022      	b.n	8007c3a <OLED_ShowChar+0x106>
		{
			if (temp & 0x01)
 8007bf4:	7b7b      	ldrb	r3, [r7, #13]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d007      	beq.n	8007c0e <OLED_ShowChar+0xda>
				OLED_DrawPoint(x, y, mode);
 8007bfe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007c02:	79b9      	ldrb	r1, [r7, #6]
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff ff46 	bl	8007a98 <OLED_DrawPoint>
 8007c0c:	e00c      	b.n	8007c28 <OLED_ShowChar+0xf4>
			else
				OLED_DrawPoint(x, y, !mode);
 8007c0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf0c      	ite	eq
 8007c16:	2301      	moveq	r3, #1
 8007c18:	2300      	movne	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	79b9      	ldrb	r1, [r7, #6]
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff ff38 	bl	8007a98 <OLED_DrawPoint>
			temp >>= 1;
 8007c28:	7b7b      	ldrb	r3, [r7, #13]
 8007c2a:	085b      	lsrs	r3, r3, #1
 8007c2c:	737b      	strb	r3, [r7, #13]
			y++;
 8007c2e:	79bb      	ldrb	r3, [r7, #6]
 8007c30:	3301      	adds	r3, #1
 8007c32:	71bb      	strb	r3, [r7, #6]
		for (m = 0; m < 8; m++)
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	3301      	adds	r3, #1
 8007c38:	73bb      	strb	r3, [r7, #14]
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b07      	cmp	r3, #7
 8007c3e:	d9d9      	bls.n	8007bf4 <OLED_ShowChar+0xc0>
		}
		x++;
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	3301      	adds	r3, #1
 8007c44:	71fb      	strb	r3, [r7, #7]
		if ((size1 != 8) && ((x - x0) == size1 / 2))
 8007c46:	793b      	ldrb	r3, [r7, #4]
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d00c      	beq.n	8007c66 <OLED_ShowChar+0x132>
 8007c4c:	79fa      	ldrb	r2, [r7, #7]
 8007c4e:	7abb      	ldrb	r3, [r7, #10]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	793a      	ldrb	r2, [r7, #4]
 8007c54:	0852      	lsrs	r2, r2, #1
 8007c56:	b2d2      	uxtb	r2, r2
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d104      	bne.n	8007c66 <OLED_ShowChar+0x132>
		{
			x = x0;
 8007c5c:	7abb      	ldrb	r3, [r7, #10]
 8007c5e:	71fb      	strb	r3, [r7, #7]
			y0 = y0 + 8;
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	3308      	adds	r3, #8
 8007c64:	72fb      	strb	r3, [r7, #11]
		}
		y = y0;
 8007c66:	7afb      	ldrb	r3, [r7, #11]
 8007c68:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < size2; i++)
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	73fb      	strb	r3, [r7, #15]
 8007c70:	7bfa      	ldrb	r2, [r7, #15]
 8007c72:	7b3b      	ldrb	r3, [r7, #12]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d391      	bcc.n	8007b9c <OLED_ShowChar+0x68>
 8007c78:	e000      	b.n	8007c7c <OLED_ShowChar+0x148>
			return;
 8007c7a:	bf00      	nop
	}
}
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd90      	pop	{r4, r7, pc}
 8007c82:	bf00      	nop
 8007c84:	0800a8d8 	.word	0x0800a8d8
 8007c88:	0800ab00 	.word	0x0800ab00
 8007c8c:	0800af74 	.word	0x0800af74

08007c90 <OLED_ShowString>:

void OLED_ShowString(u8 x, u8 y, u8 *chr, u8 size1, u8 mode)
{
 8007c90:	b590      	push	{r4, r7, lr}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	603a      	str	r2, [r7, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	71fb      	strb	r3, [r7, #7]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	71bb      	strb	r3, [r7, #6]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) 
 8007ca6:	e019      	b.n	8007cdc <OLED_ShowString+0x4c>
	{
		OLED_ShowChar(x, y, *chr, size1, mode);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781a      	ldrb	r2, [r3, #0]
 8007cac:	797c      	ldrb	r4, [r7, #5]
 8007cae:	79b9      	ldrb	r1, [r7, #6]
 8007cb0:	79f8      	ldrb	r0, [r7, #7]
 8007cb2:	7e3b      	ldrb	r3, [r7, #24]
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	4623      	mov	r3, r4
 8007cb8:	f7ff ff3c 	bl	8007b34 <OLED_ShowChar>
		if (size1 == 8)
 8007cbc:	797b      	ldrb	r3, [r7, #5]
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d103      	bne.n	8007cca <OLED_ShowString+0x3a>
			x += 6;
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	3306      	adds	r3, #6
 8007cc6:	71fb      	strb	r3, [r7, #7]
 8007cc8:	e005      	b.n	8007cd6 <OLED_ShowString+0x46>
		else
			x += size1 / 2;
 8007cca:	797b      	ldrb	r3, [r7, #5]
 8007ccc:	085b      	lsrs	r3, r3, #1
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	71fb      	strb	r3, [r7, #7]
		chr++;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) 
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b1f      	cmp	r3, #31
 8007ce2:	d903      	bls.n	8007cec <OLED_ShowString+0x5c>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b7e      	cmp	r3, #126	; 0x7e
 8007cea:	d9dd      	bls.n	8007ca8 <OLED_ShowString+0x18>
	}
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd90      	pop	{r4, r7, pc}

08007cf4 <OLED_Init>:
		}
	}
}
//OLED�ĳ�ʼ��
void OLED_Init(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
	OLED_RES_Clr();
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007cfe:	483c      	ldr	r0, [pc, #240]	; (8007df0 <OLED_Init+0xfc>)
 8007d00:	f7fc fb12 	bl	8004328 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8007d04:	20c8      	movs	r0, #200	; 0xc8
 8007d06:	f7fa f9e3 	bl	80020d0 <HAL_Delay>
	OLED_RES_Set();
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d10:	4837      	ldr	r0, [pc, #220]	; (8007df0 <OLED_Init+0xfc>)
 8007d12:	f7fc fb09 	bl	8004328 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); /*display off*/
 8007d16:	2100      	movs	r1, #0
 8007d18:	20ae      	movs	r0, #174	; 0xae
 8007d1a:	f7ff fe0d 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); /*set lower column address*/
 8007d1e:	2100      	movs	r1, #0
 8007d20:	2002      	movs	r0, #2
 8007d22:	f7ff fe09 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); /*set higher column address*/
 8007d26:	2100      	movs	r1, #0
 8007d28:	2010      	movs	r0, #16
 8007d2a:	f7ff fe05 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); /*set display start line*/
 8007d2e:	2100      	movs	r1, #0
 8007d30:	2040      	movs	r0, #64	; 0x40
 8007d32:	f7ff fe01 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0, OLED_CMD); /*set page address*/
 8007d36:	2100      	movs	r1, #0
 8007d38:	20b0      	movs	r0, #176	; 0xb0
 8007d3a:	f7ff fdfd 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); /*contract control*/
 8007d3e:	2100      	movs	r1, #0
 8007d40:	2081      	movs	r0, #129	; 0x81
 8007d42:	f7ff fdf9 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xcf, OLED_CMD); /*128*/
 8007d46:	2100      	movs	r1, #0
 8007d48:	20cf      	movs	r0, #207	; 0xcf
 8007d4a:	f7ff fdf5 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); /*set segment remap*/
 8007d4e:	2100      	movs	r1, #0
 8007d50:	20a1      	movs	r0, #161	; 0xa1
 8007d52:	f7ff fdf1 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); /*normal / reverse*/
 8007d56:	2100      	movs	r1, #0
 8007d58:	20a6      	movs	r0, #166	; 0xa6
 8007d5a:	f7ff fded 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); /*multiplex ratio*/
 8007d5e:	2100      	movs	r1, #0
 8007d60:	20a8      	movs	r0, #168	; 0xa8
 8007d62:	f7ff fde9 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F, OLED_CMD); /*duty = 1/64*/
 8007d66:	2100      	movs	r1, #0
 8007d68:	203f      	movs	r0, #63	; 0x3f
 8007d6a:	f7ff fde5 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xad, OLED_CMD); /*set charge pump enable*/
 8007d6e:	2100      	movs	r1, #0
 8007d70:	20ad      	movs	r0, #173	; 0xad
 8007d72:	f7ff fde1 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x8b, OLED_CMD); /* 0x8B �ڹ� VCC */
 8007d76:	2100      	movs	r1, #0
 8007d78:	208b      	movs	r0, #139	; 0x8b
 8007d7a:	f7ff fddd 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x33, OLED_CMD); /*0X30---0X33 set VPP 9V */
 8007d7e:	2100      	movs	r1, #0
 8007d80:	2033      	movs	r0, #51	; 0x33
 8007d82:	f7ff fdd9 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); /*Com scan direction*/
 8007d86:	2100      	movs	r1, #0
 8007d88:	20c8      	movs	r0, #200	; 0xc8
 8007d8a:	f7ff fdd5 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); /*set display offset*/
 8007d8e:	2100      	movs	r1, #0
 8007d90:	20d3      	movs	r0, #211	; 0xd3
 8007d92:	f7ff fdd1 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); /* 0x20 */
 8007d96:	2100      	movs	r1, #0
 8007d98:	2000      	movs	r0, #0
 8007d9a:	f7ff fdcd 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5, OLED_CMD); /*set osc division*/
 8007d9e:	2100      	movs	r1, #0
 8007da0:	20d5      	movs	r0, #213	; 0xd5
 8007da2:	f7ff fdc9 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD);
 8007da6:	2100      	movs	r1, #0
 8007da8:	2080      	movs	r0, #128	; 0x80
 8007daa:	f7ff fdc5 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); /*set pre-charge period*/
 8007dae:	2100      	movs	r1, #0
 8007db0:	20d9      	movs	r0, #217	; 0xd9
 8007db2:	f7ff fdc1 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x1f, OLED_CMD); /*0x22*/
 8007db6:	2100      	movs	r1, #0
 8007db8:	201f      	movs	r0, #31
 8007dba:	f7ff fdbd 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); /*set COM pins*/
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	20da      	movs	r0, #218	; 0xda
 8007dc2:	f7ff fdb9 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	2012      	movs	r0, #18
 8007dca:	f7ff fdb5 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0xdb, OLED_CMD); /*set vcomh*/
 8007dce:	2100      	movs	r1, #0
 8007dd0:	20db      	movs	r0, #219	; 0xdb
 8007dd2:	f7ff fdb1 	bl	8007938 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD);
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	2040      	movs	r0, #64	; 0x40
 8007dda:	f7ff fdad 	bl	8007938 <OLED_WR_Byte>
	OLED_Clear();
 8007dde:	f7ff fe35 	bl	8007a4c <OLED_Clear>
	OLED_WR_Byte(0xAF, OLED_CMD); /*display ON*/
 8007de2:	2100      	movs	r1, #0
 8007de4:	20af      	movs	r0, #175	; 0xaf
 8007de6:	f7ff fda7 	bl	8007938 <OLED_WR_Byte>
}
 8007dea:	bf00      	nop
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	48000400 	.word	0x48000400

08007df4 <__errno>:
 8007df4:	4b01      	ldr	r3, [pc, #4]	; (8007dfc <__errno+0x8>)
 8007df6:	6818      	ldr	r0, [r3, #0]
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	2000000c 	.word	0x2000000c

08007e00 <__libc_init_array>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	4e0d      	ldr	r6, [pc, #52]	; (8007e38 <__libc_init_array+0x38>)
 8007e04:	4c0d      	ldr	r4, [pc, #52]	; (8007e3c <__libc_init_array+0x3c>)
 8007e06:	1ba4      	subs	r4, r4, r6
 8007e08:	10a4      	asrs	r4, r4, #2
 8007e0a:	2500      	movs	r5, #0
 8007e0c:	42a5      	cmp	r5, r4
 8007e0e:	d109      	bne.n	8007e24 <__libc_init_array+0x24>
 8007e10:	4e0b      	ldr	r6, [pc, #44]	; (8007e40 <__libc_init_array+0x40>)
 8007e12:	4c0c      	ldr	r4, [pc, #48]	; (8007e44 <__libc_init_array+0x44>)
 8007e14:	f002 fd00 	bl	800a818 <_init>
 8007e18:	1ba4      	subs	r4, r4, r6
 8007e1a:	10a4      	asrs	r4, r4, #2
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	42a5      	cmp	r5, r4
 8007e20:	d105      	bne.n	8007e2e <__libc_init_array+0x2e>
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
 8007e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e28:	4798      	blx	r3
 8007e2a:	3501      	adds	r5, #1
 8007e2c:	e7ee      	b.n	8007e0c <__libc_init_array+0xc>
 8007e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e32:	4798      	blx	r3
 8007e34:	3501      	adds	r5, #1
 8007e36:	e7f2      	b.n	8007e1e <__libc_init_array+0x1e>
 8007e38:	0800b830 	.word	0x0800b830
 8007e3c:	0800b830 	.word	0x0800b830
 8007e40:	0800b830 	.word	0x0800b830
 8007e44:	0800b834 	.word	0x0800b834

08007e48 <memset>:
 8007e48:	4402      	add	r2, r0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d100      	bne.n	8007e52 <memset+0xa>
 8007e50:	4770      	bx	lr
 8007e52:	f803 1b01 	strb.w	r1, [r3], #1
 8007e56:	e7f9      	b.n	8007e4c <memset+0x4>

08007e58 <__cvt>:
 8007e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5c:	ec55 4b10 	vmov	r4, r5, d0
 8007e60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007e62:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	460e      	mov	r6, r1
 8007e6a:	4691      	mov	r9, r2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	bfb8      	it	lt
 8007e70:	4622      	movlt	r2, r4
 8007e72:	462b      	mov	r3, r5
 8007e74:	f027 0720 	bic.w	r7, r7, #32
 8007e78:	bfbb      	ittet	lt
 8007e7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e7e:	461d      	movlt	r5, r3
 8007e80:	2300      	movge	r3, #0
 8007e82:	232d      	movlt	r3, #45	; 0x2d
 8007e84:	bfb8      	it	lt
 8007e86:	4614      	movlt	r4, r2
 8007e88:	2f46      	cmp	r7, #70	; 0x46
 8007e8a:	700b      	strb	r3, [r1, #0]
 8007e8c:	d004      	beq.n	8007e98 <__cvt+0x40>
 8007e8e:	2f45      	cmp	r7, #69	; 0x45
 8007e90:	d100      	bne.n	8007e94 <__cvt+0x3c>
 8007e92:	3601      	adds	r6, #1
 8007e94:	2102      	movs	r1, #2
 8007e96:	e000      	b.n	8007e9a <__cvt+0x42>
 8007e98:	2103      	movs	r1, #3
 8007e9a:	ab03      	add	r3, sp, #12
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	ab02      	add	r3, sp, #8
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	4632      	mov	r2, r6
 8007ea4:	4653      	mov	r3, sl
 8007ea6:	ec45 4b10 	vmov	d0, r4, r5
 8007eaa:	f000 fcf5 	bl	8008898 <_dtoa_r>
 8007eae:	2f47      	cmp	r7, #71	; 0x47
 8007eb0:	4680      	mov	r8, r0
 8007eb2:	d102      	bne.n	8007eba <__cvt+0x62>
 8007eb4:	f019 0f01 	tst.w	r9, #1
 8007eb8:	d026      	beq.n	8007f08 <__cvt+0xb0>
 8007eba:	2f46      	cmp	r7, #70	; 0x46
 8007ebc:	eb08 0906 	add.w	r9, r8, r6
 8007ec0:	d111      	bne.n	8007ee6 <__cvt+0x8e>
 8007ec2:	f898 3000 	ldrb.w	r3, [r8]
 8007ec6:	2b30      	cmp	r3, #48	; 0x30
 8007ec8:	d10a      	bne.n	8007ee0 <__cvt+0x88>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2300      	movs	r3, #0
 8007ece:	4620      	mov	r0, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7f8 fe21 	bl	8000b18 <__aeabi_dcmpeq>
 8007ed6:	b918      	cbnz	r0, 8007ee0 <__cvt+0x88>
 8007ed8:	f1c6 0601 	rsb	r6, r6, #1
 8007edc:	f8ca 6000 	str.w	r6, [sl]
 8007ee0:	f8da 3000 	ldr.w	r3, [sl]
 8007ee4:	4499      	add	r9, r3
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4620      	mov	r0, r4
 8007eec:	4629      	mov	r1, r5
 8007eee:	f7f8 fe13 	bl	8000b18 <__aeabi_dcmpeq>
 8007ef2:	b938      	cbnz	r0, 8007f04 <__cvt+0xac>
 8007ef4:	2230      	movs	r2, #48	; 0x30
 8007ef6:	9b03      	ldr	r3, [sp, #12]
 8007ef8:	454b      	cmp	r3, r9
 8007efa:	d205      	bcs.n	8007f08 <__cvt+0xb0>
 8007efc:	1c59      	adds	r1, r3, #1
 8007efe:	9103      	str	r1, [sp, #12]
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	e7f8      	b.n	8007ef6 <__cvt+0x9e>
 8007f04:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f0c:	eba3 0308 	sub.w	r3, r3, r8
 8007f10:	4640      	mov	r0, r8
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	b004      	add	sp, #16
 8007f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f1a <__exponent>:
 8007f1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f1c:	2900      	cmp	r1, #0
 8007f1e:	4604      	mov	r4, r0
 8007f20:	bfba      	itte	lt
 8007f22:	4249      	neglt	r1, r1
 8007f24:	232d      	movlt	r3, #45	; 0x2d
 8007f26:	232b      	movge	r3, #43	; 0x2b
 8007f28:	2909      	cmp	r1, #9
 8007f2a:	f804 2b02 	strb.w	r2, [r4], #2
 8007f2e:	7043      	strb	r3, [r0, #1]
 8007f30:	dd20      	ble.n	8007f74 <__exponent+0x5a>
 8007f32:	f10d 0307 	add.w	r3, sp, #7
 8007f36:	461f      	mov	r7, r3
 8007f38:	260a      	movs	r6, #10
 8007f3a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f3e:	fb06 1115 	mls	r1, r6, r5, r1
 8007f42:	3130      	adds	r1, #48	; 0x30
 8007f44:	2d09      	cmp	r5, #9
 8007f46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f4a:	f103 32ff 	add.w	r2, r3, #4294967295
 8007f4e:	4629      	mov	r1, r5
 8007f50:	dc09      	bgt.n	8007f66 <__exponent+0x4c>
 8007f52:	3130      	adds	r1, #48	; 0x30
 8007f54:	3b02      	subs	r3, #2
 8007f56:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f5a:	42bb      	cmp	r3, r7
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	d304      	bcc.n	8007f6a <__exponent+0x50>
 8007f60:	1a10      	subs	r0, r2, r0
 8007f62:	b003      	add	sp, #12
 8007f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f66:	4613      	mov	r3, r2
 8007f68:	e7e7      	b.n	8007f3a <__exponent+0x20>
 8007f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f6e:	f804 2b01 	strb.w	r2, [r4], #1
 8007f72:	e7f2      	b.n	8007f5a <__exponent+0x40>
 8007f74:	2330      	movs	r3, #48	; 0x30
 8007f76:	4419      	add	r1, r3
 8007f78:	7083      	strb	r3, [r0, #2]
 8007f7a:	1d02      	adds	r2, r0, #4
 8007f7c:	70c1      	strb	r1, [r0, #3]
 8007f7e:	e7ef      	b.n	8007f60 <__exponent+0x46>

08007f80 <_printf_float>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	b08d      	sub	sp, #52	; 0x34
 8007f86:	460c      	mov	r4, r1
 8007f88:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007f8c:	4616      	mov	r6, r2
 8007f8e:	461f      	mov	r7, r3
 8007f90:	4605      	mov	r5, r0
 8007f92:	f001 fb03 	bl	800959c <_localeconv_r>
 8007f96:	6803      	ldr	r3, [r0, #0]
 8007f98:	9304      	str	r3, [sp, #16]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7f8 f940 	bl	8000220 <strlen>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa8:	9005      	str	r0, [sp, #20]
 8007faa:	3307      	adds	r3, #7
 8007fac:	f023 0307 	bic.w	r3, r3, #7
 8007fb0:	f103 0208 	add.w	r2, r3, #8
 8007fb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007fb8:	f8d4 b000 	ldr.w	fp, [r4]
 8007fbc:	f8c8 2000 	str.w	r2, [r8]
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007fc8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007fcc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fd0:	9307      	str	r3, [sp, #28]
 8007fd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fda:	4ba7      	ldr	r3, [pc, #668]	; (8008278 <_printf_float+0x2f8>)
 8007fdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fe0:	f7f8 fdcc 	bl	8000b7c <__aeabi_dcmpun>
 8007fe4:	bb70      	cbnz	r0, 8008044 <_printf_float+0xc4>
 8007fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fea:	4ba3      	ldr	r3, [pc, #652]	; (8008278 <_printf_float+0x2f8>)
 8007fec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ff0:	f7f8 fda6 	bl	8000b40 <__aeabi_dcmple>
 8007ff4:	bb30      	cbnz	r0, 8008044 <_printf_float+0xc4>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	f7f8 fd95 	bl	8000b2c <__aeabi_dcmplt>
 8008002:	b110      	cbz	r0, 800800a <_printf_float+0x8a>
 8008004:	232d      	movs	r3, #45	; 0x2d
 8008006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800800a:	4a9c      	ldr	r2, [pc, #624]	; (800827c <_printf_float+0x2fc>)
 800800c:	4b9c      	ldr	r3, [pc, #624]	; (8008280 <_printf_float+0x300>)
 800800e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008012:	bf8c      	ite	hi
 8008014:	4690      	movhi	r8, r2
 8008016:	4698      	movls	r8, r3
 8008018:	2303      	movs	r3, #3
 800801a:	f02b 0204 	bic.w	r2, fp, #4
 800801e:	6123      	str	r3, [r4, #16]
 8008020:	6022      	str	r2, [r4, #0]
 8008022:	f04f 0900 	mov.w	r9, #0
 8008026:	9700      	str	r7, [sp, #0]
 8008028:	4633      	mov	r3, r6
 800802a:	aa0b      	add	r2, sp, #44	; 0x2c
 800802c:	4621      	mov	r1, r4
 800802e:	4628      	mov	r0, r5
 8008030:	f000 f9e6 	bl	8008400 <_printf_common>
 8008034:	3001      	adds	r0, #1
 8008036:	f040 808d 	bne.w	8008154 <_printf_float+0x1d4>
 800803a:	f04f 30ff 	mov.w	r0, #4294967295
 800803e:	b00d      	add	sp, #52	; 0x34
 8008040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008044:	4642      	mov	r2, r8
 8008046:	464b      	mov	r3, r9
 8008048:	4640      	mov	r0, r8
 800804a:	4649      	mov	r1, r9
 800804c:	f7f8 fd96 	bl	8000b7c <__aeabi_dcmpun>
 8008050:	b110      	cbz	r0, 8008058 <_printf_float+0xd8>
 8008052:	4a8c      	ldr	r2, [pc, #560]	; (8008284 <_printf_float+0x304>)
 8008054:	4b8c      	ldr	r3, [pc, #560]	; (8008288 <_printf_float+0x308>)
 8008056:	e7da      	b.n	800800e <_printf_float+0x8e>
 8008058:	6861      	ldr	r1, [r4, #4]
 800805a:	1c4b      	adds	r3, r1, #1
 800805c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008060:	a80a      	add	r0, sp, #40	; 0x28
 8008062:	d13e      	bne.n	80080e2 <_printf_float+0x162>
 8008064:	2306      	movs	r3, #6
 8008066:	6063      	str	r3, [r4, #4]
 8008068:	2300      	movs	r3, #0
 800806a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800806e:	ab09      	add	r3, sp, #36	; 0x24
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	ec49 8b10 	vmov	d0, r8, r9
 8008076:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800807a:	6022      	str	r2, [r4, #0]
 800807c:	f8cd a004 	str.w	sl, [sp, #4]
 8008080:	6861      	ldr	r1, [r4, #4]
 8008082:	4628      	mov	r0, r5
 8008084:	f7ff fee8 	bl	8007e58 <__cvt>
 8008088:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800808c:	2b47      	cmp	r3, #71	; 0x47
 800808e:	4680      	mov	r8, r0
 8008090:	d109      	bne.n	80080a6 <_printf_float+0x126>
 8008092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008094:	1cd8      	adds	r0, r3, #3
 8008096:	db02      	blt.n	800809e <_printf_float+0x11e>
 8008098:	6862      	ldr	r2, [r4, #4]
 800809a:	4293      	cmp	r3, r2
 800809c:	dd47      	ble.n	800812e <_printf_float+0x1ae>
 800809e:	f1aa 0a02 	sub.w	sl, sl, #2
 80080a2:	fa5f fa8a 	uxtb.w	sl, sl
 80080a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80080aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ac:	d824      	bhi.n	80080f8 <_printf_float+0x178>
 80080ae:	3901      	subs	r1, #1
 80080b0:	4652      	mov	r2, sl
 80080b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080b6:	9109      	str	r1, [sp, #36]	; 0x24
 80080b8:	f7ff ff2f 	bl	8007f1a <__exponent>
 80080bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080be:	1813      	adds	r3, r2, r0
 80080c0:	2a01      	cmp	r2, #1
 80080c2:	4681      	mov	r9, r0
 80080c4:	6123      	str	r3, [r4, #16]
 80080c6:	dc02      	bgt.n	80080ce <_printf_float+0x14e>
 80080c8:	6822      	ldr	r2, [r4, #0]
 80080ca:	07d1      	lsls	r1, r2, #31
 80080cc:	d501      	bpl.n	80080d2 <_printf_float+0x152>
 80080ce:	3301      	adds	r3, #1
 80080d0:	6123      	str	r3, [r4, #16]
 80080d2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0a5      	beq.n	8008026 <_printf_float+0xa6>
 80080da:	232d      	movs	r3, #45	; 0x2d
 80080dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e0:	e7a1      	b.n	8008026 <_printf_float+0xa6>
 80080e2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80080e6:	f000 8177 	beq.w	80083d8 <_printf_float+0x458>
 80080ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80080ee:	d1bb      	bne.n	8008068 <_printf_float+0xe8>
 80080f0:	2900      	cmp	r1, #0
 80080f2:	d1b9      	bne.n	8008068 <_printf_float+0xe8>
 80080f4:	2301      	movs	r3, #1
 80080f6:	e7b6      	b.n	8008066 <_printf_float+0xe6>
 80080f8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80080fc:	d119      	bne.n	8008132 <_printf_float+0x1b2>
 80080fe:	2900      	cmp	r1, #0
 8008100:	6863      	ldr	r3, [r4, #4]
 8008102:	dd0c      	ble.n	800811e <_printf_float+0x19e>
 8008104:	6121      	str	r1, [r4, #16]
 8008106:	b913      	cbnz	r3, 800810e <_printf_float+0x18e>
 8008108:	6822      	ldr	r2, [r4, #0]
 800810a:	07d2      	lsls	r2, r2, #31
 800810c:	d502      	bpl.n	8008114 <_printf_float+0x194>
 800810e:	3301      	adds	r3, #1
 8008110:	440b      	add	r3, r1
 8008112:	6123      	str	r3, [r4, #16]
 8008114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008116:	65a3      	str	r3, [r4, #88]	; 0x58
 8008118:	f04f 0900 	mov.w	r9, #0
 800811c:	e7d9      	b.n	80080d2 <_printf_float+0x152>
 800811e:	b913      	cbnz	r3, 8008126 <_printf_float+0x1a6>
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	07d0      	lsls	r0, r2, #31
 8008124:	d501      	bpl.n	800812a <_printf_float+0x1aa>
 8008126:	3302      	adds	r3, #2
 8008128:	e7f3      	b.n	8008112 <_printf_float+0x192>
 800812a:	2301      	movs	r3, #1
 800812c:	e7f1      	b.n	8008112 <_printf_float+0x192>
 800812e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008132:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008136:	4293      	cmp	r3, r2
 8008138:	db05      	blt.n	8008146 <_printf_float+0x1c6>
 800813a:	6822      	ldr	r2, [r4, #0]
 800813c:	6123      	str	r3, [r4, #16]
 800813e:	07d1      	lsls	r1, r2, #31
 8008140:	d5e8      	bpl.n	8008114 <_printf_float+0x194>
 8008142:	3301      	adds	r3, #1
 8008144:	e7e5      	b.n	8008112 <_printf_float+0x192>
 8008146:	2b00      	cmp	r3, #0
 8008148:	bfd4      	ite	le
 800814a:	f1c3 0302 	rsble	r3, r3, #2
 800814e:	2301      	movgt	r3, #1
 8008150:	4413      	add	r3, r2
 8008152:	e7de      	b.n	8008112 <_printf_float+0x192>
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	055a      	lsls	r2, r3, #21
 8008158:	d407      	bmi.n	800816a <_printf_float+0x1ea>
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	4642      	mov	r2, r8
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	47b8      	blx	r7
 8008164:	3001      	adds	r0, #1
 8008166:	d12b      	bne.n	80081c0 <_printf_float+0x240>
 8008168:	e767      	b.n	800803a <_printf_float+0xba>
 800816a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800816e:	f240 80dc 	bls.w	800832a <_printf_float+0x3aa>
 8008172:	2200      	movs	r2, #0
 8008174:	2300      	movs	r3, #0
 8008176:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800817a:	f7f8 fccd 	bl	8000b18 <__aeabi_dcmpeq>
 800817e:	2800      	cmp	r0, #0
 8008180:	d033      	beq.n	80081ea <_printf_float+0x26a>
 8008182:	2301      	movs	r3, #1
 8008184:	4a41      	ldr	r2, [pc, #260]	; (800828c <_printf_float+0x30c>)
 8008186:	4631      	mov	r1, r6
 8008188:	4628      	mov	r0, r5
 800818a:	47b8      	blx	r7
 800818c:	3001      	adds	r0, #1
 800818e:	f43f af54 	beq.w	800803a <_printf_float+0xba>
 8008192:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008196:	429a      	cmp	r2, r3
 8008198:	db02      	blt.n	80081a0 <_printf_float+0x220>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	07d8      	lsls	r0, r3, #31
 800819e:	d50f      	bpl.n	80081c0 <_printf_float+0x240>
 80081a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081a4:	4631      	mov	r1, r6
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b8      	blx	r7
 80081aa:	3001      	adds	r0, #1
 80081ac:	f43f af45 	beq.w	800803a <_printf_float+0xba>
 80081b0:	f04f 0800 	mov.w	r8, #0
 80081b4:	f104 091a 	add.w	r9, r4, #26
 80081b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ba:	3b01      	subs	r3, #1
 80081bc:	4543      	cmp	r3, r8
 80081be:	dc09      	bgt.n	80081d4 <_printf_float+0x254>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	079b      	lsls	r3, r3, #30
 80081c4:	f100 8103 	bmi.w	80083ce <_printf_float+0x44e>
 80081c8:	68e0      	ldr	r0, [r4, #12]
 80081ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081cc:	4298      	cmp	r0, r3
 80081ce:	bfb8      	it	lt
 80081d0:	4618      	movlt	r0, r3
 80081d2:	e734      	b.n	800803e <_printf_float+0xbe>
 80081d4:	2301      	movs	r3, #1
 80081d6:	464a      	mov	r2, r9
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	47b8      	blx	r7
 80081de:	3001      	adds	r0, #1
 80081e0:	f43f af2b 	beq.w	800803a <_printf_float+0xba>
 80081e4:	f108 0801 	add.w	r8, r8, #1
 80081e8:	e7e6      	b.n	80081b8 <_printf_float+0x238>
 80081ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	dc2b      	bgt.n	8008248 <_printf_float+0x2c8>
 80081f0:	2301      	movs	r3, #1
 80081f2:	4a26      	ldr	r2, [pc, #152]	; (800828c <_printf_float+0x30c>)
 80081f4:	4631      	mov	r1, r6
 80081f6:	4628      	mov	r0, r5
 80081f8:	47b8      	blx	r7
 80081fa:	3001      	adds	r0, #1
 80081fc:	f43f af1d 	beq.w	800803a <_printf_float+0xba>
 8008200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008202:	b923      	cbnz	r3, 800820e <_printf_float+0x28e>
 8008204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008206:	b913      	cbnz	r3, 800820e <_printf_float+0x28e>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	07d9      	lsls	r1, r3, #31
 800820c:	d5d8      	bpl.n	80081c0 <_printf_float+0x240>
 800820e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008212:	4631      	mov	r1, r6
 8008214:	4628      	mov	r0, r5
 8008216:	47b8      	blx	r7
 8008218:	3001      	adds	r0, #1
 800821a:	f43f af0e 	beq.w	800803a <_printf_float+0xba>
 800821e:	f04f 0900 	mov.w	r9, #0
 8008222:	f104 0a1a 	add.w	sl, r4, #26
 8008226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008228:	425b      	negs	r3, r3
 800822a:	454b      	cmp	r3, r9
 800822c:	dc01      	bgt.n	8008232 <_printf_float+0x2b2>
 800822e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008230:	e794      	b.n	800815c <_printf_float+0x1dc>
 8008232:	2301      	movs	r3, #1
 8008234:	4652      	mov	r2, sl
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	47b8      	blx	r7
 800823c:	3001      	adds	r0, #1
 800823e:	f43f aefc 	beq.w	800803a <_printf_float+0xba>
 8008242:	f109 0901 	add.w	r9, r9, #1
 8008246:	e7ee      	b.n	8008226 <_printf_float+0x2a6>
 8008248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800824a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800824c:	429a      	cmp	r2, r3
 800824e:	bfa8      	it	ge
 8008250:	461a      	movge	r2, r3
 8008252:	2a00      	cmp	r2, #0
 8008254:	4691      	mov	r9, r2
 8008256:	dd07      	ble.n	8008268 <_printf_float+0x2e8>
 8008258:	4613      	mov	r3, r2
 800825a:	4631      	mov	r1, r6
 800825c:	4642      	mov	r2, r8
 800825e:	4628      	mov	r0, r5
 8008260:	47b8      	blx	r7
 8008262:	3001      	adds	r0, #1
 8008264:	f43f aee9 	beq.w	800803a <_printf_float+0xba>
 8008268:	f104 031a 	add.w	r3, r4, #26
 800826c:	f04f 0b00 	mov.w	fp, #0
 8008270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008274:	9306      	str	r3, [sp, #24]
 8008276:	e015      	b.n	80082a4 <_printf_float+0x324>
 8008278:	7fefffff 	.word	0x7fefffff
 800827c:	0800b56c 	.word	0x0800b56c
 8008280:	0800b568 	.word	0x0800b568
 8008284:	0800b574 	.word	0x0800b574
 8008288:	0800b570 	.word	0x0800b570
 800828c:	0800b578 	.word	0x0800b578
 8008290:	2301      	movs	r3, #1
 8008292:	9a06      	ldr	r2, [sp, #24]
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	47b8      	blx	r7
 800829a:	3001      	adds	r0, #1
 800829c:	f43f aecd 	beq.w	800803a <_printf_float+0xba>
 80082a0:	f10b 0b01 	add.w	fp, fp, #1
 80082a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80082a8:	ebaa 0309 	sub.w	r3, sl, r9
 80082ac:	455b      	cmp	r3, fp
 80082ae:	dcef      	bgt.n	8008290 <_printf_float+0x310>
 80082b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082b4:	429a      	cmp	r2, r3
 80082b6:	44d0      	add	r8, sl
 80082b8:	db15      	blt.n	80082e6 <_printf_float+0x366>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	07da      	lsls	r2, r3, #31
 80082be:	d412      	bmi.n	80082e6 <_printf_float+0x366>
 80082c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082c4:	eba3 020a 	sub.w	r2, r3, sl
 80082c8:	eba3 0a01 	sub.w	sl, r3, r1
 80082cc:	4592      	cmp	sl, r2
 80082ce:	bfa8      	it	ge
 80082d0:	4692      	movge	sl, r2
 80082d2:	f1ba 0f00 	cmp.w	sl, #0
 80082d6:	dc0e      	bgt.n	80082f6 <_printf_float+0x376>
 80082d8:	f04f 0800 	mov.w	r8, #0
 80082dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082e0:	f104 091a 	add.w	r9, r4, #26
 80082e4:	e019      	b.n	800831a <_printf_float+0x39a>
 80082e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ea:	4631      	mov	r1, r6
 80082ec:	4628      	mov	r0, r5
 80082ee:	47b8      	blx	r7
 80082f0:	3001      	adds	r0, #1
 80082f2:	d1e5      	bne.n	80082c0 <_printf_float+0x340>
 80082f4:	e6a1      	b.n	800803a <_printf_float+0xba>
 80082f6:	4653      	mov	r3, sl
 80082f8:	4642      	mov	r2, r8
 80082fa:	4631      	mov	r1, r6
 80082fc:	4628      	mov	r0, r5
 80082fe:	47b8      	blx	r7
 8008300:	3001      	adds	r0, #1
 8008302:	d1e9      	bne.n	80082d8 <_printf_float+0x358>
 8008304:	e699      	b.n	800803a <_printf_float+0xba>
 8008306:	2301      	movs	r3, #1
 8008308:	464a      	mov	r2, r9
 800830a:	4631      	mov	r1, r6
 800830c:	4628      	mov	r0, r5
 800830e:	47b8      	blx	r7
 8008310:	3001      	adds	r0, #1
 8008312:	f43f ae92 	beq.w	800803a <_printf_float+0xba>
 8008316:	f108 0801 	add.w	r8, r8, #1
 800831a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800831e:	1a9b      	subs	r3, r3, r2
 8008320:	eba3 030a 	sub.w	r3, r3, sl
 8008324:	4543      	cmp	r3, r8
 8008326:	dcee      	bgt.n	8008306 <_printf_float+0x386>
 8008328:	e74a      	b.n	80081c0 <_printf_float+0x240>
 800832a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800832c:	2a01      	cmp	r2, #1
 800832e:	dc01      	bgt.n	8008334 <_printf_float+0x3b4>
 8008330:	07db      	lsls	r3, r3, #31
 8008332:	d53a      	bpl.n	80083aa <_printf_float+0x42a>
 8008334:	2301      	movs	r3, #1
 8008336:	4642      	mov	r2, r8
 8008338:	4631      	mov	r1, r6
 800833a:	4628      	mov	r0, r5
 800833c:	47b8      	blx	r7
 800833e:	3001      	adds	r0, #1
 8008340:	f43f ae7b 	beq.w	800803a <_printf_float+0xba>
 8008344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008348:	4631      	mov	r1, r6
 800834a:	4628      	mov	r0, r5
 800834c:	47b8      	blx	r7
 800834e:	3001      	adds	r0, #1
 8008350:	f108 0801 	add.w	r8, r8, #1
 8008354:	f43f ae71 	beq.w	800803a <_printf_float+0xba>
 8008358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800835a:	2200      	movs	r2, #0
 800835c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008364:	2300      	movs	r3, #0
 8008366:	f7f8 fbd7 	bl	8000b18 <__aeabi_dcmpeq>
 800836a:	b9c8      	cbnz	r0, 80083a0 <_printf_float+0x420>
 800836c:	4653      	mov	r3, sl
 800836e:	4642      	mov	r2, r8
 8008370:	4631      	mov	r1, r6
 8008372:	4628      	mov	r0, r5
 8008374:	47b8      	blx	r7
 8008376:	3001      	adds	r0, #1
 8008378:	d10e      	bne.n	8008398 <_printf_float+0x418>
 800837a:	e65e      	b.n	800803a <_printf_float+0xba>
 800837c:	2301      	movs	r3, #1
 800837e:	4652      	mov	r2, sl
 8008380:	4631      	mov	r1, r6
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	f43f ae57 	beq.w	800803a <_printf_float+0xba>
 800838c:	f108 0801 	add.w	r8, r8, #1
 8008390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008392:	3b01      	subs	r3, #1
 8008394:	4543      	cmp	r3, r8
 8008396:	dcf1      	bgt.n	800837c <_printf_float+0x3fc>
 8008398:	464b      	mov	r3, r9
 800839a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800839e:	e6de      	b.n	800815e <_printf_float+0x1de>
 80083a0:	f04f 0800 	mov.w	r8, #0
 80083a4:	f104 0a1a 	add.w	sl, r4, #26
 80083a8:	e7f2      	b.n	8008390 <_printf_float+0x410>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e7df      	b.n	800836e <_printf_float+0x3ee>
 80083ae:	2301      	movs	r3, #1
 80083b0:	464a      	mov	r2, r9
 80083b2:	4631      	mov	r1, r6
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	f43f ae3e 	beq.w	800803a <_printf_float+0xba>
 80083be:	f108 0801 	add.w	r8, r8, #1
 80083c2:	68e3      	ldr	r3, [r4, #12]
 80083c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	4543      	cmp	r3, r8
 80083ca:	dcf0      	bgt.n	80083ae <_printf_float+0x42e>
 80083cc:	e6fc      	b.n	80081c8 <_printf_float+0x248>
 80083ce:	f04f 0800 	mov.w	r8, #0
 80083d2:	f104 0919 	add.w	r9, r4, #25
 80083d6:	e7f4      	b.n	80083c2 <_printf_float+0x442>
 80083d8:	2900      	cmp	r1, #0
 80083da:	f43f ae8b 	beq.w	80080f4 <_printf_float+0x174>
 80083de:	2300      	movs	r3, #0
 80083e0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80083e4:	ab09      	add	r3, sp, #36	; 0x24
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	ec49 8b10 	vmov	d0, r8, r9
 80083ec:	6022      	str	r2, [r4, #0]
 80083ee:	f8cd a004 	str.w	sl, [sp, #4]
 80083f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083f6:	4628      	mov	r0, r5
 80083f8:	f7ff fd2e 	bl	8007e58 <__cvt>
 80083fc:	4680      	mov	r8, r0
 80083fe:	e648      	b.n	8008092 <_printf_float+0x112>

08008400 <_printf_common>:
 8008400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008404:	4691      	mov	r9, r2
 8008406:	461f      	mov	r7, r3
 8008408:	688a      	ldr	r2, [r1, #8]
 800840a:	690b      	ldr	r3, [r1, #16]
 800840c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008410:	4293      	cmp	r3, r2
 8008412:	bfb8      	it	lt
 8008414:	4613      	movlt	r3, r2
 8008416:	f8c9 3000 	str.w	r3, [r9]
 800841a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800841e:	4606      	mov	r6, r0
 8008420:	460c      	mov	r4, r1
 8008422:	b112      	cbz	r2, 800842a <_printf_common+0x2a>
 8008424:	3301      	adds	r3, #1
 8008426:	f8c9 3000 	str.w	r3, [r9]
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	0699      	lsls	r1, r3, #26
 800842e:	bf42      	ittt	mi
 8008430:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008434:	3302      	addmi	r3, #2
 8008436:	f8c9 3000 	strmi.w	r3, [r9]
 800843a:	6825      	ldr	r5, [r4, #0]
 800843c:	f015 0506 	ands.w	r5, r5, #6
 8008440:	d107      	bne.n	8008452 <_printf_common+0x52>
 8008442:	f104 0a19 	add.w	sl, r4, #25
 8008446:	68e3      	ldr	r3, [r4, #12]
 8008448:	f8d9 2000 	ldr.w	r2, [r9]
 800844c:	1a9b      	subs	r3, r3, r2
 800844e:	42ab      	cmp	r3, r5
 8008450:	dc28      	bgt.n	80084a4 <_printf_common+0xa4>
 8008452:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008456:	6822      	ldr	r2, [r4, #0]
 8008458:	3300      	adds	r3, #0
 800845a:	bf18      	it	ne
 800845c:	2301      	movne	r3, #1
 800845e:	0692      	lsls	r2, r2, #26
 8008460:	d42d      	bmi.n	80084be <_printf_common+0xbe>
 8008462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008466:	4639      	mov	r1, r7
 8008468:	4630      	mov	r0, r6
 800846a:	47c0      	blx	r8
 800846c:	3001      	adds	r0, #1
 800846e:	d020      	beq.n	80084b2 <_printf_common+0xb2>
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	68e5      	ldr	r5, [r4, #12]
 8008474:	f8d9 2000 	ldr.w	r2, [r9]
 8008478:	f003 0306 	and.w	r3, r3, #6
 800847c:	2b04      	cmp	r3, #4
 800847e:	bf08      	it	eq
 8008480:	1aad      	subeq	r5, r5, r2
 8008482:	68a3      	ldr	r3, [r4, #8]
 8008484:	6922      	ldr	r2, [r4, #16]
 8008486:	bf0c      	ite	eq
 8008488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800848c:	2500      	movne	r5, #0
 800848e:	4293      	cmp	r3, r2
 8008490:	bfc4      	itt	gt
 8008492:	1a9b      	subgt	r3, r3, r2
 8008494:	18ed      	addgt	r5, r5, r3
 8008496:	f04f 0900 	mov.w	r9, #0
 800849a:	341a      	adds	r4, #26
 800849c:	454d      	cmp	r5, r9
 800849e:	d11a      	bne.n	80084d6 <_printf_common+0xd6>
 80084a0:	2000      	movs	r0, #0
 80084a2:	e008      	b.n	80084b6 <_printf_common+0xb6>
 80084a4:	2301      	movs	r3, #1
 80084a6:	4652      	mov	r2, sl
 80084a8:	4639      	mov	r1, r7
 80084aa:	4630      	mov	r0, r6
 80084ac:	47c0      	blx	r8
 80084ae:	3001      	adds	r0, #1
 80084b0:	d103      	bne.n	80084ba <_printf_common+0xba>
 80084b2:	f04f 30ff 	mov.w	r0, #4294967295
 80084b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ba:	3501      	adds	r5, #1
 80084bc:	e7c3      	b.n	8008446 <_printf_common+0x46>
 80084be:	18e1      	adds	r1, r4, r3
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	2030      	movs	r0, #48	; 0x30
 80084c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084c8:	4422      	add	r2, r4
 80084ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084d2:	3302      	adds	r3, #2
 80084d4:	e7c5      	b.n	8008462 <_printf_common+0x62>
 80084d6:	2301      	movs	r3, #1
 80084d8:	4622      	mov	r2, r4
 80084da:	4639      	mov	r1, r7
 80084dc:	4630      	mov	r0, r6
 80084de:	47c0      	blx	r8
 80084e0:	3001      	adds	r0, #1
 80084e2:	d0e6      	beq.n	80084b2 <_printf_common+0xb2>
 80084e4:	f109 0901 	add.w	r9, r9, #1
 80084e8:	e7d8      	b.n	800849c <_printf_common+0x9c>
	...

080084ec <_printf_i>:
 80084ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084f4:	460c      	mov	r4, r1
 80084f6:	7e09      	ldrb	r1, [r1, #24]
 80084f8:	b085      	sub	sp, #20
 80084fa:	296e      	cmp	r1, #110	; 0x6e
 80084fc:	4617      	mov	r7, r2
 80084fe:	4606      	mov	r6, r0
 8008500:	4698      	mov	r8, r3
 8008502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008504:	f000 80b3 	beq.w	800866e <_printf_i+0x182>
 8008508:	d822      	bhi.n	8008550 <_printf_i+0x64>
 800850a:	2963      	cmp	r1, #99	; 0x63
 800850c:	d036      	beq.n	800857c <_printf_i+0x90>
 800850e:	d80a      	bhi.n	8008526 <_printf_i+0x3a>
 8008510:	2900      	cmp	r1, #0
 8008512:	f000 80b9 	beq.w	8008688 <_printf_i+0x19c>
 8008516:	2958      	cmp	r1, #88	; 0x58
 8008518:	f000 8083 	beq.w	8008622 <_printf_i+0x136>
 800851c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008520:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008524:	e032      	b.n	800858c <_printf_i+0xa0>
 8008526:	2964      	cmp	r1, #100	; 0x64
 8008528:	d001      	beq.n	800852e <_printf_i+0x42>
 800852a:	2969      	cmp	r1, #105	; 0x69
 800852c:	d1f6      	bne.n	800851c <_printf_i+0x30>
 800852e:	6820      	ldr	r0, [r4, #0]
 8008530:	6813      	ldr	r3, [r2, #0]
 8008532:	0605      	lsls	r5, r0, #24
 8008534:	f103 0104 	add.w	r1, r3, #4
 8008538:	d52a      	bpl.n	8008590 <_printf_i+0xa4>
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6011      	str	r1, [r2, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	da03      	bge.n	800854a <_printf_i+0x5e>
 8008542:	222d      	movs	r2, #45	; 0x2d
 8008544:	425b      	negs	r3, r3
 8008546:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800854a:	486f      	ldr	r0, [pc, #444]	; (8008708 <_printf_i+0x21c>)
 800854c:	220a      	movs	r2, #10
 800854e:	e039      	b.n	80085c4 <_printf_i+0xd8>
 8008550:	2973      	cmp	r1, #115	; 0x73
 8008552:	f000 809d 	beq.w	8008690 <_printf_i+0x1a4>
 8008556:	d808      	bhi.n	800856a <_printf_i+0x7e>
 8008558:	296f      	cmp	r1, #111	; 0x6f
 800855a:	d020      	beq.n	800859e <_printf_i+0xb2>
 800855c:	2970      	cmp	r1, #112	; 0x70
 800855e:	d1dd      	bne.n	800851c <_printf_i+0x30>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	f043 0320 	orr.w	r3, r3, #32
 8008566:	6023      	str	r3, [r4, #0]
 8008568:	e003      	b.n	8008572 <_printf_i+0x86>
 800856a:	2975      	cmp	r1, #117	; 0x75
 800856c:	d017      	beq.n	800859e <_printf_i+0xb2>
 800856e:	2978      	cmp	r1, #120	; 0x78
 8008570:	d1d4      	bne.n	800851c <_printf_i+0x30>
 8008572:	2378      	movs	r3, #120	; 0x78
 8008574:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008578:	4864      	ldr	r0, [pc, #400]	; (800870c <_printf_i+0x220>)
 800857a:	e055      	b.n	8008628 <_printf_i+0x13c>
 800857c:	6813      	ldr	r3, [r2, #0]
 800857e:	1d19      	adds	r1, r3, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6011      	str	r1, [r2, #0]
 8008584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800858c:	2301      	movs	r3, #1
 800858e:	e08c      	b.n	80086aa <_printf_i+0x1be>
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6011      	str	r1, [r2, #0]
 8008594:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008598:	bf18      	it	ne
 800859a:	b21b      	sxthne	r3, r3
 800859c:	e7cf      	b.n	800853e <_printf_i+0x52>
 800859e:	6813      	ldr	r3, [r2, #0]
 80085a0:	6825      	ldr	r5, [r4, #0]
 80085a2:	1d18      	adds	r0, r3, #4
 80085a4:	6010      	str	r0, [r2, #0]
 80085a6:	0628      	lsls	r0, r5, #24
 80085a8:	d501      	bpl.n	80085ae <_printf_i+0xc2>
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	e002      	b.n	80085b4 <_printf_i+0xc8>
 80085ae:	0668      	lsls	r0, r5, #25
 80085b0:	d5fb      	bpl.n	80085aa <_printf_i+0xbe>
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	4854      	ldr	r0, [pc, #336]	; (8008708 <_printf_i+0x21c>)
 80085b6:	296f      	cmp	r1, #111	; 0x6f
 80085b8:	bf14      	ite	ne
 80085ba:	220a      	movne	r2, #10
 80085bc:	2208      	moveq	r2, #8
 80085be:	2100      	movs	r1, #0
 80085c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085c4:	6865      	ldr	r5, [r4, #4]
 80085c6:	60a5      	str	r5, [r4, #8]
 80085c8:	2d00      	cmp	r5, #0
 80085ca:	f2c0 8095 	blt.w	80086f8 <_printf_i+0x20c>
 80085ce:	6821      	ldr	r1, [r4, #0]
 80085d0:	f021 0104 	bic.w	r1, r1, #4
 80085d4:	6021      	str	r1, [r4, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d13d      	bne.n	8008656 <_printf_i+0x16a>
 80085da:	2d00      	cmp	r5, #0
 80085dc:	f040 808e 	bne.w	80086fc <_printf_i+0x210>
 80085e0:	4665      	mov	r5, ip
 80085e2:	2a08      	cmp	r2, #8
 80085e4:	d10b      	bne.n	80085fe <_printf_i+0x112>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	07db      	lsls	r3, r3, #31
 80085ea:	d508      	bpl.n	80085fe <_printf_i+0x112>
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	bfde      	ittt	le
 80085f4:	2330      	movle	r3, #48	; 0x30
 80085f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085fe:	ebac 0305 	sub.w	r3, ip, r5
 8008602:	6123      	str	r3, [r4, #16]
 8008604:	f8cd 8000 	str.w	r8, [sp]
 8008608:	463b      	mov	r3, r7
 800860a:	aa03      	add	r2, sp, #12
 800860c:	4621      	mov	r1, r4
 800860e:	4630      	mov	r0, r6
 8008610:	f7ff fef6 	bl	8008400 <_printf_common>
 8008614:	3001      	adds	r0, #1
 8008616:	d14d      	bne.n	80086b4 <_printf_i+0x1c8>
 8008618:	f04f 30ff 	mov.w	r0, #4294967295
 800861c:	b005      	add	sp, #20
 800861e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008622:	4839      	ldr	r0, [pc, #228]	; (8008708 <_printf_i+0x21c>)
 8008624:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008628:	6813      	ldr	r3, [r2, #0]
 800862a:	6821      	ldr	r1, [r4, #0]
 800862c:	1d1d      	adds	r5, r3, #4
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6015      	str	r5, [r2, #0]
 8008632:	060a      	lsls	r2, r1, #24
 8008634:	d50b      	bpl.n	800864e <_printf_i+0x162>
 8008636:	07ca      	lsls	r2, r1, #31
 8008638:	bf44      	itt	mi
 800863a:	f041 0120 	orrmi.w	r1, r1, #32
 800863e:	6021      	strmi	r1, [r4, #0]
 8008640:	b91b      	cbnz	r3, 800864a <_printf_i+0x15e>
 8008642:	6822      	ldr	r2, [r4, #0]
 8008644:	f022 0220 	bic.w	r2, r2, #32
 8008648:	6022      	str	r2, [r4, #0]
 800864a:	2210      	movs	r2, #16
 800864c:	e7b7      	b.n	80085be <_printf_i+0xd2>
 800864e:	064d      	lsls	r5, r1, #25
 8008650:	bf48      	it	mi
 8008652:	b29b      	uxthmi	r3, r3
 8008654:	e7ef      	b.n	8008636 <_printf_i+0x14a>
 8008656:	4665      	mov	r5, ip
 8008658:	fbb3 f1f2 	udiv	r1, r3, r2
 800865c:	fb02 3311 	mls	r3, r2, r1, r3
 8008660:	5cc3      	ldrb	r3, [r0, r3]
 8008662:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008666:	460b      	mov	r3, r1
 8008668:	2900      	cmp	r1, #0
 800866a:	d1f5      	bne.n	8008658 <_printf_i+0x16c>
 800866c:	e7b9      	b.n	80085e2 <_printf_i+0xf6>
 800866e:	6813      	ldr	r3, [r2, #0]
 8008670:	6825      	ldr	r5, [r4, #0]
 8008672:	6961      	ldr	r1, [r4, #20]
 8008674:	1d18      	adds	r0, r3, #4
 8008676:	6010      	str	r0, [r2, #0]
 8008678:	0628      	lsls	r0, r5, #24
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	d501      	bpl.n	8008682 <_printf_i+0x196>
 800867e:	6019      	str	r1, [r3, #0]
 8008680:	e002      	b.n	8008688 <_printf_i+0x19c>
 8008682:	066a      	lsls	r2, r5, #25
 8008684:	d5fb      	bpl.n	800867e <_printf_i+0x192>
 8008686:	8019      	strh	r1, [r3, #0]
 8008688:	2300      	movs	r3, #0
 800868a:	6123      	str	r3, [r4, #16]
 800868c:	4665      	mov	r5, ip
 800868e:	e7b9      	b.n	8008604 <_printf_i+0x118>
 8008690:	6813      	ldr	r3, [r2, #0]
 8008692:	1d19      	adds	r1, r3, #4
 8008694:	6011      	str	r1, [r2, #0]
 8008696:	681d      	ldr	r5, [r3, #0]
 8008698:	6862      	ldr	r2, [r4, #4]
 800869a:	2100      	movs	r1, #0
 800869c:	4628      	mov	r0, r5
 800869e:	f7f7 fdc7 	bl	8000230 <memchr>
 80086a2:	b108      	cbz	r0, 80086a8 <_printf_i+0x1bc>
 80086a4:	1b40      	subs	r0, r0, r5
 80086a6:	6060      	str	r0, [r4, #4]
 80086a8:	6863      	ldr	r3, [r4, #4]
 80086aa:	6123      	str	r3, [r4, #16]
 80086ac:	2300      	movs	r3, #0
 80086ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b2:	e7a7      	b.n	8008604 <_printf_i+0x118>
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	462a      	mov	r2, r5
 80086b8:	4639      	mov	r1, r7
 80086ba:	4630      	mov	r0, r6
 80086bc:	47c0      	blx	r8
 80086be:	3001      	adds	r0, #1
 80086c0:	d0aa      	beq.n	8008618 <_printf_i+0x12c>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	079b      	lsls	r3, r3, #30
 80086c6:	d413      	bmi.n	80086f0 <_printf_i+0x204>
 80086c8:	68e0      	ldr	r0, [r4, #12]
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	4298      	cmp	r0, r3
 80086ce:	bfb8      	it	lt
 80086d0:	4618      	movlt	r0, r3
 80086d2:	e7a3      	b.n	800861c <_printf_i+0x130>
 80086d4:	2301      	movs	r3, #1
 80086d6:	464a      	mov	r2, r9
 80086d8:	4639      	mov	r1, r7
 80086da:	4630      	mov	r0, r6
 80086dc:	47c0      	blx	r8
 80086de:	3001      	adds	r0, #1
 80086e0:	d09a      	beq.n	8008618 <_printf_i+0x12c>
 80086e2:	3501      	adds	r5, #1
 80086e4:	68e3      	ldr	r3, [r4, #12]
 80086e6:	9a03      	ldr	r2, [sp, #12]
 80086e8:	1a9b      	subs	r3, r3, r2
 80086ea:	42ab      	cmp	r3, r5
 80086ec:	dcf2      	bgt.n	80086d4 <_printf_i+0x1e8>
 80086ee:	e7eb      	b.n	80086c8 <_printf_i+0x1dc>
 80086f0:	2500      	movs	r5, #0
 80086f2:	f104 0919 	add.w	r9, r4, #25
 80086f6:	e7f5      	b.n	80086e4 <_printf_i+0x1f8>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1ac      	bne.n	8008656 <_printf_i+0x16a>
 80086fc:	7803      	ldrb	r3, [r0, #0]
 80086fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008702:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008706:	e76c      	b.n	80085e2 <_printf_i+0xf6>
 8008708:	0800b57a 	.word	0x0800b57a
 800870c:	0800b58b 	.word	0x0800b58b

08008710 <iprintf>:
 8008710:	b40f      	push	{r0, r1, r2, r3}
 8008712:	4b0a      	ldr	r3, [pc, #40]	; (800873c <iprintf+0x2c>)
 8008714:	b513      	push	{r0, r1, r4, lr}
 8008716:	681c      	ldr	r4, [r3, #0]
 8008718:	b124      	cbz	r4, 8008724 <iprintf+0x14>
 800871a:	69a3      	ldr	r3, [r4, #24]
 800871c:	b913      	cbnz	r3, 8008724 <iprintf+0x14>
 800871e:	4620      	mov	r0, r4
 8008720:	f000 feb2 	bl	8009488 <__sinit>
 8008724:	ab05      	add	r3, sp, #20
 8008726:	9a04      	ldr	r2, [sp, #16]
 8008728:	68a1      	ldr	r1, [r4, #8]
 800872a:	9301      	str	r3, [sp, #4]
 800872c:	4620      	mov	r0, r4
 800872e:	f001 fc63 	bl	8009ff8 <_vfiprintf_r>
 8008732:	b002      	add	sp, #8
 8008734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008738:	b004      	add	sp, #16
 800873a:	4770      	bx	lr
 800873c:	2000000c 	.word	0x2000000c

08008740 <siprintf>:
 8008740:	b40e      	push	{r1, r2, r3}
 8008742:	b500      	push	{lr}
 8008744:	b09c      	sub	sp, #112	; 0x70
 8008746:	ab1d      	add	r3, sp, #116	; 0x74
 8008748:	9002      	str	r0, [sp, #8]
 800874a:	9006      	str	r0, [sp, #24]
 800874c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008750:	4809      	ldr	r0, [pc, #36]	; (8008778 <siprintf+0x38>)
 8008752:	9107      	str	r1, [sp, #28]
 8008754:	9104      	str	r1, [sp, #16]
 8008756:	4909      	ldr	r1, [pc, #36]	; (800877c <siprintf+0x3c>)
 8008758:	f853 2b04 	ldr.w	r2, [r3], #4
 800875c:	9105      	str	r1, [sp, #20]
 800875e:	6800      	ldr	r0, [r0, #0]
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	a902      	add	r1, sp, #8
 8008764:	f001 fb26 	bl	8009db4 <_svfiprintf_r>
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	b01c      	add	sp, #112	; 0x70
 8008770:	f85d eb04 	ldr.w	lr, [sp], #4
 8008774:	b003      	add	sp, #12
 8008776:	4770      	bx	lr
 8008778:	2000000c 	.word	0x2000000c
 800877c:	ffff0208 	.word	0xffff0208

08008780 <quorem>:
 8008780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	6903      	ldr	r3, [r0, #16]
 8008786:	690c      	ldr	r4, [r1, #16]
 8008788:	42a3      	cmp	r3, r4
 800878a:	4680      	mov	r8, r0
 800878c:	f2c0 8082 	blt.w	8008894 <quorem+0x114>
 8008790:	3c01      	subs	r4, #1
 8008792:	f101 0714 	add.w	r7, r1, #20
 8008796:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800879a:	f100 0614 	add.w	r6, r0, #20
 800879e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80087a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80087a6:	eb06 030c 	add.w	r3, r6, ip
 80087aa:	3501      	adds	r5, #1
 80087ac:	eb07 090c 	add.w	r9, r7, ip
 80087b0:	9301      	str	r3, [sp, #4]
 80087b2:	fbb0 f5f5 	udiv	r5, r0, r5
 80087b6:	b395      	cbz	r5, 800881e <quorem+0x9e>
 80087b8:	f04f 0a00 	mov.w	sl, #0
 80087bc:	4638      	mov	r0, r7
 80087be:	46b6      	mov	lr, r6
 80087c0:	46d3      	mov	fp, sl
 80087c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80087c6:	b293      	uxth	r3, r2
 80087c8:	fb05 a303 	mla	r3, r5, r3, sl
 80087cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	ebab 0303 	sub.w	r3, fp, r3
 80087d6:	0c12      	lsrs	r2, r2, #16
 80087d8:	f8de b000 	ldr.w	fp, [lr]
 80087dc:	fb05 a202 	mla	r2, r5, r2, sl
 80087e0:	fa13 f38b 	uxtah	r3, r3, fp
 80087e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80087e8:	fa1f fb82 	uxth.w	fp, r2
 80087ec:	f8de 2000 	ldr.w	r2, [lr]
 80087f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80087f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087fe:	4581      	cmp	r9, r0
 8008800:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008804:	f84e 3b04 	str.w	r3, [lr], #4
 8008808:	d2db      	bcs.n	80087c2 <quorem+0x42>
 800880a:	f856 300c 	ldr.w	r3, [r6, ip]
 800880e:	b933      	cbnz	r3, 800881e <quorem+0x9e>
 8008810:	9b01      	ldr	r3, [sp, #4]
 8008812:	3b04      	subs	r3, #4
 8008814:	429e      	cmp	r6, r3
 8008816:	461a      	mov	r2, r3
 8008818:	d330      	bcc.n	800887c <quorem+0xfc>
 800881a:	f8c8 4010 	str.w	r4, [r8, #16]
 800881e:	4640      	mov	r0, r8
 8008820:	f001 f8f2 	bl	8009a08 <__mcmp>
 8008824:	2800      	cmp	r0, #0
 8008826:	db25      	blt.n	8008874 <quorem+0xf4>
 8008828:	3501      	adds	r5, #1
 800882a:	4630      	mov	r0, r6
 800882c:	f04f 0c00 	mov.w	ip, #0
 8008830:	f857 2b04 	ldr.w	r2, [r7], #4
 8008834:	f8d0 e000 	ldr.w	lr, [r0]
 8008838:	b293      	uxth	r3, r2
 800883a:	ebac 0303 	sub.w	r3, ip, r3
 800883e:	0c12      	lsrs	r2, r2, #16
 8008840:	fa13 f38e 	uxtah	r3, r3, lr
 8008844:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800884c:	b29b      	uxth	r3, r3
 800884e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008852:	45b9      	cmp	r9, r7
 8008854:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008858:	f840 3b04 	str.w	r3, [r0], #4
 800885c:	d2e8      	bcs.n	8008830 <quorem+0xb0>
 800885e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008862:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008866:	b92a      	cbnz	r2, 8008874 <quorem+0xf4>
 8008868:	3b04      	subs	r3, #4
 800886a:	429e      	cmp	r6, r3
 800886c:	461a      	mov	r2, r3
 800886e:	d30b      	bcc.n	8008888 <quorem+0x108>
 8008870:	f8c8 4010 	str.w	r4, [r8, #16]
 8008874:	4628      	mov	r0, r5
 8008876:	b003      	add	sp, #12
 8008878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887c:	6812      	ldr	r2, [r2, #0]
 800887e:	3b04      	subs	r3, #4
 8008880:	2a00      	cmp	r2, #0
 8008882:	d1ca      	bne.n	800881a <quorem+0x9a>
 8008884:	3c01      	subs	r4, #1
 8008886:	e7c5      	b.n	8008814 <quorem+0x94>
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	3b04      	subs	r3, #4
 800888c:	2a00      	cmp	r2, #0
 800888e:	d1ef      	bne.n	8008870 <quorem+0xf0>
 8008890:	3c01      	subs	r4, #1
 8008892:	e7ea      	b.n	800886a <quorem+0xea>
 8008894:	2000      	movs	r0, #0
 8008896:	e7ee      	b.n	8008876 <quorem+0xf6>

08008898 <_dtoa_r>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	ec57 6b10 	vmov	r6, r7, d0
 80088a0:	b097      	sub	sp, #92	; 0x5c
 80088a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088a4:	9106      	str	r1, [sp, #24]
 80088a6:	4604      	mov	r4, r0
 80088a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80088aa:	9312      	str	r3, [sp, #72]	; 0x48
 80088ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088b0:	e9cd 6700 	strd	r6, r7, [sp]
 80088b4:	b93d      	cbnz	r5, 80088c6 <_dtoa_r+0x2e>
 80088b6:	2010      	movs	r0, #16
 80088b8:	f000 fe7e 	bl	80095b8 <malloc>
 80088bc:	6260      	str	r0, [r4, #36]	; 0x24
 80088be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088c2:	6005      	str	r5, [r0, #0]
 80088c4:	60c5      	str	r5, [r0, #12]
 80088c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088c8:	6819      	ldr	r1, [r3, #0]
 80088ca:	b151      	cbz	r1, 80088e2 <_dtoa_r+0x4a>
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	604a      	str	r2, [r1, #4]
 80088d0:	2301      	movs	r3, #1
 80088d2:	4093      	lsls	r3, r2
 80088d4:	608b      	str	r3, [r1, #8]
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 feb5 	bl	8009646 <_Bfree>
 80088dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	1e3b      	subs	r3, r7, #0
 80088e4:	bfbb      	ittet	lt
 80088e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088ea:	9301      	strlt	r3, [sp, #4]
 80088ec:	2300      	movge	r3, #0
 80088ee:	2201      	movlt	r2, #1
 80088f0:	bfac      	ite	ge
 80088f2:	f8c8 3000 	strge.w	r3, [r8]
 80088f6:	f8c8 2000 	strlt.w	r2, [r8]
 80088fa:	4baf      	ldr	r3, [pc, #700]	; (8008bb8 <_dtoa_r+0x320>)
 80088fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008900:	ea33 0308 	bics.w	r3, r3, r8
 8008904:	d114      	bne.n	8008930 <_dtoa_r+0x98>
 8008906:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008908:	f242 730f 	movw	r3, #9999	; 0x270f
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	9b00      	ldr	r3, [sp, #0]
 8008910:	b923      	cbnz	r3, 800891c <_dtoa_r+0x84>
 8008912:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008916:	2800      	cmp	r0, #0
 8008918:	f000 8542 	beq.w	80093a0 <_dtoa_r+0xb08>
 800891c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800891e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008bcc <_dtoa_r+0x334>
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 8544 	beq.w	80093b0 <_dtoa_r+0xb18>
 8008928:	f10b 0303 	add.w	r3, fp, #3
 800892c:	f000 bd3e 	b.w	80093ac <_dtoa_r+0xb14>
 8008930:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008934:	2200      	movs	r2, #0
 8008936:	2300      	movs	r3, #0
 8008938:	4630      	mov	r0, r6
 800893a:	4639      	mov	r1, r7
 800893c:	f7f8 f8ec 	bl	8000b18 <__aeabi_dcmpeq>
 8008940:	4681      	mov	r9, r0
 8008942:	b168      	cbz	r0, 8008960 <_dtoa_r+0xc8>
 8008944:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008946:	2301      	movs	r3, #1
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 8524 	beq.w	800939a <_dtoa_r+0xb02>
 8008952:	4b9a      	ldr	r3, [pc, #616]	; (8008bbc <_dtoa_r+0x324>)
 8008954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008956:	f103 3bff 	add.w	fp, r3, #4294967295
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	f000 bd28 	b.w	80093b0 <_dtoa_r+0xb18>
 8008960:	aa14      	add	r2, sp, #80	; 0x50
 8008962:	a915      	add	r1, sp, #84	; 0x54
 8008964:	ec47 6b10 	vmov	d0, r6, r7
 8008968:	4620      	mov	r0, r4
 800896a:	f001 f8c4 	bl	8009af6 <__d2b>
 800896e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008972:	9004      	str	r0, [sp, #16]
 8008974:	2d00      	cmp	r5, #0
 8008976:	d07c      	beq.n	8008a72 <_dtoa_r+0x1da>
 8008978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800897c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008980:	46b2      	mov	sl, r6
 8008982:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008986:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800898a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800898e:	2200      	movs	r2, #0
 8008990:	4b8b      	ldr	r3, [pc, #556]	; (8008bc0 <_dtoa_r+0x328>)
 8008992:	4650      	mov	r0, sl
 8008994:	4659      	mov	r1, fp
 8008996:	f7f7 fc9f 	bl	80002d8 <__aeabi_dsub>
 800899a:	a381      	add	r3, pc, #516	; (adr r3, 8008ba0 <_dtoa_r+0x308>)
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	f7f7 fe52 	bl	8000648 <__aeabi_dmul>
 80089a4:	a380      	add	r3, pc, #512	; (adr r3, 8008ba8 <_dtoa_r+0x310>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fc97 	bl	80002dc <__adddf3>
 80089ae:	4606      	mov	r6, r0
 80089b0:	4628      	mov	r0, r5
 80089b2:	460f      	mov	r7, r1
 80089b4:	f7f7 fdde 	bl	8000574 <__aeabi_i2d>
 80089b8:	a37d      	add	r3, pc, #500	; (adr r3, 8008bb0 <_dtoa_r+0x318>)
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	f7f7 fe43 	bl	8000648 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4630      	mov	r0, r6
 80089c8:	4639      	mov	r1, r7
 80089ca:	f7f7 fc87 	bl	80002dc <__adddf3>
 80089ce:	4606      	mov	r6, r0
 80089d0:	460f      	mov	r7, r1
 80089d2:	f7f8 f8e9 	bl	8000ba8 <__aeabi_d2iz>
 80089d6:	2200      	movs	r2, #0
 80089d8:	4682      	mov	sl, r0
 80089da:	2300      	movs	r3, #0
 80089dc:	4630      	mov	r0, r6
 80089de:	4639      	mov	r1, r7
 80089e0:	f7f8 f8a4 	bl	8000b2c <__aeabi_dcmplt>
 80089e4:	b148      	cbz	r0, 80089fa <_dtoa_r+0x162>
 80089e6:	4650      	mov	r0, sl
 80089e8:	f7f7 fdc4 	bl	8000574 <__aeabi_i2d>
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	f7f8 f892 	bl	8000b18 <__aeabi_dcmpeq>
 80089f4:	b908      	cbnz	r0, 80089fa <_dtoa_r+0x162>
 80089f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089fa:	f1ba 0f16 	cmp.w	sl, #22
 80089fe:	d859      	bhi.n	8008ab4 <_dtoa_r+0x21c>
 8008a00:	4970      	ldr	r1, [pc, #448]	; (8008bc4 <_dtoa_r+0x32c>)
 8008a02:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008a06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a0e:	f7f8 f8ab 	bl	8000b68 <__aeabi_dcmpgt>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d050      	beq.n	8008ab8 <_dtoa_r+0x220>
 8008a16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a20:	1b5d      	subs	r5, r3, r5
 8008a22:	f1b5 0801 	subs.w	r8, r5, #1
 8008a26:	bf49      	itett	mi
 8008a28:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a2c:	2300      	movpl	r3, #0
 8008a2e:	9305      	strmi	r3, [sp, #20]
 8008a30:	f04f 0800 	movmi.w	r8, #0
 8008a34:	bf58      	it	pl
 8008a36:	9305      	strpl	r3, [sp, #20]
 8008a38:	f1ba 0f00 	cmp.w	sl, #0
 8008a3c:	db3e      	blt.n	8008abc <_dtoa_r+0x224>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	44d0      	add	r8, sl
 8008a42:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008a46:	9307      	str	r3, [sp, #28]
 8008a48:	9b06      	ldr	r3, [sp, #24]
 8008a4a:	2b09      	cmp	r3, #9
 8008a4c:	f200 8090 	bhi.w	8008b70 <_dtoa_r+0x2d8>
 8008a50:	2b05      	cmp	r3, #5
 8008a52:	bfc4      	itt	gt
 8008a54:	3b04      	subgt	r3, #4
 8008a56:	9306      	strgt	r3, [sp, #24]
 8008a58:	9b06      	ldr	r3, [sp, #24]
 8008a5a:	f1a3 0302 	sub.w	r3, r3, #2
 8008a5e:	bfcc      	ite	gt
 8008a60:	2500      	movgt	r5, #0
 8008a62:	2501      	movle	r5, #1
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	f200 808f 	bhi.w	8008b88 <_dtoa_r+0x2f0>
 8008a6a:	e8df f003 	tbb	[pc, r3]
 8008a6e:	7f7d      	.short	0x7f7d
 8008a70:	7131      	.short	0x7131
 8008a72:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008a76:	441d      	add	r5, r3
 8008a78:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008a7c:	2820      	cmp	r0, #32
 8008a7e:	dd13      	ble.n	8008aa8 <_dtoa_r+0x210>
 8008a80:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008a84:	9b00      	ldr	r3, [sp, #0]
 8008a86:	fa08 f800 	lsl.w	r8, r8, r0
 8008a8a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008a8e:	fa23 f000 	lsr.w	r0, r3, r0
 8008a92:	ea48 0000 	orr.w	r0, r8, r0
 8008a96:	f7f7 fd5d 	bl	8000554 <__aeabi_ui2d>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4682      	mov	sl, r0
 8008a9e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008aa2:	3d01      	subs	r5, #1
 8008aa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008aa6:	e772      	b.n	800898e <_dtoa_r+0xf6>
 8008aa8:	9b00      	ldr	r3, [sp, #0]
 8008aaa:	f1c0 0020 	rsb	r0, r0, #32
 8008aae:	fa03 f000 	lsl.w	r0, r3, r0
 8008ab2:	e7f0      	b.n	8008a96 <_dtoa_r+0x1fe>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e7b1      	b.n	8008a1c <_dtoa_r+0x184>
 8008ab8:	900f      	str	r0, [sp, #60]	; 0x3c
 8008aba:	e7b0      	b.n	8008a1e <_dtoa_r+0x186>
 8008abc:	9b05      	ldr	r3, [sp, #20]
 8008abe:	eba3 030a 	sub.w	r3, r3, sl
 8008ac2:	9305      	str	r3, [sp, #20]
 8008ac4:	f1ca 0300 	rsb	r3, sl, #0
 8008ac8:	9307      	str	r3, [sp, #28]
 8008aca:	2300      	movs	r3, #0
 8008acc:	930e      	str	r3, [sp, #56]	; 0x38
 8008ace:	e7bb      	b.n	8008a48 <_dtoa_r+0x1b0>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	dd59      	ble.n	8008b8e <_dtoa_r+0x2f6>
 8008ada:	9302      	str	r3, [sp, #8]
 8008adc:	4699      	mov	r9, r3
 8008ade:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	6072      	str	r2, [r6, #4]
 8008ae4:	2204      	movs	r2, #4
 8008ae6:	f102 0014 	add.w	r0, r2, #20
 8008aea:	4298      	cmp	r0, r3
 8008aec:	6871      	ldr	r1, [r6, #4]
 8008aee:	d953      	bls.n	8008b98 <_dtoa_r+0x300>
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fd74 	bl	80095de <_Balloc>
 8008af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af8:	6030      	str	r0, [r6, #0]
 8008afa:	f1b9 0f0e 	cmp.w	r9, #14
 8008afe:	f8d3 b000 	ldr.w	fp, [r3]
 8008b02:	f200 80e6 	bhi.w	8008cd2 <_dtoa_r+0x43a>
 8008b06:	2d00      	cmp	r5, #0
 8008b08:	f000 80e3 	beq.w	8008cd2 <_dtoa_r+0x43a>
 8008b0c:	ed9d 7b00 	vldr	d7, [sp]
 8008b10:	f1ba 0f00 	cmp.w	sl, #0
 8008b14:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008b18:	dd74      	ble.n	8008c04 <_dtoa_r+0x36c>
 8008b1a:	4a2a      	ldr	r2, [pc, #168]	; (8008bc4 <_dtoa_r+0x32c>)
 8008b1c:	f00a 030f 	and.w	r3, sl, #15
 8008b20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b24:	ed93 7b00 	vldr	d7, [r3]
 8008b28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008b2c:	06f0      	lsls	r0, r6, #27
 8008b2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008b32:	d565      	bpl.n	8008c00 <_dtoa_r+0x368>
 8008b34:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <_dtoa_r+0x330>)
 8008b36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b3e:	f7f7 fead 	bl	800089c <__aeabi_ddiv>
 8008b42:	e9cd 0100 	strd	r0, r1, [sp]
 8008b46:	f006 060f 	and.w	r6, r6, #15
 8008b4a:	2503      	movs	r5, #3
 8008b4c:	4f1e      	ldr	r7, [pc, #120]	; (8008bc8 <_dtoa_r+0x330>)
 8008b4e:	e04c      	b.n	8008bea <_dtoa_r+0x352>
 8008b50:	2301      	movs	r3, #1
 8008b52:	930a      	str	r3, [sp, #40]	; 0x28
 8008b54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b56:	4453      	add	r3, sl
 8008b58:	f103 0901 	add.w	r9, r3, #1
 8008b5c:	9302      	str	r3, [sp, #8]
 8008b5e:	464b      	mov	r3, r9
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	bfb8      	it	lt
 8008b64:	2301      	movlt	r3, #1
 8008b66:	e7ba      	b.n	8008ade <_dtoa_r+0x246>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e7b2      	b.n	8008ad2 <_dtoa_r+0x23a>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e7f0      	b.n	8008b52 <_dtoa_r+0x2ba>
 8008b70:	2501      	movs	r5, #1
 8008b72:	2300      	movs	r3, #0
 8008b74:	9306      	str	r3, [sp, #24]
 8008b76:	950a      	str	r5, [sp, #40]	; 0x28
 8008b78:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7c:	9302      	str	r3, [sp, #8]
 8008b7e:	4699      	mov	r9, r3
 8008b80:	2200      	movs	r2, #0
 8008b82:	2312      	movs	r3, #18
 8008b84:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b86:	e7aa      	b.n	8008ade <_dtoa_r+0x246>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b8c:	e7f4      	b.n	8008b78 <_dtoa_r+0x2e0>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	9302      	str	r3, [sp, #8]
 8008b92:	4699      	mov	r9, r3
 8008b94:	461a      	mov	r2, r3
 8008b96:	e7f5      	b.n	8008b84 <_dtoa_r+0x2ec>
 8008b98:	3101      	adds	r1, #1
 8008b9a:	6071      	str	r1, [r6, #4]
 8008b9c:	0052      	lsls	r2, r2, #1
 8008b9e:	e7a2      	b.n	8008ae6 <_dtoa_r+0x24e>
 8008ba0:	636f4361 	.word	0x636f4361
 8008ba4:	3fd287a7 	.word	0x3fd287a7
 8008ba8:	8b60c8b3 	.word	0x8b60c8b3
 8008bac:	3fc68a28 	.word	0x3fc68a28
 8008bb0:	509f79fb 	.word	0x509f79fb
 8008bb4:	3fd34413 	.word	0x3fd34413
 8008bb8:	7ff00000 	.word	0x7ff00000
 8008bbc:	0800b579 	.word	0x0800b579
 8008bc0:	3ff80000 	.word	0x3ff80000
 8008bc4:	0800b638 	.word	0x0800b638
 8008bc8:	0800b610 	.word	0x0800b610
 8008bcc:	0800b5a5 	.word	0x0800b5a5
 8008bd0:	07f1      	lsls	r1, r6, #31
 8008bd2:	d508      	bpl.n	8008be6 <_dtoa_r+0x34e>
 8008bd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bdc:	f7f7 fd34 	bl	8000648 <__aeabi_dmul>
 8008be0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008be4:	3501      	adds	r5, #1
 8008be6:	1076      	asrs	r6, r6, #1
 8008be8:	3708      	adds	r7, #8
 8008bea:	2e00      	cmp	r6, #0
 8008bec:	d1f0      	bne.n	8008bd0 <_dtoa_r+0x338>
 8008bee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bf6:	f7f7 fe51 	bl	800089c <__aeabi_ddiv>
 8008bfa:	e9cd 0100 	strd	r0, r1, [sp]
 8008bfe:	e01a      	b.n	8008c36 <_dtoa_r+0x39e>
 8008c00:	2502      	movs	r5, #2
 8008c02:	e7a3      	b.n	8008b4c <_dtoa_r+0x2b4>
 8008c04:	f000 80a0 	beq.w	8008d48 <_dtoa_r+0x4b0>
 8008c08:	f1ca 0600 	rsb	r6, sl, #0
 8008c0c:	4b9f      	ldr	r3, [pc, #636]	; (8008e8c <_dtoa_r+0x5f4>)
 8008c0e:	4fa0      	ldr	r7, [pc, #640]	; (8008e90 <_dtoa_r+0x5f8>)
 8008c10:	f006 020f 	and.w	r2, r6, #15
 8008c14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c20:	f7f7 fd12 	bl	8000648 <__aeabi_dmul>
 8008c24:	e9cd 0100 	strd	r0, r1, [sp]
 8008c28:	1136      	asrs	r6, r6, #4
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	2502      	movs	r5, #2
 8008c2e:	2e00      	cmp	r6, #0
 8008c30:	d17f      	bne.n	8008d32 <_dtoa_r+0x49a>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e1      	bne.n	8008bfa <_dtoa_r+0x362>
 8008c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 8087 	beq.w	8008d4c <_dtoa_r+0x4b4>
 8008c3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c42:	2200      	movs	r2, #0
 8008c44:	4b93      	ldr	r3, [pc, #588]	; (8008e94 <_dtoa_r+0x5fc>)
 8008c46:	4630      	mov	r0, r6
 8008c48:	4639      	mov	r1, r7
 8008c4a:	f7f7 ff6f 	bl	8000b2c <__aeabi_dcmplt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d07c      	beq.n	8008d4c <_dtoa_r+0x4b4>
 8008c52:	f1b9 0f00 	cmp.w	r9, #0
 8008c56:	d079      	beq.n	8008d4c <_dtoa_r+0x4b4>
 8008c58:	9b02      	ldr	r3, [sp, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dd35      	ble.n	8008cca <_dtoa_r+0x432>
 8008c5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c62:	9308      	str	r3, [sp, #32]
 8008c64:	4639      	mov	r1, r7
 8008c66:	2200      	movs	r2, #0
 8008c68:	4b8b      	ldr	r3, [pc, #556]	; (8008e98 <_dtoa_r+0x600>)
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7f7 fcec 	bl	8000648 <__aeabi_dmul>
 8008c70:	e9cd 0100 	strd	r0, r1, [sp]
 8008c74:	9f02      	ldr	r7, [sp, #8]
 8008c76:	3501      	adds	r5, #1
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f7f7 fc7b 	bl	8000574 <__aeabi_i2d>
 8008c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c82:	f7f7 fce1 	bl	8000648 <__aeabi_dmul>
 8008c86:	2200      	movs	r2, #0
 8008c88:	4b84      	ldr	r3, [pc, #528]	; (8008e9c <_dtoa_r+0x604>)
 8008c8a:	f7f7 fb27 	bl	80002dc <__adddf3>
 8008c8e:	4605      	mov	r5, r0
 8008c90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c94:	2f00      	cmp	r7, #0
 8008c96:	d15d      	bne.n	8008d54 <_dtoa_r+0x4bc>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4b81      	ldr	r3, [pc, #516]	; (8008ea0 <_dtoa_r+0x608>)
 8008c9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ca0:	f7f7 fb1a 	bl	80002d8 <__aeabi_dsub>
 8008ca4:	462a      	mov	r2, r5
 8008ca6:	4633      	mov	r3, r6
 8008ca8:	e9cd 0100 	strd	r0, r1, [sp]
 8008cac:	f7f7 ff5c 	bl	8000b68 <__aeabi_dcmpgt>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f040 8288 	bne.w	80091c6 <_dtoa_r+0x92e>
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cc0:	f7f7 ff34 	bl	8000b2c <__aeabi_dcmplt>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f040 827c 	bne.w	80091c2 <_dtoa_r+0x92a>
 8008cca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cce:	e9cd 2300 	strd	r2, r3, [sp]
 8008cd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f2c0 8150 	blt.w	8008f7a <_dtoa_r+0x6e2>
 8008cda:	f1ba 0f0e 	cmp.w	sl, #14
 8008cde:	f300 814c 	bgt.w	8008f7a <_dtoa_r+0x6e2>
 8008ce2:	4b6a      	ldr	r3, [pc, #424]	; (8008e8c <_dtoa_r+0x5f4>)
 8008ce4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ce8:	ed93 7b00 	vldr	d7, [r3]
 8008cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008cf4:	f280 80d8 	bge.w	8008ea8 <_dtoa_r+0x610>
 8008cf8:	f1b9 0f00 	cmp.w	r9, #0
 8008cfc:	f300 80d4 	bgt.w	8008ea8 <_dtoa_r+0x610>
 8008d00:	f040 825e 	bne.w	80091c0 <_dtoa_r+0x928>
 8008d04:	2200      	movs	r2, #0
 8008d06:	4b66      	ldr	r3, [pc, #408]	; (8008ea0 <_dtoa_r+0x608>)
 8008d08:	ec51 0b17 	vmov	r0, r1, d7
 8008d0c:	f7f7 fc9c 	bl	8000648 <__aeabi_dmul>
 8008d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d14:	f7f7 ff1e 	bl	8000b54 <__aeabi_dcmpge>
 8008d18:	464f      	mov	r7, r9
 8008d1a:	464e      	mov	r6, r9
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	f040 8234 	bne.w	800918a <_dtoa_r+0x8f2>
 8008d22:	2331      	movs	r3, #49	; 0x31
 8008d24:	f10b 0501 	add.w	r5, fp, #1
 8008d28:	f88b 3000 	strb.w	r3, [fp]
 8008d2c:	f10a 0a01 	add.w	sl, sl, #1
 8008d30:	e22f      	b.n	8009192 <_dtoa_r+0x8fa>
 8008d32:	07f2      	lsls	r2, r6, #31
 8008d34:	d505      	bpl.n	8008d42 <_dtoa_r+0x4aa>
 8008d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d3a:	f7f7 fc85 	bl	8000648 <__aeabi_dmul>
 8008d3e:	3501      	adds	r5, #1
 8008d40:	2301      	movs	r3, #1
 8008d42:	1076      	asrs	r6, r6, #1
 8008d44:	3708      	adds	r7, #8
 8008d46:	e772      	b.n	8008c2e <_dtoa_r+0x396>
 8008d48:	2502      	movs	r5, #2
 8008d4a:	e774      	b.n	8008c36 <_dtoa_r+0x39e>
 8008d4c:	f8cd a020 	str.w	sl, [sp, #32]
 8008d50:	464f      	mov	r7, r9
 8008d52:	e791      	b.n	8008c78 <_dtoa_r+0x3e0>
 8008d54:	4b4d      	ldr	r3, [pc, #308]	; (8008e8c <_dtoa_r+0x5f4>)
 8008d56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d5a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d047      	beq.n	8008df4 <_dtoa_r+0x55c>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	2000      	movs	r0, #0
 8008d6a:	494e      	ldr	r1, [pc, #312]	; (8008ea4 <_dtoa_r+0x60c>)
 8008d6c:	f7f7 fd96 	bl	800089c <__aeabi_ddiv>
 8008d70:	462a      	mov	r2, r5
 8008d72:	4633      	mov	r3, r6
 8008d74:	f7f7 fab0 	bl	80002d8 <__aeabi_dsub>
 8008d78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d7c:	465d      	mov	r5, fp
 8008d7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d82:	f7f7 ff11 	bl	8000ba8 <__aeabi_d2iz>
 8008d86:	4606      	mov	r6, r0
 8008d88:	f7f7 fbf4 	bl	8000574 <__aeabi_i2d>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d94:	f7f7 faa0 	bl	80002d8 <__aeabi_dsub>
 8008d98:	3630      	adds	r6, #48	; 0x30
 8008d9a:	f805 6b01 	strb.w	r6, [r5], #1
 8008d9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008da2:	e9cd 0100 	strd	r0, r1, [sp]
 8008da6:	f7f7 fec1 	bl	8000b2c <__aeabi_dcmplt>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d163      	bne.n	8008e76 <_dtoa_r+0x5de>
 8008dae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008db2:	2000      	movs	r0, #0
 8008db4:	4937      	ldr	r1, [pc, #220]	; (8008e94 <_dtoa_r+0x5fc>)
 8008db6:	f7f7 fa8f 	bl	80002d8 <__aeabi_dsub>
 8008dba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008dbe:	f7f7 feb5 	bl	8000b2c <__aeabi_dcmplt>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f040 80b7 	bne.w	8008f36 <_dtoa_r+0x69e>
 8008dc8:	eba5 030b 	sub.w	r3, r5, fp
 8008dcc:	429f      	cmp	r7, r3
 8008dce:	f77f af7c 	ble.w	8008cca <_dtoa_r+0x432>
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	4b30      	ldr	r3, [pc, #192]	; (8008e98 <_dtoa_r+0x600>)
 8008dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008dda:	f7f7 fc35 	bl	8000648 <__aeabi_dmul>
 8008dde:	2200      	movs	r2, #0
 8008de0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008de4:	4b2c      	ldr	r3, [pc, #176]	; (8008e98 <_dtoa_r+0x600>)
 8008de6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dea:	f7f7 fc2d 	bl	8000648 <__aeabi_dmul>
 8008dee:	e9cd 0100 	strd	r0, r1, [sp]
 8008df2:	e7c4      	b.n	8008d7e <_dtoa_r+0x4e6>
 8008df4:	462a      	mov	r2, r5
 8008df6:	4633      	mov	r3, r6
 8008df8:	f7f7 fc26 	bl	8000648 <__aeabi_dmul>
 8008dfc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008e00:	eb0b 0507 	add.w	r5, fp, r7
 8008e04:	465e      	mov	r6, fp
 8008e06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e0a:	f7f7 fecd 	bl	8000ba8 <__aeabi_d2iz>
 8008e0e:	4607      	mov	r7, r0
 8008e10:	f7f7 fbb0 	bl	8000574 <__aeabi_i2d>
 8008e14:	3730      	adds	r7, #48	; 0x30
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e1e:	f7f7 fa5b 	bl	80002d8 <__aeabi_dsub>
 8008e22:	f806 7b01 	strb.w	r7, [r6], #1
 8008e26:	42ae      	cmp	r6, r5
 8008e28:	e9cd 0100 	strd	r0, r1, [sp]
 8008e2c:	f04f 0200 	mov.w	r2, #0
 8008e30:	d126      	bne.n	8008e80 <_dtoa_r+0x5e8>
 8008e32:	4b1c      	ldr	r3, [pc, #112]	; (8008ea4 <_dtoa_r+0x60c>)
 8008e34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e38:	f7f7 fa50 	bl	80002dc <__adddf3>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e44:	f7f7 fe90 	bl	8000b68 <__aeabi_dcmpgt>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d174      	bne.n	8008f36 <_dtoa_r+0x69e>
 8008e4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e50:	2000      	movs	r0, #0
 8008e52:	4914      	ldr	r1, [pc, #80]	; (8008ea4 <_dtoa_r+0x60c>)
 8008e54:	f7f7 fa40 	bl	80002d8 <__aeabi_dsub>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e60:	f7f7 fe64 	bl	8000b2c <__aeabi_dcmplt>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	f43f af30 	beq.w	8008cca <_dtoa_r+0x432>
 8008e6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e6e:	2b30      	cmp	r3, #48	; 0x30
 8008e70:	f105 32ff 	add.w	r2, r5, #4294967295
 8008e74:	d002      	beq.n	8008e7c <_dtoa_r+0x5e4>
 8008e76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e7a:	e04a      	b.n	8008f12 <_dtoa_r+0x67a>
 8008e7c:	4615      	mov	r5, r2
 8008e7e:	e7f4      	b.n	8008e6a <_dtoa_r+0x5d2>
 8008e80:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <_dtoa_r+0x600>)
 8008e82:	f7f7 fbe1 	bl	8000648 <__aeabi_dmul>
 8008e86:	e9cd 0100 	strd	r0, r1, [sp]
 8008e8a:	e7bc      	b.n	8008e06 <_dtoa_r+0x56e>
 8008e8c:	0800b638 	.word	0x0800b638
 8008e90:	0800b610 	.word	0x0800b610
 8008e94:	3ff00000 	.word	0x3ff00000
 8008e98:	40240000 	.word	0x40240000
 8008e9c:	401c0000 	.word	0x401c0000
 8008ea0:	40140000 	.word	0x40140000
 8008ea4:	3fe00000 	.word	0x3fe00000
 8008ea8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008eac:	465d      	mov	r5, fp
 8008eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	f7f7 fcf1 	bl	800089c <__aeabi_ddiv>
 8008eba:	f7f7 fe75 	bl	8000ba8 <__aeabi_d2iz>
 8008ebe:	4680      	mov	r8, r0
 8008ec0:	f7f7 fb58 	bl	8000574 <__aeabi_i2d>
 8008ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ec8:	f7f7 fbbe 	bl	8000648 <__aeabi_dmul>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008ed8:	f7f7 f9fe 	bl	80002d8 <__aeabi_dsub>
 8008edc:	f805 6b01 	strb.w	r6, [r5], #1
 8008ee0:	eba5 060b 	sub.w	r6, r5, fp
 8008ee4:	45b1      	cmp	r9, r6
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	d139      	bne.n	8008f60 <_dtoa_r+0x6c8>
 8008eec:	f7f7 f9f6 	bl	80002dc <__adddf3>
 8008ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	460f      	mov	r7, r1
 8008ef8:	f7f7 fe36 	bl	8000b68 <__aeabi_dcmpgt>
 8008efc:	b9c8      	cbnz	r0, 8008f32 <_dtoa_r+0x69a>
 8008efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f02:	4630      	mov	r0, r6
 8008f04:	4639      	mov	r1, r7
 8008f06:	f7f7 fe07 	bl	8000b18 <__aeabi_dcmpeq>
 8008f0a:	b110      	cbz	r0, 8008f12 <_dtoa_r+0x67a>
 8008f0c:	f018 0f01 	tst.w	r8, #1
 8008f10:	d10f      	bne.n	8008f32 <_dtoa_r+0x69a>
 8008f12:	9904      	ldr	r1, [sp, #16]
 8008f14:	4620      	mov	r0, r4
 8008f16:	f000 fb96 	bl	8009646 <_Bfree>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f1e:	702b      	strb	r3, [r5, #0]
 8008f20:	f10a 0301 	add.w	r3, sl, #1
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 8241 	beq.w	80093b0 <_dtoa_r+0xb18>
 8008f2e:	601d      	str	r5, [r3, #0]
 8008f30:	e23e      	b.n	80093b0 <_dtoa_r+0xb18>
 8008f32:	f8cd a020 	str.w	sl, [sp, #32]
 8008f36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f3a:	2a39      	cmp	r2, #57	; 0x39
 8008f3c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008f40:	d108      	bne.n	8008f54 <_dtoa_r+0x6bc>
 8008f42:	459b      	cmp	fp, r3
 8008f44:	d10a      	bne.n	8008f5c <_dtoa_r+0x6c4>
 8008f46:	9b08      	ldr	r3, [sp, #32]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	9308      	str	r3, [sp, #32]
 8008f4c:	2330      	movs	r3, #48	; 0x30
 8008f4e:	f88b 3000 	strb.w	r3, [fp]
 8008f52:	465b      	mov	r3, fp
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	3201      	adds	r2, #1
 8008f58:	701a      	strb	r2, [r3, #0]
 8008f5a:	e78c      	b.n	8008e76 <_dtoa_r+0x5de>
 8008f5c:	461d      	mov	r5, r3
 8008f5e:	e7ea      	b.n	8008f36 <_dtoa_r+0x69e>
 8008f60:	2200      	movs	r2, #0
 8008f62:	4b9b      	ldr	r3, [pc, #620]	; (80091d0 <_dtoa_r+0x938>)
 8008f64:	f7f7 fb70 	bl	8000648 <__aeabi_dmul>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	460f      	mov	r7, r1
 8008f70:	f7f7 fdd2 	bl	8000b18 <__aeabi_dcmpeq>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d09a      	beq.n	8008eae <_dtoa_r+0x616>
 8008f78:	e7cb      	b.n	8008f12 <_dtoa_r+0x67a>
 8008f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f7c:	2a00      	cmp	r2, #0
 8008f7e:	f000 808b 	beq.w	8009098 <_dtoa_r+0x800>
 8008f82:	9a06      	ldr	r2, [sp, #24]
 8008f84:	2a01      	cmp	r2, #1
 8008f86:	dc6e      	bgt.n	8009066 <_dtoa_r+0x7ce>
 8008f88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	d067      	beq.n	800905e <_dtoa_r+0x7c6>
 8008f8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f92:	9f07      	ldr	r7, [sp, #28]
 8008f94:	9d05      	ldr	r5, [sp, #20]
 8008f96:	9a05      	ldr	r2, [sp, #20]
 8008f98:	2101      	movs	r1, #1
 8008f9a:	441a      	add	r2, r3
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	9205      	str	r2, [sp, #20]
 8008fa0:	4498      	add	r8, r3
 8008fa2:	f000 fbf0 	bl	8009786 <__i2b>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	dd0c      	ble.n	8008fc6 <_dtoa_r+0x72e>
 8008fac:	f1b8 0f00 	cmp.w	r8, #0
 8008fb0:	dd09      	ble.n	8008fc6 <_dtoa_r+0x72e>
 8008fb2:	4545      	cmp	r5, r8
 8008fb4:	9a05      	ldr	r2, [sp, #20]
 8008fb6:	462b      	mov	r3, r5
 8008fb8:	bfa8      	it	ge
 8008fba:	4643      	movge	r3, r8
 8008fbc:	1ad2      	subs	r2, r2, r3
 8008fbe:	9205      	str	r2, [sp, #20]
 8008fc0:	1aed      	subs	r5, r5, r3
 8008fc2:	eba8 0803 	sub.w	r8, r8, r3
 8008fc6:	9b07      	ldr	r3, [sp, #28]
 8008fc8:	b1eb      	cbz	r3, 8009006 <_dtoa_r+0x76e>
 8008fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d067      	beq.n	80090a0 <_dtoa_r+0x808>
 8008fd0:	b18f      	cbz	r7, 8008ff6 <_dtoa_r+0x75e>
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	463a      	mov	r2, r7
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 fc74 	bl	80098c4 <__pow5mult>
 8008fdc:	9a04      	ldr	r2, [sp, #16]
 8008fde:	4601      	mov	r1, r0
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 fbd8 	bl	8009798 <__multiply>
 8008fe8:	9904      	ldr	r1, [sp, #16]
 8008fea:	9008      	str	r0, [sp, #32]
 8008fec:	4620      	mov	r0, r4
 8008fee:	f000 fb2a 	bl	8009646 <_Bfree>
 8008ff2:	9b08      	ldr	r3, [sp, #32]
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	9b07      	ldr	r3, [sp, #28]
 8008ff8:	1bda      	subs	r2, r3, r7
 8008ffa:	d004      	beq.n	8009006 <_dtoa_r+0x76e>
 8008ffc:	9904      	ldr	r1, [sp, #16]
 8008ffe:	4620      	mov	r0, r4
 8009000:	f000 fc60 	bl	80098c4 <__pow5mult>
 8009004:	9004      	str	r0, [sp, #16]
 8009006:	2101      	movs	r1, #1
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fbbc 	bl	8009786 <__i2b>
 800900e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009010:	4607      	mov	r7, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 81d0 	beq.w	80093b8 <_dtoa_r+0xb20>
 8009018:	461a      	mov	r2, r3
 800901a:	4601      	mov	r1, r0
 800901c:	4620      	mov	r0, r4
 800901e:	f000 fc51 	bl	80098c4 <__pow5mult>
 8009022:	9b06      	ldr	r3, [sp, #24]
 8009024:	2b01      	cmp	r3, #1
 8009026:	4607      	mov	r7, r0
 8009028:	dc40      	bgt.n	80090ac <_dtoa_r+0x814>
 800902a:	9b00      	ldr	r3, [sp, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d139      	bne.n	80090a4 <_dtoa_r+0x80c>
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009036:	2b00      	cmp	r3, #0
 8009038:	d136      	bne.n	80090a8 <_dtoa_r+0x810>
 800903a:	9b01      	ldr	r3, [sp, #4]
 800903c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009040:	0d1b      	lsrs	r3, r3, #20
 8009042:	051b      	lsls	r3, r3, #20
 8009044:	b12b      	cbz	r3, 8009052 <_dtoa_r+0x7ba>
 8009046:	9b05      	ldr	r3, [sp, #20]
 8009048:	3301      	adds	r3, #1
 800904a:	9305      	str	r3, [sp, #20]
 800904c:	f108 0801 	add.w	r8, r8, #1
 8009050:	2301      	movs	r3, #1
 8009052:	9307      	str	r3, [sp, #28]
 8009054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009056:	2b00      	cmp	r3, #0
 8009058:	d12a      	bne.n	80090b0 <_dtoa_r+0x818>
 800905a:	2001      	movs	r0, #1
 800905c:	e030      	b.n	80090c0 <_dtoa_r+0x828>
 800905e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009060:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009064:	e795      	b.n	8008f92 <_dtoa_r+0x6fa>
 8009066:	9b07      	ldr	r3, [sp, #28]
 8009068:	f109 37ff 	add.w	r7, r9, #4294967295
 800906c:	42bb      	cmp	r3, r7
 800906e:	bfbf      	itttt	lt
 8009070:	9b07      	ldrlt	r3, [sp, #28]
 8009072:	9707      	strlt	r7, [sp, #28]
 8009074:	1afa      	sublt	r2, r7, r3
 8009076:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009078:	bfbb      	ittet	lt
 800907a:	189b      	addlt	r3, r3, r2
 800907c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800907e:	1bdf      	subge	r7, r3, r7
 8009080:	2700      	movlt	r7, #0
 8009082:	f1b9 0f00 	cmp.w	r9, #0
 8009086:	bfb5      	itete	lt
 8009088:	9b05      	ldrlt	r3, [sp, #20]
 800908a:	9d05      	ldrge	r5, [sp, #20]
 800908c:	eba3 0509 	sublt.w	r5, r3, r9
 8009090:	464b      	movge	r3, r9
 8009092:	bfb8      	it	lt
 8009094:	2300      	movlt	r3, #0
 8009096:	e77e      	b.n	8008f96 <_dtoa_r+0x6fe>
 8009098:	9f07      	ldr	r7, [sp, #28]
 800909a:	9d05      	ldr	r5, [sp, #20]
 800909c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800909e:	e783      	b.n	8008fa8 <_dtoa_r+0x710>
 80090a0:	9a07      	ldr	r2, [sp, #28]
 80090a2:	e7ab      	b.n	8008ffc <_dtoa_r+0x764>
 80090a4:	2300      	movs	r3, #0
 80090a6:	e7d4      	b.n	8009052 <_dtoa_r+0x7ba>
 80090a8:	9b00      	ldr	r3, [sp, #0]
 80090aa:	e7d2      	b.n	8009052 <_dtoa_r+0x7ba>
 80090ac:	2300      	movs	r3, #0
 80090ae:	9307      	str	r3, [sp, #28]
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80090b6:	6918      	ldr	r0, [r3, #16]
 80090b8:	f000 fb17 	bl	80096ea <__hi0bits>
 80090bc:	f1c0 0020 	rsb	r0, r0, #32
 80090c0:	4440      	add	r0, r8
 80090c2:	f010 001f 	ands.w	r0, r0, #31
 80090c6:	d047      	beq.n	8009158 <_dtoa_r+0x8c0>
 80090c8:	f1c0 0320 	rsb	r3, r0, #32
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	dd3b      	ble.n	8009148 <_dtoa_r+0x8b0>
 80090d0:	9b05      	ldr	r3, [sp, #20]
 80090d2:	f1c0 001c 	rsb	r0, r0, #28
 80090d6:	4403      	add	r3, r0
 80090d8:	9305      	str	r3, [sp, #20]
 80090da:	4405      	add	r5, r0
 80090dc:	4480      	add	r8, r0
 80090de:	9b05      	ldr	r3, [sp, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	dd05      	ble.n	80090f0 <_dtoa_r+0x858>
 80090e4:	461a      	mov	r2, r3
 80090e6:	9904      	ldr	r1, [sp, #16]
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fc39 	bl	8009960 <__lshift>
 80090ee:	9004      	str	r0, [sp, #16]
 80090f0:	f1b8 0f00 	cmp.w	r8, #0
 80090f4:	dd05      	ble.n	8009102 <_dtoa_r+0x86a>
 80090f6:	4639      	mov	r1, r7
 80090f8:	4642      	mov	r2, r8
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 fc30 	bl	8009960 <__lshift>
 8009100:	4607      	mov	r7, r0
 8009102:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009104:	b353      	cbz	r3, 800915c <_dtoa_r+0x8c4>
 8009106:	4639      	mov	r1, r7
 8009108:	9804      	ldr	r0, [sp, #16]
 800910a:	f000 fc7d 	bl	8009a08 <__mcmp>
 800910e:	2800      	cmp	r0, #0
 8009110:	da24      	bge.n	800915c <_dtoa_r+0x8c4>
 8009112:	2300      	movs	r3, #0
 8009114:	220a      	movs	r2, #10
 8009116:	9904      	ldr	r1, [sp, #16]
 8009118:	4620      	mov	r0, r4
 800911a:	f000 faab 	bl	8009674 <__multadd>
 800911e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009120:	9004      	str	r0, [sp, #16]
 8009122:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 814d 	beq.w	80093c6 <_dtoa_r+0xb2e>
 800912c:	2300      	movs	r3, #0
 800912e:	4631      	mov	r1, r6
 8009130:	220a      	movs	r2, #10
 8009132:	4620      	mov	r0, r4
 8009134:	f000 fa9e 	bl	8009674 <__multadd>
 8009138:	9b02      	ldr	r3, [sp, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	4606      	mov	r6, r0
 800913e:	dc4f      	bgt.n	80091e0 <_dtoa_r+0x948>
 8009140:	9b06      	ldr	r3, [sp, #24]
 8009142:	2b02      	cmp	r3, #2
 8009144:	dd4c      	ble.n	80091e0 <_dtoa_r+0x948>
 8009146:	e011      	b.n	800916c <_dtoa_r+0x8d4>
 8009148:	d0c9      	beq.n	80090de <_dtoa_r+0x846>
 800914a:	9a05      	ldr	r2, [sp, #20]
 800914c:	331c      	adds	r3, #28
 800914e:	441a      	add	r2, r3
 8009150:	9205      	str	r2, [sp, #20]
 8009152:	441d      	add	r5, r3
 8009154:	4498      	add	r8, r3
 8009156:	e7c2      	b.n	80090de <_dtoa_r+0x846>
 8009158:	4603      	mov	r3, r0
 800915a:	e7f6      	b.n	800914a <_dtoa_r+0x8b2>
 800915c:	f1b9 0f00 	cmp.w	r9, #0
 8009160:	dc38      	bgt.n	80091d4 <_dtoa_r+0x93c>
 8009162:	9b06      	ldr	r3, [sp, #24]
 8009164:	2b02      	cmp	r3, #2
 8009166:	dd35      	ble.n	80091d4 <_dtoa_r+0x93c>
 8009168:	f8cd 9008 	str.w	r9, [sp, #8]
 800916c:	9b02      	ldr	r3, [sp, #8]
 800916e:	b963      	cbnz	r3, 800918a <_dtoa_r+0x8f2>
 8009170:	4639      	mov	r1, r7
 8009172:	2205      	movs	r2, #5
 8009174:	4620      	mov	r0, r4
 8009176:	f000 fa7d 	bl	8009674 <__multadd>
 800917a:	4601      	mov	r1, r0
 800917c:	4607      	mov	r7, r0
 800917e:	9804      	ldr	r0, [sp, #16]
 8009180:	f000 fc42 	bl	8009a08 <__mcmp>
 8009184:	2800      	cmp	r0, #0
 8009186:	f73f adcc 	bgt.w	8008d22 <_dtoa_r+0x48a>
 800918a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800918c:	465d      	mov	r5, fp
 800918e:	ea6f 0a03 	mvn.w	sl, r3
 8009192:	f04f 0900 	mov.w	r9, #0
 8009196:	4639      	mov	r1, r7
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fa54 	bl	8009646 <_Bfree>
 800919e:	2e00      	cmp	r6, #0
 80091a0:	f43f aeb7 	beq.w	8008f12 <_dtoa_r+0x67a>
 80091a4:	f1b9 0f00 	cmp.w	r9, #0
 80091a8:	d005      	beq.n	80091b6 <_dtoa_r+0x91e>
 80091aa:	45b1      	cmp	r9, r6
 80091ac:	d003      	beq.n	80091b6 <_dtoa_r+0x91e>
 80091ae:	4649      	mov	r1, r9
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fa48 	bl	8009646 <_Bfree>
 80091b6:	4631      	mov	r1, r6
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 fa44 	bl	8009646 <_Bfree>
 80091be:	e6a8      	b.n	8008f12 <_dtoa_r+0x67a>
 80091c0:	2700      	movs	r7, #0
 80091c2:	463e      	mov	r6, r7
 80091c4:	e7e1      	b.n	800918a <_dtoa_r+0x8f2>
 80091c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80091ca:	463e      	mov	r6, r7
 80091cc:	e5a9      	b.n	8008d22 <_dtoa_r+0x48a>
 80091ce:	bf00      	nop
 80091d0:	40240000 	.word	0x40240000
 80091d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 80fa 	beq.w	80093d4 <_dtoa_r+0xb3c>
 80091e0:	2d00      	cmp	r5, #0
 80091e2:	dd05      	ble.n	80091f0 <_dtoa_r+0x958>
 80091e4:	4631      	mov	r1, r6
 80091e6:	462a      	mov	r2, r5
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 fbb9 	bl	8009960 <__lshift>
 80091ee:	4606      	mov	r6, r0
 80091f0:	9b07      	ldr	r3, [sp, #28]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d04c      	beq.n	8009290 <_dtoa_r+0x9f8>
 80091f6:	6871      	ldr	r1, [r6, #4]
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 f9f0 	bl	80095de <_Balloc>
 80091fe:	6932      	ldr	r2, [r6, #16]
 8009200:	3202      	adds	r2, #2
 8009202:	4605      	mov	r5, r0
 8009204:	0092      	lsls	r2, r2, #2
 8009206:	f106 010c 	add.w	r1, r6, #12
 800920a:	300c      	adds	r0, #12
 800920c:	f000 f9dc 	bl	80095c8 <memcpy>
 8009210:	2201      	movs	r2, #1
 8009212:	4629      	mov	r1, r5
 8009214:	4620      	mov	r0, r4
 8009216:	f000 fba3 	bl	8009960 <__lshift>
 800921a:	9b00      	ldr	r3, [sp, #0]
 800921c:	f8cd b014 	str.w	fp, [sp, #20]
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	46b1      	mov	r9, r6
 8009226:	9307      	str	r3, [sp, #28]
 8009228:	4606      	mov	r6, r0
 800922a:	4639      	mov	r1, r7
 800922c:	9804      	ldr	r0, [sp, #16]
 800922e:	f7ff faa7 	bl	8008780 <quorem>
 8009232:	4649      	mov	r1, r9
 8009234:	4605      	mov	r5, r0
 8009236:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800923a:	9804      	ldr	r0, [sp, #16]
 800923c:	f000 fbe4 	bl	8009a08 <__mcmp>
 8009240:	4632      	mov	r2, r6
 8009242:	9000      	str	r0, [sp, #0]
 8009244:	4639      	mov	r1, r7
 8009246:	4620      	mov	r0, r4
 8009248:	f000 fbf8 	bl	8009a3c <__mdiff>
 800924c:	68c3      	ldr	r3, [r0, #12]
 800924e:	4602      	mov	r2, r0
 8009250:	bb03      	cbnz	r3, 8009294 <_dtoa_r+0x9fc>
 8009252:	4601      	mov	r1, r0
 8009254:	9008      	str	r0, [sp, #32]
 8009256:	9804      	ldr	r0, [sp, #16]
 8009258:	f000 fbd6 	bl	8009a08 <__mcmp>
 800925c:	9a08      	ldr	r2, [sp, #32]
 800925e:	4603      	mov	r3, r0
 8009260:	4611      	mov	r1, r2
 8009262:	4620      	mov	r0, r4
 8009264:	9308      	str	r3, [sp, #32]
 8009266:	f000 f9ee 	bl	8009646 <_Bfree>
 800926a:	9b08      	ldr	r3, [sp, #32]
 800926c:	b9a3      	cbnz	r3, 8009298 <_dtoa_r+0xa00>
 800926e:	9a06      	ldr	r2, [sp, #24]
 8009270:	b992      	cbnz	r2, 8009298 <_dtoa_r+0xa00>
 8009272:	9a07      	ldr	r2, [sp, #28]
 8009274:	b982      	cbnz	r2, 8009298 <_dtoa_r+0xa00>
 8009276:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800927a:	d029      	beq.n	80092d0 <_dtoa_r+0xa38>
 800927c:	9b00      	ldr	r3, [sp, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	dd01      	ble.n	8009286 <_dtoa_r+0x9ee>
 8009282:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009286:	9b05      	ldr	r3, [sp, #20]
 8009288:	1c5d      	adds	r5, r3, #1
 800928a:	f883 8000 	strb.w	r8, [r3]
 800928e:	e782      	b.n	8009196 <_dtoa_r+0x8fe>
 8009290:	4630      	mov	r0, r6
 8009292:	e7c2      	b.n	800921a <_dtoa_r+0x982>
 8009294:	2301      	movs	r3, #1
 8009296:	e7e3      	b.n	8009260 <_dtoa_r+0x9c8>
 8009298:	9a00      	ldr	r2, [sp, #0]
 800929a:	2a00      	cmp	r2, #0
 800929c:	db04      	blt.n	80092a8 <_dtoa_r+0xa10>
 800929e:	d125      	bne.n	80092ec <_dtoa_r+0xa54>
 80092a0:	9a06      	ldr	r2, [sp, #24]
 80092a2:	bb1a      	cbnz	r2, 80092ec <_dtoa_r+0xa54>
 80092a4:	9a07      	ldr	r2, [sp, #28]
 80092a6:	bb0a      	cbnz	r2, 80092ec <_dtoa_r+0xa54>
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	ddec      	ble.n	8009286 <_dtoa_r+0x9ee>
 80092ac:	2201      	movs	r2, #1
 80092ae:	9904      	ldr	r1, [sp, #16]
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fb55 	bl	8009960 <__lshift>
 80092b6:	4639      	mov	r1, r7
 80092b8:	9004      	str	r0, [sp, #16]
 80092ba:	f000 fba5 	bl	8009a08 <__mcmp>
 80092be:	2800      	cmp	r0, #0
 80092c0:	dc03      	bgt.n	80092ca <_dtoa_r+0xa32>
 80092c2:	d1e0      	bne.n	8009286 <_dtoa_r+0x9ee>
 80092c4:	f018 0f01 	tst.w	r8, #1
 80092c8:	d0dd      	beq.n	8009286 <_dtoa_r+0x9ee>
 80092ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092ce:	d1d8      	bne.n	8009282 <_dtoa_r+0x9ea>
 80092d0:	9b05      	ldr	r3, [sp, #20]
 80092d2:	9a05      	ldr	r2, [sp, #20]
 80092d4:	1c5d      	adds	r5, r3, #1
 80092d6:	2339      	movs	r3, #57	; 0x39
 80092d8:	7013      	strb	r3, [r2, #0]
 80092da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092de:	2b39      	cmp	r3, #57	; 0x39
 80092e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80092e4:	d04f      	beq.n	8009386 <_dtoa_r+0xaee>
 80092e6:	3301      	adds	r3, #1
 80092e8:	7013      	strb	r3, [r2, #0]
 80092ea:	e754      	b.n	8009196 <_dtoa_r+0x8fe>
 80092ec:	9a05      	ldr	r2, [sp, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f102 0501 	add.w	r5, r2, #1
 80092f4:	dd06      	ble.n	8009304 <_dtoa_r+0xa6c>
 80092f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092fa:	d0e9      	beq.n	80092d0 <_dtoa_r+0xa38>
 80092fc:	f108 0801 	add.w	r8, r8, #1
 8009300:	9b05      	ldr	r3, [sp, #20]
 8009302:	e7c2      	b.n	800928a <_dtoa_r+0x9f2>
 8009304:	9a02      	ldr	r2, [sp, #8]
 8009306:	f805 8c01 	strb.w	r8, [r5, #-1]
 800930a:	eba5 030b 	sub.w	r3, r5, fp
 800930e:	4293      	cmp	r3, r2
 8009310:	d021      	beq.n	8009356 <_dtoa_r+0xabe>
 8009312:	2300      	movs	r3, #0
 8009314:	220a      	movs	r2, #10
 8009316:	9904      	ldr	r1, [sp, #16]
 8009318:	4620      	mov	r0, r4
 800931a:	f000 f9ab 	bl	8009674 <__multadd>
 800931e:	45b1      	cmp	r9, r6
 8009320:	9004      	str	r0, [sp, #16]
 8009322:	f04f 0300 	mov.w	r3, #0
 8009326:	f04f 020a 	mov.w	r2, #10
 800932a:	4649      	mov	r1, r9
 800932c:	4620      	mov	r0, r4
 800932e:	d105      	bne.n	800933c <_dtoa_r+0xaa4>
 8009330:	f000 f9a0 	bl	8009674 <__multadd>
 8009334:	4681      	mov	r9, r0
 8009336:	4606      	mov	r6, r0
 8009338:	9505      	str	r5, [sp, #20]
 800933a:	e776      	b.n	800922a <_dtoa_r+0x992>
 800933c:	f000 f99a 	bl	8009674 <__multadd>
 8009340:	4631      	mov	r1, r6
 8009342:	4681      	mov	r9, r0
 8009344:	2300      	movs	r3, #0
 8009346:	220a      	movs	r2, #10
 8009348:	4620      	mov	r0, r4
 800934a:	f000 f993 	bl	8009674 <__multadd>
 800934e:	4606      	mov	r6, r0
 8009350:	e7f2      	b.n	8009338 <_dtoa_r+0xaa0>
 8009352:	f04f 0900 	mov.w	r9, #0
 8009356:	2201      	movs	r2, #1
 8009358:	9904      	ldr	r1, [sp, #16]
 800935a:	4620      	mov	r0, r4
 800935c:	f000 fb00 	bl	8009960 <__lshift>
 8009360:	4639      	mov	r1, r7
 8009362:	9004      	str	r0, [sp, #16]
 8009364:	f000 fb50 	bl	8009a08 <__mcmp>
 8009368:	2800      	cmp	r0, #0
 800936a:	dcb6      	bgt.n	80092da <_dtoa_r+0xa42>
 800936c:	d102      	bne.n	8009374 <_dtoa_r+0xadc>
 800936e:	f018 0f01 	tst.w	r8, #1
 8009372:	d1b2      	bne.n	80092da <_dtoa_r+0xa42>
 8009374:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009378:	2b30      	cmp	r3, #48	; 0x30
 800937a:	f105 32ff 	add.w	r2, r5, #4294967295
 800937e:	f47f af0a 	bne.w	8009196 <_dtoa_r+0x8fe>
 8009382:	4615      	mov	r5, r2
 8009384:	e7f6      	b.n	8009374 <_dtoa_r+0xadc>
 8009386:	4593      	cmp	fp, r2
 8009388:	d105      	bne.n	8009396 <_dtoa_r+0xafe>
 800938a:	2331      	movs	r3, #49	; 0x31
 800938c:	f10a 0a01 	add.w	sl, sl, #1
 8009390:	f88b 3000 	strb.w	r3, [fp]
 8009394:	e6ff      	b.n	8009196 <_dtoa_r+0x8fe>
 8009396:	4615      	mov	r5, r2
 8009398:	e79f      	b.n	80092da <_dtoa_r+0xa42>
 800939a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009400 <_dtoa_r+0xb68>
 800939e:	e007      	b.n	80093b0 <_dtoa_r+0xb18>
 80093a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009404 <_dtoa_r+0xb6c>
 80093a6:	b11b      	cbz	r3, 80093b0 <_dtoa_r+0xb18>
 80093a8:	f10b 0308 	add.w	r3, fp, #8
 80093ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	4658      	mov	r0, fp
 80093b2:	b017      	add	sp, #92	; 0x5c
 80093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b8:	9b06      	ldr	r3, [sp, #24]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	f77f ae35 	ble.w	800902a <_dtoa_r+0x792>
 80093c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c2:	9307      	str	r3, [sp, #28]
 80093c4:	e649      	b.n	800905a <_dtoa_r+0x7c2>
 80093c6:	9b02      	ldr	r3, [sp, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dc03      	bgt.n	80093d4 <_dtoa_r+0xb3c>
 80093cc:	9b06      	ldr	r3, [sp, #24]
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	f73f aecc 	bgt.w	800916c <_dtoa_r+0x8d4>
 80093d4:	465d      	mov	r5, fp
 80093d6:	4639      	mov	r1, r7
 80093d8:	9804      	ldr	r0, [sp, #16]
 80093da:	f7ff f9d1 	bl	8008780 <quorem>
 80093de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80093e2:	f805 8b01 	strb.w	r8, [r5], #1
 80093e6:	9a02      	ldr	r2, [sp, #8]
 80093e8:	eba5 030b 	sub.w	r3, r5, fp
 80093ec:	429a      	cmp	r2, r3
 80093ee:	ddb0      	ble.n	8009352 <_dtoa_r+0xaba>
 80093f0:	2300      	movs	r3, #0
 80093f2:	220a      	movs	r2, #10
 80093f4:	9904      	ldr	r1, [sp, #16]
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 f93c 	bl	8009674 <__multadd>
 80093fc:	9004      	str	r0, [sp, #16]
 80093fe:	e7ea      	b.n	80093d6 <_dtoa_r+0xb3e>
 8009400:	0800b578 	.word	0x0800b578
 8009404:	0800b59c 	.word	0x0800b59c

08009408 <std>:
 8009408:	2300      	movs	r3, #0
 800940a:	b510      	push	{r4, lr}
 800940c:	4604      	mov	r4, r0
 800940e:	e9c0 3300 	strd	r3, r3, [r0]
 8009412:	6083      	str	r3, [r0, #8]
 8009414:	8181      	strh	r1, [r0, #12]
 8009416:	6643      	str	r3, [r0, #100]	; 0x64
 8009418:	81c2      	strh	r2, [r0, #14]
 800941a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800941e:	6183      	str	r3, [r0, #24]
 8009420:	4619      	mov	r1, r3
 8009422:	2208      	movs	r2, #8
 8009424:	305c      	adds	r0, #92	; 0x5c
 8009426:	f7fe fd0f 	bl	8007e48 <memset>
 800942a:	4b05      	ldr	r3, [pc, #20]	; (8009440 <std+0x38>)
 800942c:	6263      	str	r3, [r4, #36]	; 0x24
 800942e:	4b05      	ldr	r3, [pc, #20]	; (8009444 <std+0x3c>)
 8009430:	62a3      	str	r3, [r4, #40]	; 0x28
 8009432:	4b05      	ldr	r3, [pc, #20]	; (8009448 <std+0x40>)
 8009434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009436:	4b05      	ldr	r3, [pc, #20]	; (800944c <std+0x44>)
 8009438:	6224      	str	r4, [r4, #32]
 800943a:	6323      	str	r3, [r4, #48]	; 0x30
 800943c:	bd10      	pop	{r4, pc}
 800943e:	bf00      	nop
 8009440:	0800a245 	.word	0x0800a245
 8009444:	0800a267 	.word	0x0800a267
 8009448:	0800a29f 	.word	0x0800a29f
 800944c:	0800a2c3 	.word	0x0800a2c3

08009450 <_cleanup_r>:
 8009450:	4901      	ldr	r1, [pc, #4]	; (8009458 <_cleanup_r+0x8>)
 8009452:	f000 b885 	b.w	8009560 <_fwalk_reent>
 8009456:	bf00      	nop
 8009458:	0800a59d 	.word	0x0800a59d

0800945c <__sfmoreglue>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	1e4a      	subs	r2, r1, #1
 8009460:	2568      	movs	r5, #104	; 0x68
 8009462:	4355      	muls	r5, r2
 8009464:	460e      	mov	r6, r1
 8009466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800946a:	f000 fbef 	bl	8009c4c <_malloc_r>
 800946e:	4604      	mov	r4, r0
 8009470:	b140      	cbz	r0, 8009484 <__sfmoreglue+0x28>
 8009472:	2100      	movs	r1, #0
 8009474:	e9c0 1600 	strd	r1, r6, [r0]
 8009478:	300c      	adds	r0, #12
 800947a:	60a0      	str	r0, [r4, #8]
 800947c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009480:	f7fe fce2 	bl	8007e48 <memset>
 8009484:	4620      	mov	r0, r4
 8009486:	bd70      	pop	{r4, r5, r6, pc}

08009488 <__sinit>:
 8009488:	6983      	ldr	r3, [r0, #24]
 800948a:	b510      	push	{r4, lr}
 800948c:	4604      	mov	r4, r0
 800948e:	bb33      	cbnz	r3, 80094de <__sinit+0x56>
 8009490:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009494:	6503      	str	r3, [r0, #80]	; 0x50
 8009496:	4b12      	ldr	r3, [pc, #72]	; (80094e0 <__sinit+0x58>)
 8009498:	4a12      	ldr	r2, [pc, #72]	; (80094e4 <__sinit+0x5c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6282      	str	r2, [r0, #40]	; 0x28
 800949e:	4298      	cmp	r0, r3
 80094a0:	bf04      	itt	eq
 80094a2:	2301      	moveq	r3, #1
 80094a4:	6183      	streq	r3, [r0, #24]
 80094a6:	f000 f81f 	bl	80094e8 <__sfp>
 80094aa:	6060      	str	r0, [r4, #4]
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 f81b 	bl	80094e8 <__sfp>
 80094b2:	60a0      	str	r0, [r4, #8]
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 f817 	bl	80094e8 <__sfp>
 80094ba:	2200      	movs	r2, #0
 80094bc:	60e0      	str	r0, [r4, #12]
 80094be:	2104      	movs	r1, #4
 80094c0:	6860      	ldr	r0, [r4, #4]
 80094c2:	f7ff ffa1 	bl	8009408 <std>
 80094c6:	2201      	movs	r2, #1
 80094c8:	2109      	movs	r1, #9
 80094ca:	68a0      	ldr	r0, [r4, #8]
 80094cc:	f7ff ff9c 	bl	8009408 <std>
 80094d0:	2202      	movs	r2, #2
 80094d2:	2112      	movs	r1, #18
 80094d4:	68e0      	ldr	r0, [r4, #12]
 80094d6:	f7ff ff97 	bl	8009408 <std>
 80094da:	2301      	movs	r3, #1
 80094dc:	61a3      	str	r3, [r4, #24]
 80094de:	bd10      	pop	{r4, pc}
 80094e0:	0800b564 	.word	0x0800b564
 80094e4:	08009451 	.word	0x08009451

080094e8 <__sfp>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	4b1b      	ldr	r3, [pc, #108]	; (8009558 <__sfp+0x70>)
 80094ec:	681e      	ldr	r6, [r3, #0]
 80094ee:	69b3      	ldr	r3, [r6, #24]
 80094f0:	4607      	mov	r7, r0
 80094f2:	b913      	cbnz	r3, 80094fa <__sfp+0x12>
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7ff ffc7 	bl	8009488 <__sinit>
 80094fa:	3648      	adds	r6, #72	; 0x48
 80094fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009500:	3b01      	subs	r3, #1
 8009502:	d503      	bpl.n	800950c <__sfp+0x24>
 8009504:	6833      	ldr	r3, [r6, #0]
 8009506:	b133      	cbz	r3, 8009516 <__sfp+0x2e>
 8009508:	6836      	ldr	r6, [r6, #0]
 800950a:	e7f7      	b.n	80094fc <__sfp+0x14>
 800950c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009510:	b16d      	cbz	r5, 800952e <__sfp+0x46>
 8009512:	3468      	adds	r4, #104	; 0x68
 8009514:	e7f4      	b.n	8009500 <__sfp+0x18>
 8009516:	2104      	movs	r1, #4
 8009518:	4638      	mov	r0, r7
 800951a:	f7ff ff9f 	bl	800945c <__sfmoreglue>
 800951e:	6030      	str	r0, [r6, #0]
 8009520:	2800      	cmp	r0, #0
 8009522:	d1f1      	bne.n	8009508 <__sfp+0x20>
 8009524:	230c      	movs	r3, #12
 8009526:	603b      	str	r3, [r7, #0]
 8009528:	4604      	mov	r4, r0
 800952a:	4620      	mov	r0, r4
 800952c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952e:	4b0b      	ldr	r3, [pc, #44]	; (800955c <__sfp+0x74>)
 8009530:	6665      	str	r5, [r4, #100]	; 0x64
 8009532:	e9c4 5500 	strd	r5, r5, [r4]
 8009536:	60a5      	str	r5, [r4, #8]
 8009538:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800953c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009540:	2208      	movs	r2, #8
 8009542:	4629      	mov	r1, r5
 8009544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009548:	f7fe fc7e 	bl	8007e48 <memset>
 800954c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009554:	e7e9      	b.n	800952a <__sfp+0x42>
 8009556:	bf00      	nop
 8009558:	0800b564 	.word	0x0800b564
 800955c:	ffff0001 	.word	0xffff0001

08009560 <_fwalk_reent>:
 8009560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009564:	4680      	mov	r8, r0
 8009566:	4689      	mov	r9, r1
 8009568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800956c:	2600      	movs	r6, #0
 800956e:	b914      	cbnz	r4, 8009576 <_fwalk_reent+0x16>
 8009570:	4630      	mov	r0, r6
 8009572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009576:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800957a:	3f01      	subs	r7, #1
 800957c:	d501      	bpl.n	8009582 <_fwalk_reent+0x22>
 800957e:	6824      	ldr	r4, [r4, #0]
 8009580:	e7f5      	b.n	800956e <_fwalk_reent+0xe>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d907      	bls.n	8009598 <_fwalk_reent+0x38>
 8009588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800958c:	3301      	adds	r3, #1
 800958e:	d003      	beq.n	8009598 <_fwalk_reent+0x38>
 8009590:	4629      	mov	r1, r5
 8009592:	4640      	mov	r0, r8
 8009594:	47c8      	blx	r9
 8009596:	4306      	orrs	r6, r0
 8009598:	3568      	adds	r5, #104	; 0x68
 800959a:	e7ee      	b.n	800957a <_fwalk_reent+0x1a>

0800959c <_localeconv_r>:
 800959c:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <_localeconv_r+0x14>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6a18      	ldr	r0, [r3, #32]
 80095a2:	4b04      	ldr	r3, [pc, #16]	; (80095b4 <_localeconv_r+0x18>)
 80095a4:	2800      	cmp	r0, #0
 80095a6:	bf08      	it	eq
 80095a8:	4618      	moveq	r0, r3
 80095aa:	30f0      	adds	r0, #240	; 0xf0
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	2000000c 	.word	0x2000000c
 80095b4:	20000070 	.word	0x20000070

080095b8 <malloc>:
 80095b8:	4b02      	ldr	r3, [pc, #8]	; (80095c4 <malloc+0xc>)
 80095ba:	4601      	mov	r1, r0
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	f000 bb45 	b.w	8009c4c <_malloc_r>
 80095c2:	bf00      	nop
 80095c4:	2000000c 	.word	0x2000000c

080095c8 <memcpy>:
 80095c8:	b510      	push	{r4, lr}
 80095ca:	1e43      	subs	r3, r0, #1
 80095cc:	440a      	add	r2, r1
 80095ce:	4291      	cmp	r1, r2
 80095d0:	d100      	bne.n	80095d4 <memcpy+0xc>
 80095d2:	bd10      	pop	{r4, pc}
 80095d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095dc:	e7f7      	b.n	80095ce <memcpy+0x6>

080095de <_Balloc>:
 80095de:	b570      	push	{r4, r5, r6, lr}
 80095e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095e2:	4604      	mov	r4, r0
 80095e4:	460e      	mov	r6, r1
 80095e6:	b93d      	cbnz	r5, 80095f8 <_Balloc+0x1a>
 80095e8:	2010      	movs	r0, #16
 80095ea:	f7ff ffe5 	bl	80095b8 <malloc>
 80095ee:	6260      	str	r0, [r4, #36]	; 0x24
 80095f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095f4:	6005      	str	r5, [r0, #0]
 80095f6:	60c5      	str	r5, [r0, #12]
 80095f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80095fa:	68eb      	ldr	r3, [r5, #12]
 80095fc:	b183      	cbz	r3, 8009620 <_Balloc+0x42>
 80095fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009606:	b9b8      	cbnz	r0, 8009638 <_Balloc+0x5a>
 8009608:	2101      	movs	r1, #1
 800960a:	fa01 f506 	lsl.w	r5, r1, r6
 800960e:	1d6a      	adds	r2, r5, #5
 8009610:	0092      	lsls	r2, r2, #2
 8009612:	4620      	mov	r0, r4
 8009614:	f000 fabe 	bl	8009b94 <_calloc_r>
 8009618:	b160      	cbz	r0, 8009634 <_Balloc+0x56>
 800961a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800961e:	e00e      	b.n	800963e <_Balloc+0x60>
 8009620:	2221      	movs	r2, #33	; 0x21
 8009622:	2104      	movs	r1, #4
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fab5 	bl	8009b94 <_calloc_r>
 800962a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800962c:	60e8      	str	r0, [r5, #12]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e4      	bne.n	80095fe <_Balloc+0x20>
 8009634:	2000      	movs	r0, #0
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	6802      	ldr	r2, [r0, #0]
 800963a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800963e:	2300      	movs	r3, #0
 8009640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009644:	e7f7      	b.n	8009636 <_Balloc+0x58>

08009646 <_Bfree>:
 8009646:	b570      	push	{r4, r5, r6, lr}
 8009648:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800964a:	4606      	mov	r6, r0
 800964c:	460d      	mov	r5, r1
 800964e:	b93c      	cbnz	r4, 8009660 <_Bfree+0x1a>
 8009650:	2010      	movs	r0, #16
 8009652:	f7ff ffb1 	bl	80095b8 <malloc>
 8009656:	6270      	str	r0, [r6, #36]	; 0x24
 8009658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800965c:	6004      	str	r4, [r0, #0]
 800965e:	60c4      	str	r4, [r0, #12]
 8009660:	b13d      	cbz	r5, 8009672 <_Bfree+0x2c>
 8009662:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009664:	686a      	ldr	r2, [r5, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800966c:	6029      	str	r1, [r5, #0]
 800966e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009672:	bd70      	pop	{r4, r5, r6, pc}

08009674 <__multadd>:
 8009674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009678:	690d      	ldr	r5, [r1, #16]
 800967a:	461f      	mov	r7, r3
 800967c:	4606      	mov	r6, r0
 800967e:	460c      	mov	r4, r1
 8009680:	f101 0c14 	add.w	ip, r1, #20
 8009684:	2300      	movs	r3, #0
 8009686:	f8dc 0000 	ldr.w	r0, [ip]
 800968a:	b281      	uxth	r1, r0
 800968c:	fb02 7101 	mla	r1, r2, r1, r7
 8009690:	0c0f      	lsrs	r7, r1, #16
 8009692:	0c00      	lsrs	r0, r0, #16
 8009694:	fb02 7000 	mla	r0, r2, r0, r7
 8009698:	b289      	uxth	r1, r1
 800969a:	3301      	adds	r3, #1
 800969c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80096a0:	429d      	cmp	r5, r3
 80096a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80096a6:	f84c 1b04 	str.w	r1, [ip], #4
 80096aa:	dcec      	bgt.n	8009686 <__multadd+0x12>
 80096ac:	b1d7      	cbz	r7, 80096e4 <__multadd+0x70>
 80096ae:	68a3      	ldr	r3, [r4, #8]
 80096b0:	42ab      	cmp	r3, r5
 80096b2:	dc12      	bgt.n	80096da <__multadd+0x66>
 80096b4:	6861      	ldr	r1, [r4, #4]
 80096b6:	4630      	mov	r0, r6
 80096b8:	3101      	adds	r1, #1
 80096ba:	f7ff ff90 	bl	80095de <_Balloc>
 80096be:	6922      	ldr	r2, [r4, #16]
 80096c0:	3202      	adds	r2, #2
 80096c2:	f104 010c 	add.w	r1, r4, #12
 80096c6:	4680      	mov	r8, r0
 80096c8:	0092      	lsls	r2, r2, #2
 80096ca:	300c      	adds	r0, #12
 80096cc:	f7ff ff7c 	bl	80095c8 <memcpy>
 80096d0:	4621      	mov	r1, r4
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7ff ffb7 	bl	8009646 <_Bfree>
 80096d8:	4644      	mov	r4, r8
 80096da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096de:	3501      	adds	r5, #1
 80096e0:	615f      	str	r7, [r3, #20]
 80096e2:	6125      	str	r5, [r4, #16]
 80096e4:	4620      	mov	r0, r4
 80096e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096ea <__hi0bits>:
 80096ea:	0c02      	lsrs	r2, r0, #16
 80096ec:	0412      	lsls	r2, r2, #16
 80096ee:	4603      	mov	r3, r0
 80096f0:	b9b2      	cbnz	r2, 8009720 <__hi0bits+0x36>
 80096f2:	0403      	lsls	r3, r0, #16
 80096f4:	2010      	movs	r0, #16
 80096f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80096fa:	bf04      	itt	eq
 80096fc:	021b      	lsleq	r3, r3, #8
 80096fe:	3008      	addeq	r0, #8
 8009700:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009704:	bf04      	itt	eq
 8009706:	011b      	lsleq	r3, r3, #4
 8009708:	3004      	addeq	r0, #4
 800970a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800970e:	bf04      	itt	eq
 8009710:	009b      	lsleq	r3, r3, #2
 8009712:	3002      	addeq	r0, #2
 8009714:	2b00      	cmp	r3, #0
 8009716:	db06      	blt.n	8009726 <__hi0bits+0x3c>
 8009718:	005b      	lsls	r3, r3, #1
 800971a:	d503      	bpl.n	8009724 <__hi0bits+0x3a>
 800971c:	3001      	adds	r0, #1
 800971e:	4770      	bx	lr
 8009720:	2000      	movs	r0, #0
 8009722:	e7e8      	b.n	80096f6 <__hi0bits+0xc>
 8009724:	2020      	movs	r0, #32
 8009726:	4770      	bx	lr

08009728 <__lo0bits>:
 8009728:	6803      	ldr	r3, [r0, #0]
 800972a:	f013 0207 	ands.w	r2, r3, #7
 800972e:	4601      	mov	r1, r0
 8009730:	d00b      	beq.n	800974a <__lo0bits+0x22>
 8009732:	07da      	lsls	r2, r3, #31
 8009734:	d423      	bmi.n	800977e <__lo0bits+0x56>
 8009736:	0798      	lsls	r0, r3, #30
 8009738:	bf49      	itett	mi
 800973a:	085b      	lsrmi	r3, r3, #1
 800973c:	089b      	lsrpl	r3, r3, #2
 800973e:	2001      	movmi	r0, #1
 8009740:	600b      	strmi	r3, [r1, #0]
 8009742:	bf5c      	itt	pl
 8009744:	600b      	strpl	r3, [r1, #0]
 8009746:	2002      	movpl	r0, #2
 8009748:	4770      	bx	lr
 800974a:	b298      	uxth	r0, r3
 800974c:	b9a8      	cbnz	r0, 800977a <__lo0bits+0x52>
 800974e:	0c1b      	lsrs	r3, r3, #16
 8009750:	2010      	movs	r0, #16
 8009752:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009756:	bf04      	itt	eq
 8009758:	0a1b      	lsreq	r3, r3, #8
 800975a:	3008      	addeq	r0, #8
 800975c:	071a      	lsls	r2, r3, #28
 800975e:	bf04      	itt	eq
 8009760:	091b      	lsreq	r3, r3, #4
 8009762:	3004      	addeq	r0, #4
 8009764:	079a      	lsls	r2, r3, #30
 8009766:	bf04      	itt	eq
 8009768:	089b      	lsreq	r3, r3, #2
 800976a:	3002      	addeq	r0, #2
 800976c:	07da      	lsls	r2, r3, #31
 800976e:	d402      	bmi.n	8009776 <__lo0bits+0x4e>
 8009770:	085b      	lsrs	r3, r3, #1
 8009772:	d006      	beq.n	8009782 <__lo0bits+0x5a>
 8009774:	3001      	adds	r0, #1
 8009776:	600b      	str	r3, [r1, #0]
 8009778:	4770      	bx	lr
 800977a:	4610      	mov	r0, r2
 800977c:	e7e9      	b.n	8009752 <__lo0bits+0x2a>
 800977e:	2000      	movs	r0, #0
 8009780:	4770      	bx	lr
 8009782:	2020      	movs	r0, #32
 8009784:	4770      	bx	lr

08009786 <__i2b>:
 8009786:	b510      	push	{r4, lr}
 8009788:	460c      	mov	r4, r1
 800978a:	2101      	movs	r1, #1
 800978c:	f7ff ff27 	bl	80095de <_Balloc>
 8009790:	2201      	movs	r2, #1
 8009792:	6144      	str	r4, [r0, #20]
 8009794:	6102      	str	r2, [r0, #16]
 8009796:	bd10      	pop	{r4, pc}

08009798 <__multiply>:
 8009798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	4614      	mov	r4, r2
 800979e:	690a      	ldr	r2, [r1, #16]
 80097a0:	6923      	ldr	r3, [r4, #16]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	bfb8      	it	lt
 80097a6:	460b      	movlt	r3, r1
 80097a8:	4688      	mov	r8, r1
 80097aa:	bfbc      	itt	lt
 80097ac:	46a0      	movlt	r8, r4
 80097ae:	461c      	movlt	r4, r3
 80097b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80097b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80097b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80097c0:	eb07 0609 	add.w	r6, r7, r9
 80097c4:	42b3      	cmp	r3, r6
 80097c6:	bfb8      	it	lt
 80097c8:	3101      	addlt	r1, #1
 80097ca:	f7ff ff08 	bl	80095de <_Balloc>
 80097ce:	f100 0514 	add.w	r5, r0, #20
 80097d2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80097d6:	462b      	mov	r3, r5
 80097d8:	2200      	movs	r2, #0
 80097da:	4573      	cmp	r3, lr
 80097dc:	d316      	bcc.n	800980c <__multiply+0x74>
 80097de:	f104 0214 	add.w	r2, r4, #20
 80097e2:	f108 0114 	add.w	r1, r8, #20
 80097e6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80097ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	9b00      	ldr	r3, [sp, #0]
 80097f2:	9201      	str	r2, [sp, #4]
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d80c      	bhi.n	8009812 <__multiply+0x7a>
 80097f8:	2e00      	cmp	r6, #0
 80097fa:	dd03      	ble.n	8009804 <__multiply+0x6c>
 80097fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009800:	2b00      	cmp	r3, #0
 8009802:	d05d      	beq.n	80098c0 <__multiply+0x128>
 8009804:	6106      	str	r6, [r0, #16]
 8009806:	b003      	add	sp, #12
 8009808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980c:	f843 2b04 	str.w	r2, [r3], #4
 8009810:	e7e3      	b.n	80097da <__multiply+0x42>
 8009812:	f8b2 b000 	ldrh.w	fp, [r2]
 8009816:	f1bb 0f00 	cmp.w	fp, #0
 800981a:	d023      	beq.n	8009864 <__multiply+0xcc>
 800981c:	4689      	mov	r9, r1
 800981e:	46ac      	mov	ip, r5
 8009820:	f04f 0800 	mov.w	r8, #0
 8009824:	f859 4b04 	ldr.w	r4, [r9], #4
 8009828:	f8dc a000 	ldr.w	sl, [ip]
 800982c:	b2a3      	uxth	r3, r4
 800982e:	fa1f fa8a 	uxth.w	sl, sl
 8009832:	fb0b a303 	mla	r3, fp, r3, sl
 8009836:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800983a:	f8dc 4000 	ldr.w	r4, [ip]
 800983e:	4443      	add	r3, r8
 8009840:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009844:	fb0b 840a 	mla	r4, fp, sl, r8
 8009848:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800984c:	46e2      	mov	sl, ip
 800984e:	b29b      	uxth	r3, r3
 8009850:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009854:	454f      	cmp	r7, r9
 8009856:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800985a:	f84a 3b04 	str.w	r3, [sl], #4
 800985e:	d82b      	bhi.n	80098b8 <__multiply+0x120>
 8009860:	f8cc 8004 	str.w	r8, [ip, #4]
 8009864:	9b01      	ldr	r3, [sp, #4]
 8009866:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800986a:	3204      	adds	r2, #4
 800986c:	f1ba 0f00 	cmp.w	sl, #0
 8009870:	d020      	beq.n	80098b4 <__multiply+0x11c>
 8009872:	682b      	ldr	r3, [r5, #0]
 8009874:	4689      	mov	r9, r1
 8009876:	46a8      	mov	r8, r5
 8009878:	f04f 0b00 	mov.w	fp, #0
 800987c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009880:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009884:	fb0a 440c 	mla	r4, sl, ip, r4
 8009888:	445c      	add	r4, fp
 800988a:	46c4      	mov	ip, r8
 800988c:	b29b      	uxth	r3, r3
 800988e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009892:	f84c 3b04 	str.w	r3, [ip], #4
 8009896:	f859 3b04 	ldr.w	r3, [r9], #4
 800989a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800989e:	0c1b      	lsrs	r3, r3, #16
 80098a0:	fb0a b303 	mla	r3, sl, r3, fp
 80098a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80098a8:	454f      	cmp	r7, r9
 80098aa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80098ae:	d805      	bhi.n	80098bc <__multiply+0x124>
 80098b0:	f8c8 3004 	str.w	r3, [r8, #4]
 80098b4:	3504      	adds	r5, #4
 80098b6:	e79b      	b.n	80097f0 <__multiply+0x58>
 80098b8:	46d4      	mov	ip, sl
 80098ba:	e7b3      	b.n	8009824 <__multiply+0x8c>
 80098bc:	46e0      	mov	r8, ip
 80098be:	e7dd      	b.n	800987c <__multiply+0xe4>
 80098c0:	3e01      	subs	r6, #1
 80098c2:	e799      	b.n	80097f8 <__multiply+0x60>

080098c4 <__pow5mult>:
 80098c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c8:	4615      	mov	r5, r2
 80098ca:	f012 0203 	ands.w	r2, r2, #3
 80098ce:	4606      	mov	r6, r0
 80098d0:	460f      	mov	r7, r1
 80098d2:	d007      	beq.n	80098e4 <__pow5mult+0x20>
 80098d4:	3a01      	subs	r2, #1
 80098d6:	4c21      	ldr	r4, [pc, #132]	; (800995c <__pow5mult+0x98>)
 80098d8:	2300      	movs	r3, #0
 80098da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098de:	f7ff fec9 	bl	8009674 <__multadd>
 80098e2:	4607      	mov	r7, r0
 80098e4:	10ad      	asrs	r5, r5, #2
 80098e6:	d035      	beq.n	8009954 <__pow5mult+0x90>
 80098e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098ea:	b93c      	cbnz	r4, 80098fc <__pow5mult+0x38>
 80098ec:	2010      	movs	r0, #16
 80098ee:	f7ff fe63 	bl	80095b8 <malloc>
 80098f2:	6270      	str	r0, [r6, #36]	; 0x24
 80098f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098f8:	6004      	str	r4, [r0, #0]
 80098fa:	60c4      	str	r4, [r0, #12]
 80098fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009904:	b94c      	cbnz	r4, 800991a <__pow5mult+0x56>
 8009906:	f240 2171 	movw	r1, #625	; 0x271
 800990a:	4630      	mov	r0, r6
 800990c:	f7ff ff3b 	bl	8009786 <__i2b>
 8009910:	2300      	movs	r3, #0
 8009912:	f8c8 0008 	str.w	r0, [r8, #8]
 8009916:	4604      	mov	r4, r0
 8009918:	6003      	str	r3, [r0, #0]
 800991a:	f04f 0800 	mov.w	r8, #0
 800991e:	07eb      	lsls	r3, r5, #31
 8009920:	d50a      	bpl.n	8009938 <__pow5mult+0x74>
 8009922:	4639      	mov	r1, r7
 8009924:	4622      	mov	r2, r4
 8009926:	4630      	mov	r0, r6
 8009928:	f7ff ff36 	bl	8009798 <__multiply>
 800992c:	4639      	mov	r1, r7
 800992e:	4681      	mov	r9, r0
 8009930:	4630      	mov	r0, r6
 8009932:	f7ff fe88 	bl	8009646 <_Bfree>
 8009936:	464f      	mov	r7, r9
 8009938:	106d      	asrs	r5, r5, #1
 800993a:	d00b      	beq.n	8009954 <__pow5mult+0x90>
 800993c:	6820      	ldr	r0, [r4, #0]
 800993e:	b938      	cbnz	r0, 8009950 <__pow5mult+0x8c>
 8009940:	4622      	mov	r2, r4
 8009942:	4621      	mov	r1, r4
 8009944:	4630      	mov	r0, r6
 8009946:	f7ff ff27 	bl	8009798 <__multiply>
 800994a:	6020      	str	r0, [r4, #0]
 800994c:	f8c0 8000 	str.w	r8, [r0]
 8009950:	4604      	mov	r4, r0
 8009952:	e7e4      	b.n	800991e <__pow5mult+0x5a>
 8009954:	4638      	mov	r0, r7
 8009956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800995a:	bf00      	nop
 800995c:	0800b700 	.word	0x0800b700

08009960 <__lshift>:
 8009960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009964:	460c      	mov	r4, r1
 8009966:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800996a:	6923      	ldr	r3, [r4, #16]
 800996c:	6849      	ldr	r1, [r1, #4]
 800996e:	eb0a 0903 	add.w	r9, sl, r3
 8009972:	68a3      	ldr	r3, [r4, #8]
 8009974:	4607      	mov	r7, r0
 8009976:	4616      	mov	r6, r2
 8009978:	f109 0501 	add.w	r5, r9, #1
 800997c:	42ab      	cmp	r3, r5
 800997e:	db32      	blt.n	80099e6 <__lshift+0x86>
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff fe2c 	bl	80095de <_Balloc>
 8009986:	2300      	movs	r3, #0
 8009988:	4680      	mov	r8, r0
 800998a:	f100 0114 	add.w	r1, r0, #20
 800998e:	461a      	mov	r2, r3
 8009990:	4553      	cmp	r3, sl
 8009992:	db2b      	blt.n	80099ec <__lshift+0x8c>
 8009994:	6920      	ldr	r0, [r4, #16]
 8009996:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800999a:	f104 0314 	add.w	r3, r4, #20
 800999e:	f016 021f 	ands.w	r2, r6, #31
 80099a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099aa:	d025      	beq.n	80099f8 <__lshift+0x98>
 80099ac:	f1c2 0e20 	rsb	lr, r2, #32
 80099b0:	2000      	movs	r0, #0
 80099b2:	681e      	ldr	r6, [r3, #0]
 80099b4:	468a      	mov	sl, r1
 80099b6:	4096      	lsls	r6, r2
 80099b8:	4330      	orrs	r0, r6
 80099ba:	f84a 0b04 	str.w	r0, [sl], #4
 80099be:	f853 0b04 	ldr.w	r0, [r3], #4
 80099c2:	459c      	cmp	ip, r3
 80099c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80099c8:	d814      	bhi.n	80099f4 <__lshift+0x94>
 80099ca:	6048      	str	r0, [r1, #4]
 80099cc:	b108      	cbz	r0, 80099d2 <__lshift+0x72>
 80099ce:	f109 0502 	add.w	r5, r9, #2
 80099d2:	3d01      	subs	r5, #1
 80099d4:	4638      	mov	r0, r7
 80099d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80099da:	4621      	mov	r1, r4
 80099dc:	f7ff fe33 	bl	8009646 <_Bfree>
 80099e0:	4640      	mov	r0, r8
 80099e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e6:	3101      	adds	r1, #1
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	e7c7      	b.n	800997c <__lshift+0x1c>
 80099ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80099f0:	3301      	adds	r3, #1
 80099f2:	e7cd      	b.n	8009990 <__lshift+0x30>
 80099f4:	4651      	mov	r1, sl
 80099f6:	e7dc      	b.n	80099b2 <__lshift+0x52>
 80099f8:	3904      	subs	r1, #4
 80099fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a02:	459c      	cmp	ip, r3
 8009a04:	d8f9      	bhi.n	80099fa <__lshift+0x9a>
 8009a06:	e7e4      	b.n	80099d2 <__lshift+0x72>

08009a08 <__mcmp>:
 8009a08:	6903      	ldr	r3, [r0, #16]
 8009a0a:	690a      	ldr	r2, [r1, #16]
 8009a0c:	1a9b      	subs	r3, r3, r2
 8009a0e:	b530      	push	{r4, r5, lr}
 8009a10:	d10c      	bne.n	8009a2c <__mcmp+0x24>
 8009a12:	0092      	lsls	r2, r2, #2
 8009a14:	3014      	adds	r0, #20
 8009a16:	3114      	adds	r1, #20
 8009a18:	1884      	adds	r4, r0, r2
 8009a1a:	4411      	add	r1, r2
 8009a1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a24:	4295      	cmp	r5, r2
 8009a26:	d003      	beq.n	8009a30 <__mcmp+0x28>
 8009a28:	d305      	bcc.n	8009a36 <__mcmp+0x2e>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	bd30      	pop	{r4, r5, pc}
 8009a30:	42a0      	cmp	r0, r4
 8009a32:	d3f3      	bcc.n	8009a1c <__mcmp+0x14>
 8009a34:	e7fa      	b.n	8009a2c <__mcmp+0x24>
 8009a36:	f04f 33ff 	mov.w	r3, #4294967295
 8009a3a:	e7f7      	b.n	8009a2c <__mcmp+0x24>

08009a3c <__mdiff>:
 8009a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a40:	460d      	mov	r5, r1
 8009a42:	4607      	mov	r7, r0
 8009a44:	4611      	mov	r1, r2
 8009a46:	4628      	mov	r0, r5
 8009a48:	4614      	mov	r4, r2
 8009a4a:	f7ff ffdd 	bl	8009a08 <__mcmp>
 8009a4e:	1e06      	subs	r6, r0, #0
 8009a50:	d108      	bne.n	8009a64 <__mdiff+0x28>
 8009a52:	4631      	mov	r1, r6
 8009a54:	4638      	mov	r0, r7
 8009a56:	f7ff fdc2 	bl	80095de <_Balloc>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a64:	bfa4      	itt	ge
 8009a66:	4623      	movge	r3, r4
 8009a68:	462c      	movge	r4, r5
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	6861      	ldr	r1, [r4, #4]
 8009a6e:	bfa6      	itte	ge
 8009a70:	461d      	movge	r5, r3
 8009a72:	2600      	movge	r6, #0
 8009a74:	2601      	movlt	r6, #1
 8009a76:	f7ff fdb2 	bl	80095de <_Balloc>
 8009a7a:	692b      	ldr	r3, [r5, #16]
 8009a7c:	60c6      	str	r6, [r0, #12]
 8009a7e:	6926      	ldr	r6, [r4, #16]
 8009a80:	f105 0914 	add.w	r9, r5, #20
 8009a84:	f104 0214 	add.w	r2, r4, #20
 8009a88:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009a8c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009a90:	f100 0514 	add.w	r5, r0, #20
 8009a94:	f04f 0e00 	mov.w	lr, #0
 8009a98:	f852 ab04 	ldr.w	sl, [r2], #4
 8009a9c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009aa0:	fa1e f18a 	uxtah	r1, lr, sl
 8009aa4:	b2a3      	uxth	r3, r4
 8009aa6:	1ac9      	subs	r1, r1, r3
 8009aa8:	0c23      	lsrs	r3, r4, #16
 8009aaa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009aae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ab2:	b289      	uxth	r1, r1
 8009ab4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009ab8:	45c8      	cmp	r8, r9
 8009aba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009abe:	4694      	mov	ip, r2
 8009ac0:	f845 3b04 	str.w	r3, [r5], #4
 8009ac4:	d8e8      	bhi.n	8009a98 <__mdiff+0x5c>
 8009ac6:	45bc      	cmp	ip, r7
 8009ac8:	d304      	bcc.n	8009ad4 <__mdiff+0x98>
 8009aca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009ace:	b183      	cbz	r3, 8009af2 <__mdiff+0xb6>
 8009ad0:	6106      	str	r6, [r0, #16]
 8009ad2:	e7c5      	b.n	8009a60 <__mdiff+0x24>
 8009ad4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ad8:	fa1e f381 	uxtah	r3, lr, r1
 8009adc:	141a      	asrs	r2, r3, #16
 8009ade:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ae8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009aec:	f845 3b04 	str.w	r3, [r5], #4
 8009af0:	e7e9      	b.n	8009ac6 <__mdiff+0x8a>
 8009af2:	3e01      	subs	r6, #1
 8009af4:	e7e9      	b.n	8009aca <__mdiff+0x8e>

08009af6 <__d2b>:
 8009af6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009afa:	460e      	mov	r6, r1
 8009afc:	2101      	movs	r1, #1
 8009afe:	ec59 8b10 	vmov	r8, r9, d0
 8009b02:	4615      	mov	r5, r2
 8009b04:	f7ff fd6b 	bl	80095de <_Balloc>
 8009b08:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009b0c:	4607      	mov	r7, r0
 8009b0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b12:	bb34      	cbnz	r4, 8009b62 <__d2b+0x6c>
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	f1b8 0300 	subs.w	r3, r8, #0
 8009b1a:	d027      	beq.n	8009b6c <__d2b+0x76>
 8009b1c:	a802      	add	r0, sp, #8
 8009b1e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009b22:	f7ff fe01 	bl	8009728 <__lo0bits>
 8009b26:	9900      	ldr	r1, [sp, #0]
 8009b28:	b1f0      	cbz	r0, 8009b68 <__d2b+0x72>
 8009b2a:	9a01      	ldr	r2, [sp, #4]
 8009b2c:	f1c0 0320 	rsb	r3, r0, #32
 8009b30:	fa02 f303 	lsl.w	r3, r2, r3
 8009b34:	430b      	orrs	r3, r1
 8009b36:	40c2      	lsrs	r2, r0
 8009b38:	617b      	str	r3, [r7, #20]
 8009b3a:	9201      	str	r2, [sp, #4]
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	61bb      	str	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	bf14      	ite	ne
 8009b44:	2102      	movne	r1, #2
 8009b46:	2101      	moveq	r1, #1
 8009b48:	6139      	str	r1, [r7, #16]
 8009b4a:	b1c4      	cbz	r4, 8009b7e <__d2b+0x88>
 8009b4c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009b50:	4404      	add	r4, r0
 8009b52:	6034      	str	r4, [r6, #0]
 8009b54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b58:	6028      	str	r0, [r5, #0]
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	b003      	add	sp, #12
 8009b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b66:	e7d5      	b.n	8009b14 <__d2b+0x1e>
 8009b68:	6179      	str	r1, [r7, #20]
 8009b6a:	e7e7      	b.n	8009b3c <__d2b+0x46>
 8009b6c:	a801      	add	r0, sp, #4
 8009b6e:	f7ff fddb 	bl	8009728 <__lo0bits>
 8009b72:	9b01      	ldr	r3, [sp, #4]
 8009b74:	617b      	str	r3, [r7, #20]
 8009b76:	2101      	movs	r1, #1
 8009b78:	6139      	str	r1, [r7, #16]
 8009b7a:	3020      	adds	r0, #32
 8009b7c:	e7e5      	b.n	8009b4a <__d2b+0x54>
 8009b7e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009b82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b86:	6030      	str	r0, [r6, #0]
 8009b88:	6918      	ldr	r0, [r3, #16]
 8009b8a:	f7ff fdae 	bl	80096ea <__hi0bits>
 8009b8e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009b92:	e7e1      	b.n	8009b58 <__d2b+0x62>

08009b94 <_calloc_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	fb02 f401 	mul.w	r4, r2, r1
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	f000 f856 	bl	8009c4c <_malloc_r>
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	b118      	cbz	r0, 8009bac <_calloc_r+0x18>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	f7fe f94e 	bl	8007e48 <memset>
 8009bac:	4628      	mov	r0, r5
 8009bae:	bd38      	pop	{r3, r4, r5, pc}

08009bb0 <_free_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	2900      	cmp	r1, #0
 8009bb6:	d045      	beq.n	8009c44 <_free_r+0x94>
 8009bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bbc:	1f0c      	subs	r4, r1, #4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	bfb8      	it	lt
 8009bc2:	18e4      	addlt	r4, r4, r3
 8009bc4:	f000 fdb5 	bl	800a732 <__malloc_lock>
 8009bc8:	4a1f      	ldr	r2, [pc, #124]	; (8009c48 <_free_r+0x98>)
 8009bca:	6813      	ldr	r3, [r2, #0]
 8009bcc:	4610      	mov	r0, r2
 8009bce:	b933      	cbnz	r3, 8009bde <_free_r+0x2e>
 8009bd0:	6063      	str	r3, [r4, #4]
 8009bd2:	6014      	str	r4, [r2, #0]
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bda:	f000 bdab 	b.w	800a734 <__malloc_unlock>
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	d90c      	bls.n	8009bfc <_free_r+0x4c>
 8009be2:	6821      	ldr	r1, [r4, #0]
 8009be4:	1862      	adds	r2, r4, r1
 8009be6:	4293      	cmp	r3, r2
 8009be8:	bf04      	itt	eq
 8009bea:	681a      	ldreq	r2, [r3, #0]
 8009bec:	685b      	ldreq	r3, [r3, #4]
 8009bee:	6063      	str	r3, [r4, #4]
 8009bf0:	bf04      	itt	eq
 8009bf2:	1852      	addeq	r2, r2, r1
 8009bf4:	6022      	streq	r2, [r4, #0]
 8009bf6:	6004      	str	r4, [r0, #0]
 8009bf8:	e7ec      	b.n	8009bd4 <_free_r+0x24>
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	b10a      	cbz	r2, 8009c04 <_free_r+0x54>
 8009c00:	42a2      	cmp	r2, r4
 8009c02:	d9fa      	bls.n	8009bfa <_free_r+0x4a>
 8009c04:	6819      	ldr	r1, [r3, #0]
 8009c06:	1858      	adds	r0, r3, r1
 8009c08:	42a0      	cmp	r0, r4
 8009c0a:	d10b      	bne.n	8009c24 <_free_r+0x74>
 8009c0c:	6820      	ldr	r0, [r4, #0]
 8009c0e:	4401      	add	r1, r0
 8009c10:	1858      	adds	r0, r3, r1
 8009c12:	4282      	cmp	r2, r0
 8009c14:	6019      	str	r1, [r3, #0]
 8009c16:	d1dd      	bne.n	8009bd4 <_free_r+0x24>
 8009c18:	6810      	ldr	r0, [r2, #0]
 8009c1a:	6852      	ldr	r2, [r2, #4]
 8009c1c:	605a      	str	r2, [r3, #4]
 8009c1e:	4401      	add	r1, r0
 8009c20:	6019      	str	r1, [r3, #0]
 8009c22:	e7d7      	b.n	8009bd4 <_free_r+0x24>
 8009c24:	d902      	bls.n	8009c2c <_free_r+0x7c>
 8009c26:	230c      	movs	r3, #12
 8009c28:	602b      	str	r3, [r5, #0]
 8009c2a:	e7d3      	b.n	8009bd4 <_free_r+0x24>
 8009c2c:	6820      	ldr	r0, [r4, #0]
 8009c2e:	1821      	adds	r1, r4, r0
 8009c30:	428a      	cmp	r2, r1
 8009c32:	bf04      	itt	eq
 8009c34:	6811      	ldreq	r1, [r2, #0]
 8009c36:	6852      	ldreq	r2, [r2, #4]
 8009c38:	6062      	str	r2, [r4, #4]
 8009c3a:	bf04      	itt	eq
 8009c3c:	1809      	addeq	r1, r1, r0
 8009c3e:	6021      	streq	r1, [r4, #0]
 8009c40:	605c      	str	r4, [r3, #4]
 8009c42:	e7c7      	b.n	8009bd4 <_free_r+0x24>
 8009c44:	bd38      	pop	{r3, r4, r5, pc}
 8009c46:	bf00      	nop
 8009c48:	20000204 	.word	0x20000204

08009c4c <_malloc_r>:
 8009c4c:	b570      	push	{r4, r5, r6, lr}
 8009c4e:	1ccd      	adds	r5, r1, #3
 8009c50:	f025 0503 	bic.w	r5, r5, #3
 8009c54:	3508      	adds	r5, #8
 8009c56:	2d0c      	cmp	r5, #12
 8009c58:	bf38      	it	cc
 8009c5a:	250c      	movcc	r5, #12
 8009c5c:	2d00      	cmp	r5, #0
 8009c5e:	4606      	mov	r6, r0
 8009c60:	db01      	blt.n	8009c66 <_malloc_r+0x1a>
 8009c62:	42a9      	cmp	r1, r5
 8009c64:	d903      	bls.n	8009c6e <_malloc_r+0x22>
 8009c66:	230c      	movs	r3, #12
 8009c68:	6033      	str	r3, [r6, #0]
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	bd70      	pop	{r4, r5, r6, pc}
 8009c6e:	f000 fd60 	bl	800a732 <__malloc_lock>
 8009c72:	4a21      	ldr	r2, [pc, #132]	; (8009cf8 <_malloc_r+0xac>)
 8009c74:	6814      	ldr	r4, [r2, #0]
 8009c76:	4621      	mov	r1, r4
 8009c78:	b991      	cbnz	r1, 8009ca0 <_malloc_r+0x54>
 8009c7a:	4c20      	ldr	r4, [pc, #128]	; (8009cfc <_malloc_r+0xb0>)
 8009c7c:	6823      	ldr	r3, [r4, #0]
 8009c7e:	b91b      	cbnz	r3, 8009c88 <_malloc_r+0x3c>
 8009c80:	4630      	mov	r0, r6
 8009c82:	f000 facf 	bl	800a224 <_sbrk_r>
 8009c86:	6020      	str	r0, [r4, #0]
 8009c88:	4629      	mov	r1, r5
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f000 faca 	bl	800a224 <_sbrk_r>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	d124      	bne.n	8009cde <_malloc_r+0x92>
 8009c94:	230c      	movs	r3, #12
 8009c96:	6033      	str	r3, [r6, #0]
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f000 fd4b 	bl	800a734 <__malloc_unlock>
 8009c9e:	e7e4      	b.n	8009c6a <_malloc_r+0x1e>
 8009ca0:	680b      	ldr	r3, [r1, #0]
 8009ca2:	1b5b      	subs	r3, r3, r5
 8009ca4:	d418      	bmi.n	8009cd8 <_malloc_r+0x8c>
 8009ca6:	2b0b      	cmp	r3, #11
 8009ca8:	d90f      	bls.n	8009cca <_malloc_r+0x7e>
 8009caa:	600b      	str	r3, [r1, #0]
 8009cac:	50cd      	str	r5, [r1, r3]
 8009cae:	18cc      	adds	r4, r1, r3
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f000 fd3f 	bl	800a734 <__malloc_unlock>
 8009cb6:	f104 000b 	add.w	r0, r4, #11
 8009cba:	1d23      	adds	r3, r4, #4
 8009cbc:	f020 0007 	bic.w	r0, r0, #7
 8009cc0:	1ac3      	subs	r3, r0, r3
 8009cc2:	d0d3      	beq.n	8009c6c <_malloc_r+0x20>
 8009cc4:	425a      	negs	r2, r3
 8009cc6:	50e2      	str	r2, [r4, r3]
 8009cc8:	e7d0      	b.n	8009c6c <_malloc_r+0x20>
 8009cca:	428c      	cmp	r4, r1
 8009ccc:	684b      	ldr	r3, [r1, #4]
 8009cce:	bf16      	itet	ne
 8009cd0:	6063      	strne	r3, [r4, #4]
 8009cd2:	6013      	streq	r3, [r2, #0]
 8009cd4:	460c      	movne	r4, r1
 8009cd6:	e7eb      	b.n	8009cb0 <_malloc_r+0x64>
 8009cd8:	460c      	mov	r4, r1
 8009cda:	6849      	ldr	r1, [r1, #4]
 8009cdc:	e7cc      	b.n	8009c78 <_malloc_r+0x2c>
 8009cde:	1cc4      	adds	r4, r0, #3
 8009ce0:	f024 0403 	bic.w	r4, r4, #3
 8009ce4:	42a0      	cmp	r0, r4
 8009ce6:	d005      	beq.n	8009cf4 <_malloc_r+0xa8>
 8009ce8:	1a21      	subs	r1, r4, r0
 8009cea:	4630      	mov	r0, r6
 8009cec:	f000 fa9a 	bl	800a224 <_sbrk_r>
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d0cf      	beq.n	8009c94 <_malloc_r+0x48>
 8009cf4:	6025      	str	r5, [r4, #0]
 8009cf6:	e7db      	b.n	8009cb0 <_malloc_r+0x64>
 8009cf8:	20000204 	.word	0x20000204
 8009cfc:	20000208 	.word	0x20000208

08009d00 <__ssputs_r>:
 8009d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	688e      	ldr	r6, [r1, #8]
 8009d06:	429e      	cmp	r6, r3
 8009d08:	4682      	mov	sl, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	4690      	mov	r8, r2
 8009d0e:	4699      	mov	r9, r3
 8009d10:	d837      	bhi.n	8009d82 <__ssputs_r+0x82>
 8009d12:	898a      	ldrh	r2, [r1, #12]
 8009d14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d18:	d031      	beq.n	8009d7e <__ssputs_r+0x7e>
 8009d1a:	6825      	ldr	r5, [r4, #0]
 8009d1c:	6909      	ldr	r1, [r1, #16]
 8009d1e:	1a6f      	subs	r7, r5, r1
 8009d20:	6965      	ldr	r5, [r4, #20]
 8009d22:	2302      	movs	r3, #2
 8009d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d28:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d2c:	f109 0301 	add.w	r3, r9, #1
 8009d30:	443b      	add	r3, r7
 8009d32:	429d      	cmp	r5, r3
 8009d34:	bf38      	it	cc
 8009d36:	461d      	movcc	r5, r3
 8009d38:	0553      	lsls	r3, r2, #21
 8009d3a:	d530      	bpl.n	8009d9e <__ssputs_r+0x9e>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	f7ff ff85 	bl	8009c4c <_malloc_r>
 8009d42:	4606      	mov	r6, r0
 8009d44:	b950      	cbnz	r0, 8009d5c <__ssputs_r+0x5c>
 8009d46:	230c      	movs	r3, #12
 8009d48:	f8ca 3000 	str.w	r3, [sl]
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295
 8009d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5c:	463a      	mov	r2, r7
 8009d5e:	6921      	ldr	r1, [r4, #16]
 8009d60:	f7ff fc32 	bl	80095c8 <memcpy>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	6126      	str	r6, [r4, #16]
 8009d72:	6165      	str	r5, [r4, #20]
 8009d74:	443e      	add	r6, r7
 8009d76:	1bed      	subs	r5, r5, r7
 8009d78:	6026      	str	r6, [r4, #0]
 8009d7a:	60a5      	str	r5, [r4, #8]
 8009d7c:	464e      	mov	r6, r9
 8009d7e:	454e      	cmp	r6, r9
 8009d80:	d900      	bls.n	8009d84 <__ssputs_r+0x84>
 8009d82:	464e      	mov	r6, r9
 8009d84:	4632      	mov	r2, r6
 8009d86:	4641      	mov	r1, r8
 8009d88:	6820      	ldr	r0, [r4, #0]
 8009d8a:	f000 fcb9 	bl	800a700 <memmove>
 8009d8e:	68a3      	ldr	r3, [r4, #8]
 8009d90:	1b9b      	subs	r3, r3, r6
 8009d92:	60a3      	str	r3, [r4, #8]
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	441e      	add	r6, r3
 8009d98:	6026      	str	r6, [r4, #0]
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	e7dc      	b.n	8009d58 <__ssputs_r+0x58>
 8009d9e:	462a      	mov	r2, r5
 8009da0:	f000 fcc9 	bl	800a736 <_realloc_r>
 8009da4:	4606      	mov	r6, r0
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d1e2      	bne.n	8009d70 <__ssputs_r+0x70>
 8009daa:	6921      	ldr	r1, [r4, #16]
 8009dac:	4650      	mov	r0, sl
 8009dae:	f7ff feff 	bl	8009bb0 <_free_r>
 8009db2:	e7c8      	b.n	8009d46 <__ssputs_r+0x46>

08009db4 <_svfiprintf_r>:
 8009db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db8:	461d      	mov	r5, r3
 8009dba:	898b      	ldrh	r3, [r1, #12]
 8009dbc:	061f      	lsls	r7, r3, #24
 8009dbe:	b09d      	sub	sp, #116	; 0x74
 8009dc0:	4680      	mov	r8, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	4616      	mov	r6, r2
 8009dc6:	d50f      	bpl.n	8009de8 <_svfiprintf_r+0x34>
 8009dc8:	690b      	ldr	r3, [r1, #16]
 8009dca:	b96b      	cbnz	r3, 8009de8 <_svfiprintf_r+0x34>
 8009dcc:	2140      	movs	r1, #64	; 0x40
 8009dce:	f7ff ff3d 	bl	8009c4c <_malloc_r>
 8009dd2:	6020      	str	r0, [r4, #0]
 8009dd4:	6120      	str	r0, [r4, #16]
 8009dd6:	b928      	cbnz	r0, 8009de4 <_svfiprintf_r+0x30>
 8009dd8:	230c      	movs	r3, #12
 8009dda:	f8c8 3000 	str.w	r3, [r8]
 8009dde:	f04f 30ff 	mov.w	r0, #4294967295
 8009de2:	e0c8      	b.n	8009f76 <_svfiprintf_r+0x1c2>
 8009de4:	2340      	movs	r3, #64	; 0x40
 8009de6:	6163      	str	r3, [r4, #20]
 8009de8:	2300      	movs	r3, #0
 8009dea:	9309      	str	r3, [sp, #36]	; 0x24
 8009dec:	2320      	movs	r3, #32
 8009dee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009df2:	2330      	movs	r3, #48	; 0x30
 8009df4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009df8:	9503      	str	r5, [sp, #12]
 8009dfa:	f04f 0b01 	mov.w	fp, #1
 8009dfe:	4637      	mov	r7, r6
 8009e00:	463d      	mov	r5, r7
 8009e02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e06:	b10b      	cbz	r3, 8009e0c <_svfiprintf_r+0x58>
 8009e08:	2b25      	cmp	r3, #37	; 0x25
 8009e0a:	d13e      	bne.n	8009e8a <_svfiprintf_r+0xd6>
 8009e0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009e10:	d00b      	beq.n	8009e2a <_svfiprintf_r+0x76>
 8009e12:	4653      	mov	r3, sl
 8009e14:	4632      	mov	r2, r6
 8009e16:	4621      	mov	r1, r4
 8009e18:	4640      	mov	r0, r8
 8009e1a:	f7ff ff71 	bl	8009d00 <__ssputs_r>
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f000 80a4 	beq.w	8009f6c <_svfiprintf_r+0x1b8>
 8009e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e26:	4453      	add	r3, sl
 8009e28:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2a:	783b      	ldrb	r3, [r7, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 809d 	beq.w	8009f6c <_svfiprintf_r+0x1b8>
 8009e32:	2300      	movs	r3, #0
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295
 8009e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e3c:	9304      	str	r3, [sp, #16]
 8009e3e:	9307      	str	r3, [sp, #28]
 8009e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e44:	931a      	str	r3, [sp, #104]	; 0x68
 8009e46:	462f      	mov	r7, r5
 8009e48:	2205      	movs	r2, #5
 8009e4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e4e:	4850      	ldr	r0, [pc, #320]	; (8009f90 <_svfiprintf_r+0x1dc>)
 8009e50:	f7f6 f9ee 	bl	8000230 <memchr>
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	b9d0      	cbnz	r0, 8009e8e <_svfiprintf_r+0xda>
 8009e58:	06d9      	lsls	r1, r3, #27
 8009e5a:	bf44      	itt	mi
 8009e5c:	2220      	movmi	r2, #32
 8009e5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e62:	071a      	lsls	r2, r3, #28
 8009e64:	bf44      	itt	mi
 8009e66:	222b      	movmi	r2, #43	; 0x2b
 8009e68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e6c:	782a      	ldrb	r2, [r5, #0]
 8009e6e:	2a2a      	cmp	r2, #42	; 0x2a
 8009e70:	d015      	beq.n	8009e9e <_svfiprintf_r+0xea>
 8009e72:	9a07      	ldr	r2, [sp, #28]
 8009e74:	462f      	mov	r7, r5
 8009e76:	2000      	movs	r0, #0
 8009e78:	250a      	movs	r5, #10
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e80:	3b30      	subs	r3, #48	; 0x30
 8009e82:	2b09      	cmp	r3, #9
 8009e84:	d94d      	bls.n	8009f22 <_svfiprintf_r+0x16e>
 8009e86:	b1b8      	cbz	r0, 8009eb8 <_svfiprintf_r+0x104>
 8009e88:	e00f      	b.n	8009eaa <_svfiprintf_r+0xf6>
 8009e8a:	462f      	mov	r7, r5
 8009e8c:	e7b8      	b.n	8009e00 <_svfiprintf_r+0x4c>
 8009e8e:	4a40      	ldr	r2, [pc, #256]	; (8009f90 <_svfiprintf_r+0x1dc>)
 8009e90:	1a80      	subs	r0, r0, r2
 8009e92:	fa0b f000 	lsl.w	r0, fp, r0
 8009e96:	4318      	orrs	r0, r3
 8009e98:	9004      	str	r0, [sp, #16]
 8009e9a:	463d      	mov	r5, r7
 8009e9c:	e7d3      	b.n	8009e46 <_svfiprintf_r+0x92>
 8009e9e:	9a03      	ldr	r2, [sp, #12]
 8009ea0:	1d11      	adds	r1, r2, #4
 8009ea2:	6812      	ldr	r2, [r2, #0]
 8009ea4:	9103      	str	r1, [sp, #12]
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	db01      	blt.n	8009eae <_svfiprintf_r+0xfa>
 8009eaa:	9207      	str	r2, [sp, #28]
 8009eac:	e004      	b.n	8009eb8 <_svfiprintf_r+0x104>
 8009eae:	4252      	negs	r2, r2
 8009eb0:	f043 0302 	orr.w	r3, r3, #2
 8009eb4:	9207      	str	r2, [sp, #28]
 8009eb6:	9304      	str	r3, [sp, #16]
 8009eb8:	783b      	ldrb	r3, [r7, #0]
 8009eba:	2b2e      	cmp	r3, #46	; 0x2e
 8009ebc:	d10c      	bne.n	8009ed8 <_svfiprintf_r+0x124>
 8009ebe:	787b      	ldrb	r3, [r7, #1]
 8009ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ec2:	d133      	bne.n	8009f2c <_svfiprintf_r+0x178>
 8009ec4:	9b03      	ldr	r3, [sp, #12]
 8009ec6:	1d1a      	adds	r2, r3, #4
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	9203      	str	r2, [sp, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	bfb8      	it	lt
 8009ed0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ed4:	3702      	adds	r7, #2
 8009ed6:	9305      	str	r3, [sp, #20]
 8009ed8:	4d2e      	ldr	r5, [pc, #184]	; (8009f94 <_svfiprintf_r+0x1e0>)
 8009eda:	7839      	ldrb	r1, [r7, #0]
 8009edc:	2203      	movs	r2, #3
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f7f6 f9a6 	bl	8000230 <memchr>
 8009ee4:	b138      	cbz	r0, 8009ef6 <_svfiprintf_r+0x142>
 8009ee6:	2340      	movs	r3, #64	; 0x40
 8009ee8:	1b40      	subs	r0, r0, r5
 8009eea:	fa03 f000 	lsl.w	r0, r3, r0
 8009eee:	9b04      	ldr	r3, [sp, #16]
 8009ef0:	4303      	orrs	r3, r0
 8009ef2:	3701      	adds	r7, #1
 8009ef4:	9304      	str	r3, [sp, #16]
 8009ef6:	7839      	ldrb	r1, [r7, #0]
 8009ef8:	4827      	ldr	r0, [pc, #156]	; (8009f98 <_svfiprintf_r+0x1e4>)
 8009efa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009efe:	2206      	movs	r2, #6
 8009f00:	1c7e      	adds	r6, r7, #1
 8009f02:	f7f6 f995 	bl	8000230 <memchr>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d038      	beq.n	8009f7c <_svfiprintf_r+0x1c8>
 8009f0a:	4b24      	ldr	r3, [pc, #144]	; (8009f9c <_svfiprintf_r+0x1e8>)
 8009f0c:	bb13      	cbnz	r3, 8009f54 <_svfiprintf_r+0x1a0>
 8009f0e:	9b03      	ldr	r3, [sp, #12]
 8009f10:	3307      	adds	r3, #7
 8009f12:	f023 0307 	bic.w	r3, r3, #7
 8009f16:	3308      	adds	r3, #8
 8009f18:	9303      	str	r3, [sp, #12]
 8009f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1c:	444b      	add	r3, r9
 8009f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f20:	e76d      	b.n	8009dfe <_svfiprintf_r+0x4a>
 8009f22:	fb05 3202 	mla	r2, r5, r2, r3
 8009f26:	2001      	movs	r0, #1
 8009f28:	460f      	mov	r7, r1
 8009f2a:	e7a6      	b.n	8009e7a <_svfiprintf_r+0xc6>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	3701      	adds	r7, #1
 8009f30:	9305      	str	r3, [sp, #20]
 8009f32:	4619      	mov	r1, r3
 8009f34:	250a      	movs	r5, #10
 8009f36:	4638      	mov	r0, r7
 8009f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f3c:	3a30      	subs	r2, #48	; 0x30
 8009f3e:	2a09      	cmp	r2, #9
 8009f40:	d903      	bls.n	8009f4a <_svfiprintf_r+0x196>
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0c8      	beq.n	8009ed8 <_svfiprintf_r+0x124>
 8009f46:	9105      	str	r1, [sp, #20]
 8009f48:	e7c6      	b.n	8009ed8 <_svfiprintf_r+0x124>
 8009f4a:	fb05 2101 	mla	r1, r5, r1, r2
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4607      	mov	r7, r0
 8009f52:	e7f0      	b.n	8009f36 <_svfiprintf_r+0x182>
 8009f54:	ab03      	add	r3, sp, #12
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	4622      	mov	r2, r4
 8009f5a:	4b11      	ldr	r3, [pc, #68]	; (8009fa0 <_svfiprintf_r+0x1ec>)
 8009f5c:	a904      	add	r1, sp, #16
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f7fe f80e 	bl	8007f80 <_printf_float>
 8009f64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f68:	4681      	mov	r9, r0
 8009f6a:	d1d6      	bne.n	8009f1a <_svfiprintf_r+0x166>
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	065b      	lsls	r3, r3, #25
 8009f70:	f53f af35 	bmi.w	8009dde <_svfiprintf_r+0x2a>
 8009f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f76:	b01d      	add	sp, #116	; 0x74
 8009f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7c:	ab03      	add	r3, sp, #12
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	4622      	mov	r2, r4
 8009f82:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <_svfiprintf_r+0x1ec>)
 8009f84:	a904      	add	r1, sp, #16
 8009f86:	4640      	mov	r0, r8
 8009f88:	f7fe fab0 	bl	80084ec <_printf_i>
 8009f8c:	e7ea      	b.n	8009f64 <_svfiprintf_r+0x1b0>
 8009f8e:	bf00      	nop
 8009f90:	0800b70c 	.word	0x0800b70c
 8009f94:	0800b712 	.word	0x0800b712
 8009f98:	0800b716 	.word	0x0800b716
 8009f9c:	08007f81 	.word	0x08007f81
 8009fa0:	08009d01 	.word	0x08009d01

08009fa4 <__sfputc_r>:
 8009fa4:	6893      	ldr	r3, [r2, #8]
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	b410      	push	{r4}
 8009fac:	6093      	str	r3, [r2, #8]
 8009fae:	da08      	bge.n	8009fc2 <__sfputc_r+0x1e>
 8009fb0:	6994      	ldr	r4, [r2, #24]
 8009fb2:	42a3      	cmp	r3, r4
 8009fb4:	db01      	blt.n	8009fba <__sfputc_r+0x16>
 8009fb6:	290a      	cmp	r1, #10
 8009fb8:	d103      	bne.n	8009fc2 <__sfputc_r+0x1e>
 8009fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fbe:	f000 b985 	b.w	800a2cc <__swbuf_r>
 8009fc2:	6813      	ldr	r3, [r2, #0]
 8009fc4:	1c58      	adds	r0, r3, #1
 8009fc6:	6010      	str	r0, [r2, #0]
 8009fc8:	7019      	strb	r1, [r3, #0]
 8009fca:	4608      	mov	r0, r1
 8009fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <__sfputs_r>:
 8009fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	460f      	mov	r7, r1
 8009fd8:	4614      	mov	r4, r2
 8009fda:	18d5      	adds	r5, r2, r3
 8009fdc:	42ac      	cmp	r4, r5
 8009fde:	d101      	bne.n	8009fe4 <__sfputs_r+0x12>
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	e007      	b.n	8009ff4 <__sfputs_r+0x22>
 8009fe4:	463a      	mov	r2, r7
 8009fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7ff ffda 	bl	8009fa4 <__sfputc_r>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d1f3      	bne.n	8009fdc <__sfputs_r+0xa>
 8009ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ff8 <_vfiprintf_r>:
 8009ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	b09d      	sub	sp, #116	; 0x74
 800a000:	4617      	mov	r7, r2
 800a002:	461d      	mov	r5, r3
 800a004:	4606      	mov	r6, r0
 800a006:	b118      	cbz	r0, 800a010 <_vfiprintf_r+0x18>
 800a008:	6983      	ldr	r3, [r0, #24]
 800a00a:	b90b      	cbnz	r3, 800a010 <_vfiprintf_r+0x18>
 800a00c:	f7ff fa3c 	bl	8009488 <__sinit>
 800a010:	4b7c      	ldr	r3, [pc, #496]	; (800a204 <_vfiprintf_r+0x20c>)
 800a012:	429c      	cmp	r4, r3
 800a014:	d158      	bne.n	800a0c8 <_vfiprintf_r+0xd0>
 800a016:	6874      	ldr	r4, [r6, #4]
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	0718      	lsls	r0, r3, #28
 800a01c:	d55e      	bpl.n	800a0dc <_vfiprintf_r+0xe4>
 800a01e:	6923      	ldr	r3, [r4, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d05b      	beq.n	800a0dc <_vfiprintf_r+0xe4>
 800a024:	2300      	movs	r3, #0
 800a026:	9309      	str	r3, [sp, #36]	; 0x24
 800a028:	2320      	movs	r3, #32
 800a02a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a02e:	2330      	movs	r3, #48	; 0x30
 800a030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a034:	9503      	str	r5, [sp, #12]
 800a036:	f04f 0b01 	mov.w	fp, #1
 800a03a:	46b8      	mov	r8, r7
 800a03c:	4645      	mov	r5, r8
 800a03e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a042:	b10b      	cbz	r3, 800a048 <_vfiprintf_r+0x50>
 800a044:	2b25      	cmp	r3, #37	; 0x25
 800a046:	d154      	bne.n	800a0f2 <_vfiprintf_r+0xfa>
 800a048:	ebb8 0a07 	subs.w	sl, r8, r7
 800a04c:	d00b      	beq.n	800a066 <_vfiprintf_r+0x6e>
 800a04e:	4653      	mov	r3, sl
 800a050:	463a      	mov	r2, r7
 800a052:	4621      	mov	r1, r4
 800a054:	4630      	mov	r0, r6
 800a056:	f7ff ffbc 	bl	8009fd2 <__sfputs_r>
 800a05a:	3001      	adds	r0, #1
 800a05c:	f000 80c2 	beq.w	800a1e4 <_vfiprintf_r+0x1ec>
 800a060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a062:	4453      	add	r3, sl
 800a064:	9309      	str	r3, [sp, #36]	; 0x24
 800a066:	f898 3000 	ldrb.w	r3, [r8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 80ba 	beq.w	800a1e4 <_vfiprintf_r+0x1ec>
 800a070:	2300      	movs	r3, #0
 800a072:	f04f 32ff 	mov.w	r2, #4294967295
 800a076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	9307      	str	r3, [sp, #28]
 800a07e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a082:	931a      	str	r3, [sp, #104]	; 0x68
 800a084:	46a8      	mov	r8, r5
 800a086:	2205      	movs	r2, #5
 800a088:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a08c:	485e      	ldr	r0, [pc, #376]	; (800a208 <_vfiprintf_r+0x210>)
 800a08e:	f7f6 f8cf 	bl	8000230 <memchr>
 800a092:	9b04      	ldr	r3, [sp, #16]
 800a094:	bb78      	cbnz	r0, 800a0f6 <_vfiprintf_r+0xfe>
 800a096:	06d9      	lsls	r1, r3, #27
 800a098:	bf44      	itt	mi
 800a09a:	2220      	movmi	r2, #32
 800a09c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0a0:	071a      	lsls	r2, r3, #28
 800a0a2:	bf44      	itt	mi
 800a0a4:	222b      	movmi	r2, #43	; 0x2b
 800a0a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0aa:	782a      	ldrb	r2, [r5, #0]
 800a0ac:	2a2a      	cmp	r2, #42	; 0x2a
 800a0ae:	d02a      	beq.n	800a106 <_vfiprintf_r+0x10e>
 800a0b0:	9a07      	ldr	r2, [sp, #28]
 800a0b2:	46a8      	mov	r8, r5
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	250a      	movs	r5, #10
 800a0b8:	4641      	mov	r1, r8
 800a0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0be:	3b30      	subs	r3, #48	; 0x30
 800a0c0:	2b09      	cmp	r3, #9
 800a0c2:	d969      	bls.n	800a198 <_vfiprintf_r+0x1a0>
 800a0c4:	b360      	cbz	r0, 800a120 <_vfiprintf_r+0x128>
 800a0c6:	e024      	b.n	800a112 <_vfiprintf_r+0x11a>
 800a0c8:	4b50      	ldr	r3, [pc, #320]	; (800a20c <_vfiprintf_r+0x214>)
 800a0ca:	429c      	cmp	r4, r3
 800a0cc:	d101      	bne.n	800a0d2 <_vfiprintf_r+0xda>
 800a0ce:	68b4      	ldr	r4, [r6, #8]
 800a0d0:	e7a2      	b.n	800a018 <_vfiprintf_r+0x20>
 800a0d2:	4b4f      	ldr	r3, [pc, #316]	; (800a210 <_vfiprintf_r+0x218>)
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	bf08      	it	eq
 800a0d8:	68f4      	ldreq	r4, [r6, #12]
 800a0da:	e79d      	b.n	800a018 <_vfiprintf_r+0x20>
 800a0dc:	4621      	mov	r1, r4
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f000 f958 	bl	800a394 <__swsetup_r>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d09d      	beq.n	800a024 <_vfiprintf_r+0x2c>
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ec:	b01d      	add	sp, #116	; 0x74
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	46a8      	mov	r8, r5
 800a0f4:	e7a2      	b.n	800a03c <_vfiprintf_r+0x44>
 800a0f6:	4a44      	ldr	r2, [pc, #272]	; (800a208 <_vfiprintf_r+0x210>)
 800a0f8:	1a80      	subs	r0, r0, r2
 800a0fa:	fa0b f000 	lsl.w	r0, fp, r0
 800a0fe:	4318      	orrs	r0, r3
 800a100:	9004      	str	r0, [sp, #16]
 800a102:	4645      	mov	r5, r8
 800a104:	e7be      	b.n	800a084 <_vfiprintf_r+0x8c>
 800a106:	9a03      	ldr	r2, [sp, #12]
 800a108:	1d11      	adds	r1, r2, #4
 800a10a:	6812      	ldr	r2, [r2, #0]
 800a10c:	9103      	str	r1, [sp, #12]
 800a10e:	2a00      	cmp	r2, #0
 800a110:	db01      	blt.n	800a116 <_vfiprintf_r+0x11e>
 800a112:	9207      	str	r2, [sp, #28]
 800a114:	e004      	b.n	800a120 <_vfiprintf_r+0x128>
 800a116:	4252      	negs	r2, r2
 800a118:	f043 0302 	orr.w	r3, r3, #2
 800a11c:	9207      	str	r2, [sp, #28]
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	f898 3000 	ldrb.w	r3, [r8]
 800a124:	2b2e      	cmp	r3, #46	; 0x2e
 800a126:	d10e      	bne.n	800a146 <_vfiprintf_r+0x14e>
 800a128:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a12c:	2b2a      	cmp	r3, #42	; 0x2a
 800a12e:	d138      	bne.n	800a1a2 <_vfiprintf_r+0x1aa>
 800a130:	9b03      	ldr	r3, [sp, #12]
 800a132:	1d1a      	adds	r2, r3, #4
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	9203      	str	r2, [sp, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bfb8      	it	lt
 800a13c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a140:	f108 0802 	add.w	r8, r8, #2
 800a144:	9305      	str	r3, [sp, #20]
 800a146:	4d33      	ldr	r5, [pc, #204]	; (800a214 <_vfiprintf_r+0x21c>)
 800a148:	f898 1000 	ldrb.w	r1, [r8]
 800a14c:	2203      	movs	r2, #3
 800a14e:	4628      	mov	r0, r5
 800a150:	f7f6 f86e 	bl	8000230 <memchr>
 800a154:	b140      	cbz	r0, 800a168 <_vfiprintf_r+0x170>
 800a156:	2340      	movs	r3, #64	; 0x40
 800a158:	1b40      	subs	r0, r0, r5
 800a15a:	fa03 f000 	lsl.w	r0, r3, r0
 800a15e:	9b04      	ldr	r3, [sp, #16]
 800a160:	4303      	orrs	r3, r0
 800a162:	f108 0801 	add.w	r8, r8, #1
 800a166:	9304      	str	r3, [sp, #16]
 800a168:	f898 1000 	ldrb.w	r1, [r8]
 800a16c:	482a      	ldr	r0, [pc, #168]	; (800a218 <_vfiprintf_r+0x220>)
 800a16e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a172:	2206      	movs	r2, #6
 800a174:	f108 0701 	add.w	r7, r8, #1
 800a178:	f7f6 f85a 	bl	8000230 <memchr>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d037      	beq.n	800a1f0 <_vfiprintf_r+0x1f8>
 800a180:	4b26      	ldr	r3, [pc, #152]	; (800a21c <_vfiprintf_r+0x224>)
 800a182:	bb1b      	cbnz	r3, 800a1cc <_vfiprintf_r+0x1d4>
 800a184:	9b03      	ldr	r3, [sp, #12]
 800a186:	3307      	adds	r3, #7
 800a188:	f023 0307 	bic.w	r3, r3, #7
 800a18c:	3308      	adds	r3, #8
 800a18e:	9303      	str	r3, [sp, #12]
 800a190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a192:	444b      	add	r3, r9
 800a194:	9309      	str	r3, [sp, #36]	; 0x24
 800a196:	e750      	b.n	800a03a <_vfiprintf_r+0x42>
 800a198:	fb05 3202 	mla	r2, r5, r2, r3
 800a19c:	2001      	movs	r0, #1
 800a19e:	4688      	mov	r8, r1
 800a1a0:	e78a      	b.n	800a0b8 <_vfiprintf_r+0xc0>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f108 0801 	add.w	r8, r8, #1
 800a1a8:	9305      	str	r3, [sp, #20]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	250a      	movs	r5, #10
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1b4:	3a30      	subs	r2, #48	; 0x30
 800a1b6:	2a09      	cmp	r2, #9
 800a1b8:	d903      	bls.n	800a1c2 <_vfiprintf_r+0x1ca>
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0c3      	beq.n	800a146 <_vfiprintf_r+0x14e>
 800a1be:	9105      	str	r1, [sp, #20]
 800a1c0:	e7c1      	b.n	800a146 <_vfiprintf_r+0x14e>
 800a1c2:	fb05 2101 	mla	r1, r5, r1, r2
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	e7f0      	b.n	800a1ae <_vfiprintf_r+0x1b6>
 800a1cc:	ab03      	add	r3, sp, #12
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	4b13      	ldr	r3, [pc, #76]	; (800a220 <_vfiprintf_r+0x228>)
 800a1d4:	a904      	add	r1, sp, #16
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f7fd fed2 	bl	8007f80 <_printf_float>
 800a1dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1e0:	4681      	mov	r9, r0
 800a1e2:	d1d5      	bne.n	800a190 <_vfiprintf_r+0x198>
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	065b      	lsls	r3, r3, #25
 800a1e8:	f53f af7e 	bmi.w	800a0e8 <_vfiprintf_r+0xf0>
 800a1ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ee:	e77d      	b.n	800a0ec <_vfiprintf_r+0xf4>
 800a1f0:	ab03      	add	r3, sp, #12
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <_vfiprintf_r+0x228>)
 800a1f8:	a904      	add	r1, sp, #16
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7fe f976 	bl	80084ec <_printf_i>
 800a200:	e7ec      	b.n	800a1dc <_vfiprintf_r+0x1e4>
 800a202:	bf00      	nop
 800a204:	0800b5cc 	.word	0x0800b5cc
 800a208:	0800b70c 	.word	0x0800b70c
 800a20c:	0800b5ec 	.word	0x0800b5ec
 800a210:	0800b5ac 	.word	0x0800b5ac
 800a214:	0800b712 	.word	0x0800b712
 800a218:	0800b716 	.word	0x0800b716
 800a21c:	08007f81 	.word	0x08007f81
 800a220:	08009fd3 	.word	0x08009fd3

0800a224 <_sbrk_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4c06      	ldr	r4, [pc, #24]	; (800a240 <_sbrk_r+0x1c>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4605      	mov	r5, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	f7f7 fb6e 	bl	8001910 <_sbrk>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_sbrk_r+0x1a>
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_sbrk_r+0x1a>
 800a23c:	602b      	str	r3, [r5, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	20000940 	.word	0x20000940

0800a244 <__sread>:
 800a244:	b510      	push	{r4, lr}
 800a246:	460c      	mov	r4, r1
 800a248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a24c:	f000 fa9a 	bl	800a784 <_read_r>
 800a250:	2800      	cmp	r0, #0
 800a252:	bfab      	itete	ge
 800a254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a256:	89a3      	ldrhlt	r3, [r4, #12]
 800a258:	181b      	addge	r3, r3, r0
 800a25a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a25e:	bfac      	ite	ge
 800a260:	6563      	strge	r3, [r4, #84]	; 0x54
 800a262:	81a3      	strhlt	r3, [r4, #12]
 800a264:	bd10      	pop	{r4, pc}

0800a266 <__swrite>:
 800a266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26a:	461f      	mov	r7, r3
 800a26c:	898b      	ldrh	r3, [r1, #12]
 800a26e:	05db      	lsls	r3, r3, #23
 800a270:	4605      	mov	r5, r0
 800a272:	460c      	mov	r4, r1
 800a274:	4616      	mov	r6, r2
 800a276:	d505      	bpl.n	800a284 <__swrite+0x1e>
 800a278:	2302      	movs	r3, #2
 800a27a:	2200      	movs	r2, #0
 800a27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a280:	f000 f9b6 	bl	800a5f0 <_lseek_r>
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a28a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a28e:	81a3      	strh	r3, [r4, #12]
 800a290:	4632      	mov	r2, r6
 800a292:	463b      	mov	r3, r7
 800a294:	4628      	mov	r0, r5
 800a296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a29a:	f000 b869 	b.w	800a370 <_write_r>

0800a29e <__sseek>:
 800a29e:	b510      	push	{r4, lr}
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a6:	f000 f9a3 	bl	800a5f0 <_lseek_r>
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	bf15      	itete	ne
 800a2b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2ba:	81a3      	strheq	r3, [r4, #12]
 800a2bc:	bf18      	it	ne
 800a2be:	81a3      	strhne	r3, [r4, #12]
 800a2c0:	bd10      	pop	{r4, pc}

0800a2c2 <__sclose>:
 800a2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c6:	f000 b8d3 	b.w	800a470 <_close_r>
	...

0800a2cc <__swbuf_r>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	460e      	mov	r6, r1
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	b118      	cbz	r0, 800a2de <__swbuf_r+0x12>
 800a2d6:	6983      	ldr	r3, [r0, #24]
 800a2d8:	b90b      	cbnz	r3, 800a2de <__swbuf_r+0x12>
 800a2da:	f7ff f8d5 	bl	8009488 <__sinit>
 800a2de:	4b21      	ldr	r3, [pc, #132]	; (800a364 <__swbuf_r+0x98>)
 800a2e0:	429c      	cmp	r4, r3
 800a2e2:	d12a      	bne.n	800a33a <__swbuf_r+0x6e>
 800a2e4:	686c      	ldr	r4, [r5, #4]
 800a2e6:	69a3      	ldr	r3, [r4, #24]
 800a2e8:	60a3      	str	r3, [r4, #8]
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	071a      	lsls	r2, r3, #28
 800a2ee:	d52e      	bpl.n	800a34e <__swbuf_r+0x82>
 800a2f0:	6923      	ldr	r3, [r4, #16]
 800a2f2:	b363      	cbz	r3, 800a34e <__swbuf_r+0x82>
 800a2f4:	6923      	ldr	r3, [r4, #16]
 800a2f6:	6820      	ldr	r0, [r4, #0]
 800a2f8:	1ac0      	subs	r0, r0, r3
 800a2fa:	6963      	ldr	r3, [r4, #20]
 800a2fc:	b2f6      	uxtb	r6, r6
 800a2fe:	4283      	cmp	r3, r0
 800a300:	4637      	mov	r7, r6
 800a302:	dc04      	bgt.n	800a30e <__swbuf_r+0x42>
 800a304:	4621      	mov	r1, r4
 800a306:	4628      	mov	r0, r5
 800a308:	f000 f948 	bl	800a59c <_fflush_r>
 800a30c:	bb28      	cbnz	r0, 800a35a <__swbuf_r+0x8e>
 800a30e:	68a3      	ldr	r3, [r4, #8]
 800a310:	3b01      	subs	r3, #1
 800a312:	60a3      	str	r3, [r4, #8]
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	6022      	str	r2, [r4, #0]
 800a31a:	701e      	strb	r6, [r3, #0]
 800a31c:	6963      	ldr	r3, [r4, #20]
 800a31e:	3001      	adds	r0, #1
 800a320:	4283      	cmp	r3, r0
 800a322:	d004      	beq.n	800a32e <__swbuf_r+0x62>
 800a324:	89a3      	ldrh	r3, [r4, #12]
 800a326:	07db      	lsls	r3, r3, #31
 800a328:	d519      	bpl.n	800a35e <__swbuf_r+0x92>
 800a32a:	2e0a      	cmp	r6, #10
 800a32c:	d117      	bne.n	800a35e <__swbuf_r+0x92>
 800a32e:	4621      	mov	r1, r4
 800a330:	4628      	mov	r0, r5
 800a332:	f000 f933 	bl	800a59c <_fflush_r>
 800a336:	b190      	cbz	r0, 800a35e <__swbuf_r+0x92>
 800a338:	e00f      	b.n	800a35a <__swbuf_r+0x8e>
 800a33a:	4b0b      	ldr	r3, [pc, #44]	; (800a368 <__swbuf_r+0x9c>)
 800a33c:	429c      	cmp	r4, r3
 800a33e:	d101      	bne.n	800a344 <__swbuf_r+0x78>
 800a340:	68ac      	ldr	r4, [r5, #8]
 800a342:	e7d0      	b.n	800a2e6 <__swbuf_r+0x1a>
 800a344:	4b09      	ldr	r3, [pc, #36]	; (800a36c <__swbuf_r+0xa0>)
 800a346:	429c      	cmp	r4, r3
 800a348:	bf08      	it	eq
 800a34a:	68ec      	ldreq	r4, [r5, #12]
 800a34c:	e7cb      	b.n	800a2e6 <__swbuf_r+0x1a>
 800a34e:	4621      	mov	r1, r4
 800a350:	4628      	mov	r0, r5
 800a352:	f000 f81f 	bl	800a394 <__swsetup_r>
 800a356:	2800      	cmp	r0, #0
 800a358:	d0cc      	beq.n	800a2f4 <__swbuf_r+0x28>
 800a35a:	f04f 37ff 	mov.w	r7, #4294967295
 800a35e:	4638      	mov	r0, r7
 800a360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a362:	bf00      	nop
 800a364:	0800b5cc 	.word	0x0800b5cc
 800a368:	0800b5ec 	.word	0x0800b5ec
 800a36c:	0800b5ac 	.word	0x0800b5ac

0800a370 <_write_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4c07      	ldr	r4, [pc, #28]	; (800a390 <_write_r+0x20>)
 800a374:	4605      	mov	r5, r0
 800a376:	4608      	mov	r0, r1
 800a378:	4611      	mov	r1, r2
 800a37a:	2200      	movs	r2, #0
 800a37c:	6022      	str	r2, [r4, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	f7f7 fa75 	bl	800186e <_write>
 800a384:	1c43      	adds	r3, r0, #1
 800a386:	d102      	bne.n	800a38e <_write_r+0x1e>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	b103      	cbz	r3, 800a38e <_write_r+0x1e>
 800a38c:	602b      	str	r3, [r5, #0]
 800a38e:	bd38      	pop	{r3, r4, r5, pc}
 800a390:	20000940 	.word	0x20000940

0800a394 <__swsetup_r>:
 800a394:	4b32      	ldr	r3, [pc, #200]	; (800a460 <__swsetup_r+0xcc>)
 800a396:	b570      	push	{r4, r5, r6, lr}
 800a398:	681d      	ldr	r5, [r3, #0]
 800a39a:	4606      	mov	r6, r0
 800a39c:	460c      	mov	r4, r1
 800a39e:	b125      	cbz	r5, 800a3aa <__swsetup_r+0x16>
 800a3a0:	69ab      	ldr	r3, [r5, #24]
 800a3a2:	b913      	cbnz	r3, 800a3aa <__swsetup_r+0x16>
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	f7ff f86f 	bl	8009488 <__sinit>
 800a3aa:	4b2e      	ldr	r3, [pc, #184]	; (800a464 <__swsetup_r+0xd0>)
 800a3ac:	429c      	cmp	r4, r3
 800a3ae:	d10f      	bne.n	800a3d0 <__swsetup_r+0x3c>
 800a3b0:	686c      	ldr	r4, [r5, #4]
 800a3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	0715      	lsls	r5, r2, #28
 800a3ba:	d42c      	bmi.n	800a416 <__swsetup_r+0x82>
 800a3bc:	06d0      	lsls	r0, r2, #27
 800a3be:	d411      	bmi.n	800a3e4 <__swsetup_r+0x50>
 800a3c0:	2209      	movs	r2, #9
 800a3c2:	6032      	str	r2, [r6, #0]
 800a3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c8:	81a3      	strh	r3, [r4, #12]
 800a3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ce:	e03e      	b.n	800a44e <__swsetup_r+0xba>
 800a3d0:	4b25      	ldr	r3, [pc, #148]	; (800a468 <__swsetup_r+0xd4>)
 800a3d2:	429c      	cmp	r4, r3
 800a3d4:	d101      	bne.n	800a3da <__swsetup_r+0x46>
 800a3d6:	68ac      	ldr	r4, [r5, #8]
 800a3d8:	e7eb      	b.n	800a3b2 <__swsetup_r+0x1e>
 800a3da:	4b24      	ldr	r3, [pc, #144]	; (800a46c <__swsetup_r+0xd8>)
 800a3dc:	429c      	cmp	r4, r3
 800a3de:	bf08      	it	eq
 800a3e0:	68ec      	ldreq	r4, [r5, #12]
 800a3e2:	e7e6      	b.n	800a3b2 <__swsetup_r+0x1e>
 800a3e4:	0751      	lsls	r1, r2, #29
 800a3e6:	d512      	bpl.n	800a40e <__swsetup_r+0x7a>
 800a3e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ea:	b141      	cbz	r1, 800a3fe <__swsetup_r+0x6a>
 800a3ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3f0:	4299      	cmp	r1, r3
 800a3f2:	d002      	beq.n	800a3fa <__swsetup_r+0x66>
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f7ff fbdb 	bl	8009bb0 <_free_r>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	6363      	str	r3, [r4, #52]	; 0x34
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a404:	81a3      	strh	r3, [r4, #12]
 800a406:	2300      	movs	r3, #0
 800a408:	6063      	str	r3, [r4, #4]
 800a40a:	6923      	ldr	r3, [r4, #16]
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	89a3      	ldrh	r3, [r4, #12]
 800a410:	f043 0308 	orr.w	r3, r3, #8
 800a414:	81a3      	strh	r3, [r4, #12]
 800a416:	6923      	ldr	r3, [r4, #16]
 800a418:	b94b      	cbnz	r3, 800a42e <__swsetup_r+0x9a>
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a424:	d003      	beq.n	800a42e <__swsetup_r+0x9a>
 800a426:	4621      	mov	r1, r4
 800a428:	4630      	mov	r0, r6
 800a42a:	f000 f917 	bl	800a65c <__smakebuf_r>
 800a42e:	89a2      	ldrh	r2, [r4, #12]
 800a430:	f012 0301 	ands.w	r3, r2, #1
 800a434:	d00c      	beq.n	800a450 <__swsetup_r+0xbc>
 800a436:	2300      	movs	r3, #0
 800a438:	60a3      	str	r3, [r4, #8]
 800a43a:	6963      	ldr	r3, [r4, #20]
 800a43c:	425b      	negs	r3, r3
 800a43e:	61a3      	str	r3, [r4, #24]
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	b953      	cbnz	r3, 800a45a <__swsetup_r+0xc6>
 800a444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a448:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a44c:	d1ba      	bne.n	800a3c4 <__swsetup_r+0x30>
 800a44e:	bd70      	pop	{r4, r5, r6, pc}
 800a450:	0792      	lsls	r2, r2, #30
 800a452:	bf58      	it	pl
 800a454:	6963      	ldrpl	r3, [r4, #20]
 800a456:	60a3      	str	r3, [r4, #8]
 800a458:	e7f2      	b.n	800a440 <__swsetup_r+0xac>
 800a45a:	2000      	movs	r0, #0
 800a45c:	e7f7      	b.n	800a44e <__swsetup_r+0xba>
 800a45e:	bf00      	nop
 800a460:	2000000c 	.word	0x2000000c
 800a464:	0800b5cc 	.word	0x0800b5cc
 800a468:	0800b5ec 	.word	0x0800b5ec
 800a46c:	0800b5ac 	.word	0x0800b5ac

0800a470 <_close_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4c06      	ldr	r4, [pc, #24]	; (800a48c <_close_r+0x1c>)
 800a474:	2300      	movs	r3, #0
 800a476:	4605      	mov	r5, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	f7f7 fa13 	bl	80018a6 <_close>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d102      	bne.n	800a48a <_close_r+0x1a>
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	b103      	cbz	r3, 800a48a <_close_r+0x1a>
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	20000940 	.word	0x20000940

0800a490 <__sflush_r>:
 800a490:	898a      	ldrh	r2, [r1, #12]
 800a492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a496:	4605      	mov	r5, r0
 800a498:	0710      	lsls	r0, r2, #28
 800a49a:	460c      	mov	r4, r1
 800a49c:	d458      	bmi.n	800a550 <__sflush_r+0xc0>
 800a49e:	684b      	ldr	r3, [r1, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	dc05      	bgt.n	800a4b0 <__sflush_r+0x20>
 800a4a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	dc02      	bgt.n	800a4b0 <__sflush_r+0x20>
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4b2:	2e00      	cmp	r6, #0
 800a4b4:	d0f9      	beq.n	800a4aa <__sflush_r+0x1a>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4bc:	682f      	ldr	r7, [r5, #0]
 800a4be:	6a21      	ldr	r1, [r4, #32]
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	d032      	beq.n	800a52a <__sflush_r+0x9a>
 800a4c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	075a      	lsls	r2, r3, #29
 800a4ca:	d505      	bpl.n	800a4d8 <__sflush_r+0x48>
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	1ac0      	subs	r0, r0, r3
 800a4d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4d2:	b10b      	cbz	r3, 800a4d8 <__sflush_r+0x48>
 800a4d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4d6:	1ac0      	subs	r0, r0, r3
 800a4d8:	2300      	movs	r3, #0
 800a4da:	4602      	mov	r2, r0
 800a4dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4de:	6a21      	ldr	r1, [r4, #32]
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	47b0      	blx	r6
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	d106      	bne.n	800a4f8 <__sflush_r+0x68>
 800a4ea:	6829      	ldr	r1, [r5, #0]
 800a4ec:	291d      	cmp	r1, #29
 800a4ee:	d848      	bhi.n	800a582 <__sflush_r+0xf2>
 800a4f0:	4a29      	ldr	r2, [pc, #164]	; (800a598 <__sflush_r+0x108>)
 800a4f2:	40ca      	lsrs	r2, r1
 800a4f4:	07d6      	lsls	r6, r2, #31
 800a4f6:	d544      	bpl.n	800a582 <__sflush_r+0xf2>
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	6062      	str	r2, [r4, #4]
 800a4fc:	04d9      	lsls	r1, r3, #19
 800a4fe:	6922      	ldr	r2, [r4, #16]
 800a500:	6022      	str	r2, [r4, #0]
 800a502:	d504      	bpl.n	800a50e <__sflush_r+0x7e>
 800a504:	1c42      	adds	r2, r0, #1
 800a506:	d101      	bne.n	800a50c <__sflush_r+0x7c>
 800a508:	682b      	ldr	r3, [r5, #0]
 800a50a:	b903      	cbnz	r3, 800a50e <__sflush_r+0x7e>
 800a50c:	6560      	str	r0, [r4, #84]	; 0x54
 800a50e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a510:	602f      	str	r7, [r5, #0]
 800a512:	2900      	cmp	r1, #0
 800a514:	d0c9      	beq.n	800a4aa <__sflush_r+0x1a>
 800a516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a51a:	4299      	cmp	r1, r3
 800a51c:	d002      	beq.n	800a524 <__sflush_r+0x94>
 800a51e:	4628      	mov	r0, r5
 800a520:	f7ff fb46 	bl	8009bb0 <_free_r>
 800a524:	2000      	movs	r0, #0
 800a526:	6360      	str	r0, [r4, #52]	; 0x34
 800a528:	e7c0      	b.n	800a4ac <__sflush_r+0x1c>
 800a52a:	2301      	movs	r3, #1
 800a52c:	4628      	mov	r0, r5
 800a52e:	47b0      	blx	r6
 800a530:	1c41      	adds	r1, r0, #1
 800a532:	d1c8      	bne.n	800a4c6 <__sflush_r+0x36>
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d0c5      	beq.n	800a4c6 <__sflush_r+0x36>
 800a53a:	2b1d      	cmp	r3, #29
 800a53c:	d001      	beq.n	800a542 <__sflush_r+0xb2>
 800a53e:	2b16      	cmp	r3, #22
 800a540:	d101      	bne.n	800a546 <__sflush_r+0xb6>
 800a542:	602f      	str	r7, [r5, #0]
 800a544:	e7b1      	b.n	800a4aa <__sflush_r+0x1a>
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a54c:	81a3      	strh	r3, [r4, #12]
 800a54e:	e7ad      	b.n	800a4ac <__sflush_r+0x1c>
 800a550:	690f      	ldr	r7, [r1, #16]
 800a552:	2f00      	cmp	r7, #0
 800a554:	d0a9      	beq.n	800a4aa <__sflush_r+0x1a>
 800a556:	0793      	lsls	r3, r2, #30
 800a558:	680e      	ldr	r6, [r1, #0]
 800a55a:	bf08      	it	eq
 800a55c:	694b      	ldreq	r3, [r1, #20]
 800a55e:	600f      	str	r7, [r1, #0]
 800a560:	bf18      	it	ne
 800a562:	2300      	movne	r3, #0
 800a564:	eba6 0807 	sub.w	r8, r6, r7
 800a568:	608b      	str	r3, [r1, #8]
 800a56a:	f1b8 0f00 	cmp.w	r8, #0
 800a56e:	dd9c      	ble.n	800a4aa <__sflush_r+0x1a>
 800a570:	4643      	mov	r3, r8
 800a572:	463a      	mov	r2, r7
 800a574:	6a21      	ldr	r1, [r4, #32]
 800a576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a578:	4628      	mov	r0, r5
 800a57a:	47b0      	blx	r6
 800a57c:	2800      	cmp	r0, #0
 800a57e:	dc06      	bgt.n	800a58e <__sflush_r+0xfe>
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	f04f 30ff 	mov.w	r0, #4294967295
 800a58c:	e78e      	b.n	800a4ac <__sflush_r+0x1c>
 800a58e:	4407      	add	r7, r0
 800a590:	eba8 0800 	sub.w	r8, r8, r0
 800a594:	e7e9      	b.n	800a56a <__sflush_r+0xda>
 800a596:	bf00      	nop
 800a598:	20400001 	.word	0x20400001

0800a59c <_fflush_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	690b      	ldr	r3, [r1, #16]
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	b1db      	cbz	r3, 800a5de <_fflush_r+0x42>
 800a5a6:	b118      	cbz	r0, 800a5b0 <_fflush_r+0x14>
 800a5a8:	6983      	ldr	r3, [r0, #24]
 800a5aa:	b90b      	cbnz	r3, 800a5b0 <_fflush_r+0x14>
 800a5ac:	f7fe ff6c 	bl	8009488 <__sinit>
 800a5b0:	4b0c      	ldr	r3, [pc, #48]	; (800a5e4 <_fflush_r+0x48>)
 800a5b2:	429c      	cmp	r4, r3
 800a5b4:	d109      	bne.n	800a5ca <_fflush_r+0x2e>
 800a5b6:	686c      	ldr	r4, [r5, #4]
 800a5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5bc:	b17b      	cbz	r3, 800a5de <_fflush_r+0x42>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5c6:	f7ff bf63 	b.w	800a490 <__sflush_r>
 800a5ca:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <_fflush_r+0x4c>)
 800a5cc:	429c      	cmp	r4, r3
 800a5ce:	d101      	bne.n	800a5d4 <_fflush_r+0x38>
 800a5d0:	68ac      	ldr	r4, [r5, #8]
 800a5d2:	e7f1      	b.n	800a5b8 <_fflush_r+0x1c>
 800a5d4:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <_fflush_r+0x50>)
 800a5d6:	429c      	cmp	r4, r3
 800a5d8:	bf08      	it	eq
 800a5da:	68ec      	ldreq	r4, [r5, #12]
 800a5dc:	e7ec      	b.n	800a5b8 <_fflush_r+0x1c>
 800a5de:	2000      	movs	r0, #0
 800a5e0:	bd38      	pop	{r3, r4, r5, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0800b5cc 	.word	0x0800b5cc
 800a5e8:	0800b5ec 	.word	0x0800b5ec
 800a5ec:	0800b5ac 	.word	0x0800b5ac

0800a5f0 <_lseek_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4c07      	ldr	r4, [pc, #28]	; (800a610 <_lseek_r+0x20>)
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	4608      	mov	r0, r1
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	6022      	str	r2, [r4, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	f7f7 f978 	bl	80018f4 <_lseek>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_lseek_r+0x1e>
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_lseek_r+0x1e>
 800a60c:	602b      	str	r3, [r5, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	20000940 	.word	0x20000940

0800a614 <__swhatbuf_r>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	460e      	mov	r6, r1
 800a618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61c:	2900      	cmp	r1, #0
 800a61e:	b096      	sub	sp, #88	; 0x58
 800a620:	4614      	mov	r4, r2
 800a622:	461d      	mov	r5, r3
 800a624:	da07      	bge.n	800a636 <__swhatbuf_r+0x22>
 800a626:	2300      	movs	r3, #0
 800a628:	602b      	str	r3, [r5, #0]
 800a62a:	89b3      	ldrh	r3, [r6, #12]
 800a62c:	061a      	lsls	r2, r3, #24
 800a62e:	d410      	bmi.n	800a652 <__swhatbuf_r+0x3e>
 800a630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a634:	e00e      	b.n	800a654 <__swhatbuf_r+0x40>
 800a636:	466a      	mov	r2, sp
 800a638:	f000 f8c4 	bl	800a7c4 <_fstat_r>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	dbf2      	blt.n	800a626 <__swhatbuf_r+0x12>
 800a640:	9a01      	ldr	r2, [sp, #4]
 800a642:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a646:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a64a:	425a      	negs	r2, r3
 800a64c:	415a      	adcs	r2, r3
 800a64e:	602a      	str	r2, [r5, #0]
 800a650:	e7ee      	b.n	800a630 <__swhatbuf_r+0x1c>
 800a652:	2340      	movs	r3, #64	; 0x40
 800a654:	2000      	movs	r0, #0
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	b016      	add	sp, #88	; 0x58
 800a65a:	bd70      	pop	{r4, r5, r6, pc}

0800a65c <__smakebuf_r>:
 800a65c:	898b      	ldrh	r3, [r1, #12]
 800a65e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a660:	079d      	lsls	r5, r3, #30
 800a662:	4606      	mov	r6, r0
 800a664:	460c      	mov	r4, r1
 800a666:	d507      	bpl.n	800a678 <__smakebuf_r+0x1c>
 800a668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	6123      	str	r3, [r4, #16]
 800a670:	2301      	movs	r3, #1
 800a672:	6163      	str	r3, [r4, #20]
 800a674:	b002      	add	sp, #8
 800a676:	bd70      	pop	{r4, r5, r6, pc}
 800a678:	ab01      	add	r3, sp, #4
 800a67a:	466a      	mov	r2, sp
 800a67c:	f7ff ffca 	bl	800a614 <__swhatbuf_r>
 800a680:	9900      	ldr	r1, [sp, #0]
 800a682:	4605      	mov	r5, r0
 800a684:	4630      	mov	r0, r6
 800a686:	f7ff fae1 	bl	8009c4c <_malloc_r>
 800a68a:	b948      	cbnz	r0, 800a6a0 <__smakebuf_r+0x44>
 800a68c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a690:	059a      	lsls	r2, r3, #22
 800a692:	d4ef      	bmi.n	800a674 <__smakebuf_r+0x18>
 800a694:	f023 0303 	bic.w	r3, r3, #3
 800a698:	f043 0302 	orr.w	r3, r3, #2
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	e7e3      	b.n	800a668 <__smakebuf_r+0xc>
 800a6a0:	4b0d      	ldr	r3, [pc, #52]	; (800a6d8 <__smakebuf_r+0x7c>)
 800a6a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	6020      	str	r0, [r4, #0]
 800a6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ac:	81a3      	strh	r3, [r4, #12]
 800a6ae:	9b00      	ldr	r3, [sp, #0]
 800a6b0:	6163      	str	r3, [r4, #20]
 800a6b2:	9b01      	ldr	r3, [sp, #4]
 800a6b4:	6120      	str	r0, [r4, #16]
 800a6b6:	b15b      	cbz	r3, 800a6d0 <__smakebuf_r+0x74>
 800a6b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f000 f893 	bl	800a7e8 <_isatty_r>
 800a6c2:	b128      	cbz	r0, 800a6d0 <__smakebuf_r+0x74>
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	f023 0303 	bic.w	r3, r3, #3
 800a6ca:	f043 0301 	orr.w	r3, r3, #1
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	431d      	orrs	r5, r3
 800a6d4:	81a5      	strh	r5, [r4, #12]
 800a6d6:	e7cd      	b.n	800a674 <__smakebuf_r+0x18>
 800a6d8:	08009451 	.word	0x08009451

0800a6dc <__ascii_mbtowc>:
 800a6dc:	b082      	sub	sp, #8
 800a6de:	b901      	cbnz	r1, 800a6e2 <__ascii_mbtowc+0x6>
 800a6e0:	a901      	add	r1, sp, #4
 800a6e2:	b142      	cbz	r2, 800a6f6 <__ascii_mbtowc+0x1a>
 800a6e4:	b14b      	cbz	r3, 800a6fa <__ascii_mbtowc+0x1e>
 800a6e6:	7813      	ldrb	r3, [r2, #0]
 800a6e8:	600b      	str	r3, [r1, #0]
 800a6ea:	7812      	ldrb	r2, [r2, #0]
 800a6ec:	1c10      	adds	r0, r2, #0
 800a6ee:	bf18      	it	ne
 800a6f0:	2001      	movne	r0, #1
 800a6f2:	b002      	add	sp, #8
 800a6f4:	4770      	bx	lr
 800a6f6:	4610      	mov	r0, r2
 800a6f8:	e7fb      	b.n	800a6f2 <__ascii_mbtowc+0x16>
 800a6fa:	f06f 0001 	mvn.w	r0, #1
 800a6fe:	e7f8      	b.n	800a6f2 <__ascii_mbtowc+0x16>

0800a700 <memmove>:
 800a700:	4288      	cmp	r0, r1
 800a702:	b510      	push	{r4, lr}
 800a704:	eb01 0302 	add.w	r3, r1, r2
 800a708:	d807      	bhi.n	800a71a <memmove+0x1a>
 800a70a:	1e42      	subs	r2, r0, #1
 800a70c:	4299      	cmp	r1, r3
 800a70e:	d00a      	beq.n	800a726 <memmove+0x26>
 800a710:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a714:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a718:	e7f8      	b.n	800a70c <memmove+0xc>
 800a71a:	4283      	cmp	r3, r0
 800a71c:	d9f5      	bls.n	800a70a <memmove+0xa>
 800a71e:	1881      	adds	r1, r0, r2
 800a720:	1ad2      	subs	r2, r2, r3
 800a722:	42d3      	cmn	r3, r2
 800a724:	d100      	bne.n	800a728 <memmove+0x28>
 800a726:	bd10      	pop	{r4, pc}
 800a728:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a72c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a730:	e7f7      	b.n	800a722 <memmove+0x22>

0800a732 <__malloc_lock>:
 800a732:	4770      	bx	lr

0800a734 <__malloc_unlock>:
 800a734:	4770      	bx	lr

0800a736 <_realloc_r>:
 800a736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a738:	4607      	mov	r7, r0
 800a73a:	4614      	mov	r4, r2
 800a73c:	460e      	mov	r6, r1
 800a73e:	b921      	cbnz	r1, 800a74a <_realloc_r+0x14>
 800a740:	4611      	mov	r1, r2
 800a742:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a746:	f7ff ba81 	b.w	8009c4c <_malloc_r>
 800a74a:	b922      	cbnz	r2, 800a756 <_realloc_r+0x20>
 800a74c:	f7ff fa30 	bl	8009bb0 <_free_r>
 800a750:	4625      	mov	r5, r4
 800a752:	4628      	mov	r0, r5
 800a754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a756:	f000 f857 	bl	800a808 <_malloc_usable_size_r>
 800a75a:	42a0      	cmp	r0, r4
 800a75c:	d20f      	bcs.n	800a77e <_realloc_r+0x48>
 800a75e:	4621      	mov	r1, r4
 800a760:	4638      	mov	r0, r7
 800a762:	f7ff fa73 	bl	8009c4c <_malloc_r>
 800a766:	4605      	mov	r5, r0
 800a768:	2800      	cmp	r0, #0
 800a76a:	d0f2      	beq.n	800a752 <_realloc_r+0x1c>
 800a76c:	4631      	mov	r1, r6
 800a76e:	4622      	mov	r2, r4
 800a770:	f7fe ff2a 	bl	80095c8 <memcpy>
 800a774:	4631      	mov	r1, r6
 800a776:	4638      	mov	r0, r7
 800a778:	f7ff fa1a 	bl	8009bb0 <_free_r>
 800a77c:	e7e9      	b.n	800a752 <_realloc_r+0x1c>
 800a77e:	4635      	mov	r5, r6
 800a780:	e7e7      	b.n	800a752 <_realloc_r+0x1c>
	...

0800a784 <_read_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4c07      	ldr	r4, [pc, #28]	; (800a7a4 <_read_r+0x20>)
 800a788:	4605      	mov	r5, r0
 800a78a:	4608      	mov	r0, r1
 800a78c:	4611      	mov	r1, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	6022      	str	r2, [r4, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	f7f7 f84e 	bl	8001834 <_read>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_read_r+0x1e>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_read_r+0x1e>
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20000940 	.word	0x20000940

0800a7a8 <__ascii_wctomb>:
 800a7a8:	b149      	cbz	r1, 800a7be <__ascii_wctomb+0x16>
 800a7aa:	2aff      	cmp	r2, #255	; 0xff
 800a7ac:	bf85      	ittet	hi
 800a7ae:	238a      	movhi	r3, #138	; 0x8a
 800a7b0:	6003      	strhi	r3, [r0, #0]
 800a7b2:	700a      	strbls	r2, [r1, #0]
 800a7b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7b8:	bf98      	it	ls
 800a7ba:	2001      	movls	r0, #1
 800a7bc:	4770      	bx	lr
 800a7be:	4608      	mov	r0, r1
 800a7c0:	4770      	bx	lr
	...

0800a7c4 <_fstat_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4c07      	ldr	r4, [pc, #28]	; (800a7e4 <_fstat_r+0x20>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	f7f7 f874 	bl	80018be <_fstat>
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	d102      	bne.n	800a7e0 <_fstat_r+0x1c>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	b103      	cbz	r3, 800a7e0 <_fstat_r+0x1c>
 800a7de:	602b      	str	r3, [r5, #0]
 800a7e0:	bd38      	pop	{r3, r4, r5, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20000940 	.word	0x20000940

0800a7e8 <_isatty_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	4c06      	ldr	r4, [pc, #24]	; (800a804 <_isatty_r+0x1c>)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	f7f7 f873 	bl	80018de <_isatty>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_isatty_r+0x1a>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_isatty_r+0x1a>
 800a800:	602b      	str	r3, [r5, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	20000940 	.word	0x20000940

0800a808 <_malloc_usable_size_r>:
 800a808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a80c:	1f18      	subs	r0, r3, #4
 800a80e:	2b00      	cmp	r3, #0
 800a810:	bfbc      	itt	lt
 800a812:	580b      	ldrlt	r3, [r1, r0]
 800a814:	18c0      	addlt	r0, r0, r3
 800a816:	4770      	bx	lr

0800a818 <_init>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr

0800a824 <_fini>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	bf00      	nop
 800a828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82a:	bc08      	pop	{r3}
 800a82c:	469e      	mov	lr, r3
 800a82e:	4770      	bx	lr
