
TypeC-Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a28  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c8  080078c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d0  080078d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080078d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  2000000c  080078e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  080078e4  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177f8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c93  00000000  00000000  00037834  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  0003b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002151a  00000000  00000000  0003cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011d9e  00000000  00000000  0005e0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbf33  00000000  00000000  0006fe88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bdbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005564  00000000  00000000  0014be38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005e88 	.word	0x08005e88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005e88 	.word	0x08005e88

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800051e:	463b      	mov	r3, r7
 8000520:	2220      	movs	r2, #32
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f005 fca7 	bl	8005e78 <memset>

  /** Common config
  */
  hadc2.Instance = ADC2;
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <MX_ADC2_Init+0xc0>)
 800052c:	4a2b      	ldr	r2, [pc, #172]	; (80005dc <MX_ADC2_Init+0xc4>)
 800052e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <MX_ADC2_Init+0xc0>)
 8000532:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000536:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <MX_ADC2_Init+0xc0>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <MX_ADC2_Init+0xc0>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <MX_ADC2_Init+0xc0>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <MX_ADC2_Init+0xc0>)
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <MX_ADC2_Init+0xc0>)
 8000552:	2204      	movs	r2, #4
 8000554:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_ADC2_Init+0xc0>)
 8000558:	2200      	movs	r2, #0
 800055a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_ADC2_Init+0xc0>)
 800055e:	2200      	movs	r2, #0
 8000560:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_ADC2_Init+0xc0>)
 8000564:	2201      	movs	r2, #1
 8000566:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_ADC2_Init+0xc0>)
 800056a:	2200      	movs	r2, #0
 800056c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_ADC2_Init+0xc0>)
 8000572:	2200      	movs	r2, #0
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_ADC2_Init+0xc0>)
 8000578:	2200      	movs	r2, #0
 800057a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_ADC2_Init+0xc0>)
 800057e:	2200      	movs	r2, #0
 8000580:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_ADC2_Init+0xc0>)
 8000586:	2200      	movs	r2, #0
 8000588:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_ADC2_Init+0xc0>)
 800058c:	2200      	movs	r2, #0
 800058e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000592:	4811      	ldr	r0, [pc, #68]	; (80005d8 <MX_ADC2_Init+0xc0>)
 8000594:	f000 ff7e 	bl	8001494 <HAL_ADC_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800059e:	f000 fa57 	bl	8000a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_ADC2_Init+0xc8>)
 80005a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a6:	2306      	movs	r3, #6
 80005a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ae:	237f      	movs	r3, #127	; 0x7f
 80005b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005b2:	2304      	movs	r3, #4
 80005b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005ba:	463b      	mov	r3, r7
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_ADC2_Init+0xc0>)
 80005c0:	f001 f8f0 	bl	80017a4 <HAL_ADC_ConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80005ca:	f000 fa41 	bl	8000a50 <Error_Handler>
  }

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	50000100 	.word	0x50000100
 80005e0:	04300002 	.word	0x04300002

080005e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <HAL_ADC_MspInit+0xa4>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d13c      	bne.n	8000680 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <HAL_ADC_MspInit+0xa8>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <HAL_ADC_MspInit+0xa8>)
 800060c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <HAL_ADC_MspInit+0xa8>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_ADC_MspInit+0xa8>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a1a      	ldr	r2, [pc, #104]	; (800068c <HAL_ADC_MspInit+0xa8>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_ADC_MspInit+0xa8>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_ADC_MspInit+0xa8>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <HAL_ADC_MspInit+0xa8>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_ADC_MspInit+0xa8>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800064e:	23c3      	movs	r3, #195	; 0xc3
 8000650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000652:	2303      	movs	r3, #3
 8000654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 ffd4 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000668:	2310      	movs	r3, #16
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066c:	2303      	movs	r3, #3
 800066e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <HAL_ADC_MspInit+0xac>)
 800067c:	f001 ffc8 	bl	8002610 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	50000100 	.word	0x50000100
 800068c:	40021000 	.word	0x40021000
 8000690:	48000800 	.word	0x48000800

08000694 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2230      	movs	r2, #48	; 0x30
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 fbe9 	bl	8005e78 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_DAC1_Init+0x84>)
 80006a8:	4a1c      	ldr	r2, [pc, #112]	; (800071c <MX_DAC1_Init+0x88>)
 80006aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006ac:	481a      	ldr	r0, [pc, #104]	; (8000718 <MX_DAC1_Init+0x84>)
 80006ae:	f001 fd78 	bl	80021a2 <HAL_DAC_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006b8:	f000 f9ca 	bl	8000a50 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80006bc:	2302      	movs	r3, #2
 80006be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80006d8:	2301      	movs	r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_DAC1_Init+0x84>)
 80006e8:	f001 fd7e 	bl	80021e8 <HAL_DAC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80006f2:	f000 f9ad 	bl	8000a50 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	2210      	movs	r2, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_DAC1_Init+0x84>)
 8000702:	f001 fd71 	bl	80021e8 <HAL_DAC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 800070c:	f000 f9a0 	bl	8000a50 <Error_Handler>
  }

}
 8000710:	bf00      	nop
 8000712:	3730      	adds	r7, #48	; 0x30
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000094 	.word	0x20000094
 800071c:	50000800 	.word	0x50000800

08000720 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a15      	ldr	r2, [pc, #84]	; (8000794 <HAL_DAC_MspInit+0x74>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d124      	bne.n	800078c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_DAC_MspInit+0x78>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <HAL_DAC_MspInit+0x78>)
 8000748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_DAC_MspInit+0x78>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_DAC_MspInit+0x78>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_DAC_MspInit+0x78>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_DAC_MspInit+0x78>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000772:	2330      	movs	r3, #48	; 0x30
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000788:	f001 ff42 	bl	8002610 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	50000800 	.word	0x50000800
 8000798:	40021000 	.word	0x40021000

0800079c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <MX_GPIO_Init+0x124>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a42      	ldr	r2, [pc, #264]	; (80008c0 <MX_GPIO_Init+0x124>)
 80007b8:	f043 0320 	orr.w	r3, r3, #32
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b40      	ldr	r3, [pc, #256]	; (80008c0 <MX_GPIO_Init+0x124>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0320 	and.w	r3, r3, #32
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <MX_GPIO_Init+0x124>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a3c      	ldr	r2, [pc, #240]	; (80008c0 <MX_GPIO_Init+0x124>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b3a      	ldr	r3, [pc, #232]	; (80008c0 <MX_GPIO_Init+0x124>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <MX_GPIO_Init+0x124>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a36      	ldr	r2, [pc, #216]	; (80008c0 <MX_GPIO_Init+0x124>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MX_GPIO_Init+0x124>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <MX_GPIO_Init+0x124>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a30      	ldr	r2, [pc, #192]	; (80008c0 <MX_GPIO_Init+0x124>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <MX_GPIO_Init+0x124>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CV_Pin|CC_Pin|OLED_D1_Pin|OLED_D0_Pin
 8000812:	2201      	movs	r2, #1
 8000814:	f643 4123 	movw	r1, #15395	; 0x3c23
 8000818:	482a      	ldr	r0, [pc, #168]	; (80008c4 <MX_GPIO_Init+0x128>)
 800081a:	f002 f87b 	bl	8002914 <HAL_GPIO_WritePin>
                          |OLED_DC_Pin|OLED_RES_Pin|LED_HEART_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000824:	4828      	ldr	r0, [pc, #160]	; (80008c8 <MX_GPIO_Init+0x12c>)
 8000826:	f002 f875 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CV_Pin|CC_Pin|OLED_D1_Pin|OLED_D0_Pin
 800082a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800082e:	617b      	str	r3, [r7, #20]
                          |OLED_DC_Pin|OLED_RES_Pin|LED_HEART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4820      	ldr	r0, [pc, #128]	; (80008c4 <MX_GPIO_Init+0x128>)
 8000844:	f001 fee4 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15;
 8000848:	f24c 0304 	movw	r3, #49156	; 0xc004
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <MX_GPIO_Init+0x128>)
 800085e:	f001 fed7 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|POWER_CTRL_Pin;
 8000862:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_GPIO_Init+0x12c>)
 8000878:	f001 feca 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800087c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f001 febc 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8000898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_GPIO_Init+0x12c>)
 80008b2:	f001 fead 	bl	8002610 <HAL_GPIO_Init>

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000400 	.word	0x48000400
 80008c8:	48000800 	.word	0x48000800

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  unsigned int i=0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f000 fb74 	bl	8000fc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f853 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f7ff ff5d 	bl	800079c <MX_GPIO_Init>
  MX_ADC2_Init();
 80008e2:	f7ff fe19 	bl	8000518 <MX_ADC2_Init>
  MX_DAC1_Init();
 80008e6:	f7ff fed5 	bl	8000694 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80008ea:	f000 faa7 	bl	8000e3c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80008ee:	f000 f921 	bl	8000b34 <MX_TIM16_Init>
  MX_TIM17_Init();
 80008f2:	f000 f999 	bl	8000c28 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80008f6:	f005 fa1b 	bl	8005d30 <OLED_Init>
  HAL_TIMEx_PWMN_Start(&htim16,TIM_CHANNEL_1);
 80008fa:	2100      	movs	r1, #0
 80008fc:	481d      	ldr	r0, [pc, #116]	; (8000974 <main+0xa8>)
 80008fe:	f003 fe87 	bl	8004610 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim16,TIM_CHANNEL_1);
 8000902:	2100      	movs	r1, #0
 8000904:	481b      	ldr	r0, [pc, #108]	; (8000974 <main+0xa8>)
 8000906:	f003 f8c7 	bl	8003a98 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim17,TIM_CHANNEL_1);
 800090a:	2100      	movs	r1, #0
 800090c:	481a      	ldr	r0, [pc, #104]	; (8000978 <main+0xac>)
 800090e:	f003 fe7f 	bl	8004610 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim17,TIM_CHANNEL_1);
 8000912:	2100      	movs	r1, #0
 8000914:	4818      	ldr	r0, [pc, #96]	; (8000978 <main+0xac>)
 8000916:	f003 f8bf 	bl	8003a98 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i = (i+1)%100;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3301      	adds	r3, #1
 800091e:	4a17      	ldr	r2, [pc, #92]	; (800097c <main+0xb0>)
 8000920:	fba2 1203 	umull	r1, r2, r2, r3
 8000924:	0952      	lsrs	r2, r2, #5
 8000926:	2164      	movs	r1, #100	; 0x64
 8000928:	fb01 f202 	mul.w	r2, r1, r2
 800092c:	1a9b      	subs	r3, r3, r2
 800092e:	607b      	str	r3, [r7, #4]
	  HAL_GPIO_TogglePin(LED_HEART_GPIO_Port, LED_HEART_Pin);
 8000930:	2120      	movs	r1, #32
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <main+0xb4>)
 8000934:	f002 f806 	bl	8002944 <HAL_GPIO_TogglePin>
	  OLED_ShowNum(103,48,i,3,16,1);
 8000938:	2301      	movs	r3, #1
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	2310      	movs	r3, #16
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2303      	movs	r3, #3
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	2130      	movs	r1, #48	; 0x30
 8000946:	2067      	movs	r0, #103	; 0x67
 8000948:	f005 f980 	bl	8005c4c <OLED_ShowNum>
	  OLED_Refresh();
 800094c:	f004 ffe0 	bl	8005910 <OLED_Refresh>
	  __HAL_TIM_SetCompare(&htim16, TIM_CHANNEL_1, i*5);
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <main+0xa8>)
 8000952:	6819      	ldr	r1, [r3, #0]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	634b      	str	r3, [r1, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim17, TIM_CHANNEL_1, i*5);
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <main+0xac>)
 8000960:	6819      	ldr	r1, [r3, #0]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	4613      	mov	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	634b      	str	r3, [r1, #52]	; 0x34
	  HAL_Delay(100);
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f000 fb99 	bl	80010a4 <HAL_Delay>
	  i = (i+1)%100;
 8000972:	e7d2      	b.n	800091a <main+0x4e>
 8000974:	200000f4 	.word	0x200000f4
 8000978:	200000a8 	.word	0x200000a8
 800097c:	51eb851f 	.word	0x51eb851f
 8000980:	48000400 	.word	0x48000400

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0a4      	sub	sp, #144	; 0x90
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800098e:	2238      	movs	r2, #56	; 0x38
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f005 fa70 	bl	8005e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2244      	movs	r2, #68	; 0x44
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f005 fa62 	bl	8005e78 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f001 ffdf 	bl	8002978 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ba:	2301      	movs	r3, #1
 80009bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c8:	2303      	movs	r3, #3
 80009ca:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009d0:	2328      	movs	r3, #40	; 0x28
 80009d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009dc:	2302      	movs	r3, #2
 80009de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 f877 	bl	8002ae0 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009f8:	f000 f82a 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	230f      	movs	r3, #15
 80009fe:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2303      	movs	r3, #3
 8000a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a14:	2104      	movs	r1, #4
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fb7a 	bl	8003110 <HAL_RCC_ClockConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a22:	f000 f815 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8000a26:	f248 0301 	movw	r3, #32769	; 0x8001
 8000a2a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a30:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 fd85 	bl	8003548 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a44:	f000 f804 	bl	8000a50 <Error_Handler>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3790      	adds	r7, #144	; 0x90
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <Error_Handler+0x6>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6593      	str	r3, [r2, #88]	; 0x58
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a8e:	f002 f817 	bl	8002ac0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 fabc 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <USART1_IRQHandler+0x10>)
 8000afa:	f003 ff6f 	bl	80049dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000140 	.word	0x20000140

08000b08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <SystemInit+0x28>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <SystemInit+0x28>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SystemInit+0x28>)
 8000b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b22:	609a      	str	r2, [r3, #8]
#endif
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
 8000b4a:	615a      	str	r2, [r3, #20]
 8000b4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2234      	movs	r2, #52	; 0x34
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f005 f98f 	bl	8005e78 <memset>

  htim16.Instance = TIM16;
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000b5c:	4a31      	ldr	r2, [pc, #196]	; (8000c24 <MX_TIM16_Init+0xf0>)
 8000b5e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000b62:	2207      	movs	r2, #7
 8000b64:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000b6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b72:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b86:	4826      	ldr	r0, [pc, #152]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000b88:	f002 fece 	bl	8003928 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b92:	f7ff ff5d 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b96:	4822      	ldr	r0, [pc, #136]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000b98:	f002 ff1d 	bl	80039d6 <HAL_TIM_PWM_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000ba2:	f7ff ff55 	bl	8000a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba6:	2360      	movs	r3, #96	; 0x60
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500;
 8000baa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4814      	ldr	r0, [pc, #80]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000bce:	f003 f863 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000bd8:	f7ff ff3a 	bl	8000a50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4619      	mov	r1, r3
 8000c02:	4807      	ldr	r0, [pc, #28]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000c04:	f003 fdb8 	bl	8004778 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8000c0e:	f7ff ff1f 	bl	8000a50 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <MX_TIM16_Init+0xec>)
 8000c14:	f000 f8b6 	bl	8000d84 <HAL_TIM_MspPostInit>

}
 8000c18:	bf00      	nop
 8000c1a:	3750      	adds	r7, #80	; 0x50
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200000f4 	.word	0x200000f4
 8000c24:	40014400 	.word	0x40014400

08000c28 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	; 0x50
 8000c2c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2234      	movs	r2, #52	; 0x34
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f005 f915 	bl	8005e78 <memset>

  htim17.Instance = TIM17;
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000c50:	4a31      	ldr	r2, [pc, #196]	; (8000d18 <MX_TIM17_Init+0xf0>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7;
 8000c54:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000c56:	2207      	movs	r2, #7
 8000c58:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000c62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c66:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c7a:	4826      	ldr	r0, [pc, #152]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000c7c:	f002 fe54 	bl	8003928 <HAL_TIM_Base_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000c86:	f7ff fee3 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000c8a:	4822      	ldr	r0, [pc, #136]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000c8c:	f002 fea3 	bl	80039d6 <HAL_TIM_PWM_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000c96:	f7ff fedb 	bl	8000a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c9a:	2360      	movs	r3, #96	; 0x60
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500;
 8000c9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4814      	ldr	r0, [pc, #80]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000cc2:	f002 ffe9 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8000ccc:	f7ff fec0 	bl	8000a50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4807      	ldr	r0, [pc, #28]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000cf8:	f003 fd3e 	bl	8004778 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8000d02:	f7ff fea5 	bl	8000a50 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <MX_TIM17_Init+0xec>)
 8000d08:	f000 f83c 	bl	8000d84 <HAL_TIM_MspPostInit>

}
 8000d0c:	bf00      	nop
 8000d0e:	3750      	adds	r7, #80	; 0x50
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000a8 	.word	0x200000a8
 8000d18:	40014800 	.word	0x40014800

08000d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <HAL_TIM_Base_MspInit+0x5c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10c      	bne.n	8000d48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <HAL_TIM_Base_MspInit+0x60>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <HAL_TIM_Base_MspInit+0x60>)
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	6613      	str	r3, [r2, #96]	; 0x60
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_TIM_Base_MspInit+0x60>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000d46:	e010      	b.n	8000d6a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <HAL_TIM_Base_MspInit+0x64>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10b      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_TIM_Base_MspInit+0x60>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <HAL_TIM_Base_MspInit+0x60>)
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_TIM_Base_MspInit+0x60>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40014400 	.word	0x40014400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40014800 	.word	0x40014800

08000d84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <HAL_TIM_MspPostInit+0xa8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d11c      	bne.n	8000de0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <HAL_TIM_MspPostInit+0xac>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <HAL_TIM_MspPostInit+0xac>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_TIM_MspPostInit+0xac>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000dbe:	2350      	movs	r3, #80	; 0x50
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4816      	ldr	r0, [pc, #88]	; (8000e34 <HAL_TIM_MspPostInit+0xb0>)
 8000dda:	f001 fc19 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000dde:	e021      	b.n	8000e24 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM17)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_TIM_MspPostInit+0xb4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d11c      	bne.n	8000e24 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_TIM_MspPostInit+0xac>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_TIM_MspPostInit+0xac>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_TIM_MspPostInit+0xac>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000e02:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000e14:	2301      	movs	r3, #1
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_TIM_MspPostInit+0xb0>)
 8000e20:	f001 fbf6 	bl	8002610 <HAL_GPIO_Init>
}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40014400 	.word	0x40014400
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48000400 	.word	0x48000400
 8000e38:	40014800 	.word	0x40014800

08000e3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e42:	4a24      	ldr	r2, [pc, #144]	; (8000ed4 <MX_USART1_UART_Init+0x98>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e8a:	f003 fd3a 	bl	8004902 <HAL_MultiProcessor_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000e94:	f7ff fddc 	bl	8000a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000e9c:	f004 fbee 	bl	800567c <HAL_UARTEx_SetTxFifoThreshold>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000ea6:	f7ff fdd3 	bl	8000a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000eae:	f004 fc23 	bl	80056f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000eb8:	f7ff fdca 	bl	8000a50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_USART1_UART_Init+0x94>)
 8000ebe:	f004 fba4 	bl	800560a <HAL_UARTEx_DisableFifoMode>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000ec8:	f7ff fdc2 	bl	8000a50 <Error_Handler>
  }

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000140 	.word	0x20000140
 8000ed4:	40013800 	.word	0x40013800

08000ed8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_UART_MspInit+0x90>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d131      	bne.n	8000f5e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6613      	str	r3, [r2, #96]	; 0x60
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a15      	ldr	r2, [pc, #84]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f30:	2312      	movs	r3, #18
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f001 fb61 	bl	8002610 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2025      	movs	r0, #37	; 0x25
 8000f54:	f001 f8f1 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f58:	2025      	movs	r0, #37	; 0x25
 8000f5a:	f001 f908 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40021000 	.word	0x40021000

08000f70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f76:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f8c:	4c0b      	ldr	r4, [pc, #44]	; (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f9a:	f7ff fdb5 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f004 ff47 	bl	8005e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa2:	f7ff fc93 	bl	80008cc <main>

08000fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   r0, =_estack
 8000fa8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fb4:	080078d8 	.word	0x080078d8
  ldr r2, =_sbss
 8000fb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fbc:	20000650 	.word	0x20000650

08000fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_2_IRQHandler>

08000fc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f001 f8a9 	bl	8002124 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f80e 	bl	8000ff4 <HAL_InitTick>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	e001      	b.n	8000fe8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe4:	f7ff fd38 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe8:	79fb      	ldrb	r3, [r7, #7]

}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_InitTick+0x68>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d022      	beq.n	800104e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_InitTick+0x6c>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_InitTick+0x68>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001014:	fbb1 f3f3 	udiv	r3, r1, r3
 8001018:	fbb2 f3f3 	udiv	r3, r2, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f001 f8b4 	bl	800218a <HAL_SYSTICK_Config>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10f      	bne.n	8001048 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	d809      	bhi.n	8001042 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102e:	2200      	movs	r2, #0
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	f04f 30ff 	mov.w	r0, #4294967295
 8001036:	f001 f880 	bl	800213a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_InitTick+0x70>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	e007      	b.n	8001052 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e004      	b.n	8001052 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e001      	b.n	8001052 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000008 	.word	0x20000008
 8001060:	20000000 	.word	0x20000000
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x1c>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_IncTick+0x20>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4413      	add	r3, r2
 8001076:	4a03      	ldr	r2, [pc, #12]	; (8001084 <HAL_IncTick+0x1c>)
 8001078:	6013      	str	r3, [r2, #0]
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	200001cc 	.word	0x200001cc
 8001088:	20000008 	.word	0x20000008

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	200001cc 	.word	0x200001cc

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d004      	beq.n	80010c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_Delay+0x40>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4413      	add	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c8:	bf00      	nop
 80010ca:	f7ff ffdf 	bl	800108c <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d8f7      	bhi.n	80010ca <HAL_Delay+0x26>
  {
  }
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008

080010e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	609a      	str	r2, [r3, #8]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	609a      	str	r2, [r3, #8]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3360      	adds	r3, #96	; 0x60
 8001162:	461a      	mov	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <LL_ADC_SetOffset+0x44>)
 8001172:	4013      	ands	r3, r2
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	4313      	orrs	r3, r2
 8001180:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	03fff000 	.word	0x03fff000

08001198 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3360      	adds	r3, #96	; 0x60
 80011a6:	461a      	mov	r2, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3360      	adds	r3, #96	; 0x60
 80011d4:	461a      	mov	r2, r3
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011ee:	bf00      	nop
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b087      	sub	sp, #28
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3360      	adds	r3, #96	; 0x60
 800120a:	461a      	mov	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	431a      	orrs	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001224:	bf00      	nop
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3360      	adds	r3, #96	; 0x60
 8001240:	461a      	mov	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	431a      	orrs	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	615a      	str	r2, [r3, #20]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3330      	adds	r3, #48	; 0x30
 800129c:	461a      	mov	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	4413      	add	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	211f      	movs	r1, #31
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	0e9b      	lsrs	r3, r3, #26
 80012c4:	f003 011f 	and.w	r1, r3, #31
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	431a      	orrs	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3314      	adds	r3, #20
 80012f4:	461a      	mov	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	0e5b      	lsrs	r3, r3, #25
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	0d1b      	lsrs	r3, r3, #20
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	2107      	movs	r1, #7
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	401a      	ands	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	0d1b      	lsrs	r3, r3, #20
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001354:	43db      	mvns	r3, r3
 8001356:	401a      	ands	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0318 	and.w	r3, r3, #24
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001360:	40d9      	lsrs	r1, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	400b      	ands	r3, r1
 8001366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136a:	431a      	orrs	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	0007ffff 	.word	0x0007ffff

08001384 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6093      	str	r3, [r2, #8]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013bc:	d101      	bne.n	80013c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800140c:	d101      	bne.n	8001412 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <LL_ADC_IsEnabled+0x18>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <LL_ADC_IsEnabled+0x1a>
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	2b04      	cmp	r3, #4
 8001458:	d101      	bne.n	800145e <LL_ADC_REG_IsConversionOngoing+0x18>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b08      	cmp	r3, #8
 800147e:	d101      	bne.n	8001484 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e16b      	b.n	8001786 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff f891 	bl	80005e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff67 	bl	80013a8 <LL_ADC_IsDeepPowerDownEnabled>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff4d 	bl	8001384 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff82 	bl	80013f8 <LL_ADC_IsInternalRegulatorEnabled>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d113      	bne.n	8001522 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff66 	bl	80013d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001504:	4ba2      	ldr	r3, [pc, #648]	; (8001790 <HAL_ADC_Init+0x2fc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	099b      	lsrs	r3, r3, #6
 800150a:	4aa2      	ldr	r2, [pc, #648]	; (8001794 <HAL_ADC_Init+0x300>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001514:	e002      	b.n	800151c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3b01      	subs	r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f9      	bne.n	8001516 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff66 	bl	80013f8 <LL_ADC_IsInternalRegulatorEnabled>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10d      	bne.n	800154e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff77 	bl	8001446 <LL_ADC_REG_IsConversionOngoing>
 8001558:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 8106 	bne.w	8001774 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 8102 	bne.w	8001774 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001574:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001578:	f043 0202 	orr.w	r2, r3, #2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff4b 	bl	8001420 <LL_ADC_IsEnabled>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d111      	bne.n	80015b4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001590:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001594:	f7ff ff44 	bl	8001420 <LL_ADC_IsEnabled>
 8001598:	4604      	mov	r4, r0
 800159a:	487f      	ldr	r0, [pc, #508]	; (8001798 <HAL_ADC_Init+0x304>)
 800159c:	f7ff ff40 	bl	8001420 <LL_ADC_IsEnabled>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4323      	orrs	r3, r4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d105      	bne.n	80015b4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4619      	mov	r1, r3
 80015ae:	487b      	ldr	r0, [pc, #492]	; (800179c <HAL_ADC_Init+0x308>)
 80015b0:	f7ff fd9a 	bl	80010e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7f5b      	ldrb	r3, [r3, #29]
 80015b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d106      	bne.n	80015f0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	3b01      	subs	r3, #1
 80015e8:	045b      	lsls	r3, r3, #17
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <HAL_ADC_Init+0x30c>)
 8001614:	4013      	ands	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	69b9      	ldr	r1, [r7, #24]
 800161c:	430b      	orrs	r3, r1
 800161e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff03 	bl	8001446 <LL_ADC_REG_IsConversionOngoing>
 8001640:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff10 	bl	800146c <LL_ADC_INJ_IsConversionOngoing>
 800164c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d16d      	bne.n	8001730 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d16a      	bne.n	8001730 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800165e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001666:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001676:	f023 0302 	bic.w	r3, r3, #2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	69b9      	ldr	r1, [r7, #24]
 8001680:	430b      	orrs	r3, r1
 8001682:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d017      	beq.n	80016bc <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800169a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6911      	ldr	r1, [r2, #16]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80016ba:	e013      	b.n	80016e4 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d118      	bne.n	8001720 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800170a:	4311      	orrs	r1, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001710:	430a      	orrs	r2, r1
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0201 	orr.w	r2, r2, #1
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	e007      	b.n	8001730 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d10c      	bne.n	8001752 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f023 010f 	bic.w	r1, r3, #15
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	1e5a      	subs	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
 8001750:	e007      	b.n	8001762 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 020f 	bic.w	r2, r2, #15
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	f043 0201 	orr.w	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	65da      	str	r2, [r3, #92]	; 0x5c
 8001772:	e007      	b.n	8001784 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	f043 0210 	orr.w	r2, r3, #16
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001784:	7ffb      	ldrb	r3, [r7, #31]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop
 8001790:	20000000 	.word	0x20000000
 8001794:	053e2d63 	.word	0x053e2d63
 8001798:	50000100 	.word	0x50000100
 800179c:	50000300 	.word	0x50000300
 80017a0:	fff04007 	.word	0xfff04007

080017a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0b6      	sub	sp, #216	; 0xd8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x22>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e3c7      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x7b2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fe37 	bl	8001446 <LL_ADC_REG_IsConversionOngoing>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 83ac 	bne.w	8001f38 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	f7ff fd4d 	bl	800128c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fe25 	bl	8001446 <LL_ADC_REG_IsConversionOngoing>
 80017fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fe31 	bl	800146c <LL_ADC_INJ_IsConversionOngoing>
 800180a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800180e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 81d9 	bne.w	8001bca <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800181c:	2b00      	cmp	r3, #0
 800181e:	f040 81d4 	bne.w	8001bca <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800182a:	d10f      	bne.n	800184c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff fd54 	bl	80012e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fd0e 	bl	8001266 <LL_ADC_SetSamplingTimeCommonConfig>
 800184a:	e00e      	b.n	800186a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	461a      	mov	r2, r3
 800185a:	f7ff fd43 	bl	80012e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fcfe 	bl	8001266 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	08db      	lsrs	r3, r3, #3
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d022      	beq.n	80018d2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6919      	ldr	r1, [r3, #16]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800189c:	f7ff fc58 	bl	8001150 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6919      	ldr	r1, [r3, #16]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	461a      	mov	r2, r3
 80018ae:	f7ff fca4 	bl	80011fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	7f1b      	ldrb	r3, [r3, #28]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d102      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x124>
 80018c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c6:	e000      	b.n	80018ca <HAL_ADC_ConfigChannel+0x126>
 80018c8:	2300      	movs	r3, #0
 80018ca:	461a      	mov	r2, r3
 80018cc:	f7ff fcb0 	bl	8001230 <LL_ADC_SetOffsetSaturation>
 80018d0:	e17b      	b.n	8001bca <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc5d 	bl	8001198 <LL_ADC_GetOffsetChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10a      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x15a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fc52 	bl	8001198 <LL_ADC_GetOffsetChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	0e9b      	lsrs	r3, r3, #26
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	e01e      	b.n	800193c <HAL_ADC_ConfigChannel+0x198>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fc47 	bl	8001198 <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800191c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001920:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001924:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800192c:	2320      	movs	r3, #32
 800192e:	e004      	b.n	800193a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1b0>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0e9b      	lsrs	r3, r3, #26
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	e018      	b.n	8001986 <HAL_ADC_ConfigChannel+0x1e2>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800196c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001970:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001978:	2320      	movs	r3, #32
 800197a:	e004      	b.n	8001986 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800197c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	429a      	cmp	r2, r3
 8001988:	d106      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fc16 	bl	80011c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2101      	movs	r1, #1
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fbfa 	bl	8001198 <LL_ADC_GetOffsetChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10a      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x220>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2101      	movs	r1, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fbef 	bl	8001198 <LL_ADC_GetOffsetChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	0e9b      	lsrs	r3, r3, #26
 80019be:	f003 021f 	and.w	r2, r3, #31
 80019c2:	e01e      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x25e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fbe4 	bl	8001198 <LL_ADC_GetOffsetChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80019f2:	2320      	movs	r3, #32
 80019f4:	e004      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80019f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d105      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x276>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0e9b      	lsrs	r3, r3, #26
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	e018      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x2a8>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	e004      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001a42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d106      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	2101      	movs	r1, #1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fbb3 	bl	80011c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2102      	movs	r1, #2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fb97 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10a      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x2e6>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fb8c 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	e01e      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x324>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2102      	movs	r1, #2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fb81 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	e004      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x33c>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	e016      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x36a>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001b00:	2320      	movs	r3, #32
 8001b02:	e004      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d106      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fb52 	bl	80011c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2103      	movs	r1, #3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fb36 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10a      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x3a8>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2103      	movs	r1, #3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fb2b 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	f003 021f 	and.w	r2, r3, #31
 8001b4a:	e017      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x3d8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2103      	movs	r1, #3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fb20 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b66:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001b6e:	2320      	movs	r3, #32
 8001b70:	e003      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d105      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x3f0>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0e9b      	lsrs	r3, r3, #26
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	e011      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x414>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e003      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d106      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fafd 	bl	80011c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fc26 	bl	8001420 <LL_ADC_IsEnabled>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 8140 	bne.w	8001e5c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6819      	ldr	r1, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	461a      	mov	r2, r3
 8001bea:	f7ff fba7 	bl	800133c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	4a8f      	ldr	r2, [pc, #572]	; (8001e30 <HAL_ADC_ConfigChannel+0x68c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	f040 8131 	bne.w	8001e5c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10b      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x47e>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0e9b      	lsrs	r3, r3, #26
 8001c10:	3301      	adds	r3, #1
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	bf94      	ite	ls
 8001c1a:	2301      	movls	r3, #1
 8001c1c:	2300      	movhi	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	e019      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x4b2>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c32:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	e003      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	2b09      	cmp	r3, #9
 8001c4e:	bf94      	ite	ls
 8001c50:	2301      	movls	r3, #1
 8001c52:	2300      	movhi	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d079      	beq.n	8001d4e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d107      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x4d2>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0e9b      	lsrs	r3, r3, #26
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	069b      	lsls	r3, r3, #26
 8001c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c74:	e015      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x4fe>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c86:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e003      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	069b      	lsls	r3, r3, #26
 8001c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x51e>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0e9b      	lsrs	r3, r3, #26
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	e017      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x54e>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e003      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	ea42 0103 	orr.w	r1, r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x574>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f003 021f 	and.w	r2, r3, #31
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	051b      	lsls	r3, r3, #20
 8001d16:	e018      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x5a6>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001d30:	2320      	movs	r3, #32
 8001d32:	e003      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f003 021f 	and.w	r2, r3, #31
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	e081      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x5c6>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0e9b      	lsrs	r3, r3, #26
 8001d60:	3301      	adds	r3, #1
 8001d62:	069b      	lsls	r3, r3, #26
 8001d64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d68:	e015      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x5f2>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e003      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	069b      	lsls	r3, r3, #26
 8001d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x612>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0e9b      	lsrs	r3, r3, #26
 8001da8:	3301      	adds	r3, #1
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	e017      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x642>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	61fb      	str	r3, [r7, #28]
  return result;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e003      	b.n	8001dda <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	ea42 0103 	orr.w	r1, r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x66e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	3b1e      	subs	r3, #30
 8001e0a:	051b      	lsls	r3, r3, #20
 8001e0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e10:	e01e      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x6ac>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	613b      	str	r3, [r7, #16]
  return result;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d104      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	e006      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x698>
 8001e2e:	bf00      	nop
 8001e30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1e      	subs	r3, #30
 8001e4a:	051b      	lsls	r3, r3, #20
 8001e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e50:	430b      	orrs	r3, r1
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	6892      	ldr	r2, [r2, #8]
 8001e56:	4619      	mov	r1, r3
 8001e58:	f7ff fa44 	bl	80012e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d070      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e68:	483e      	ldr	r0, [pc, #248]	; (8001f64 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e6a:	f7ff f963 	bl	8001134 <LL_ADC_GetCommonPathInternalCh>
 8001e6e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a3c      	ldr	r2, [pc, #240]	; (8001f68 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_ADC_ConfigChannel+0x6e2>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a3a      	ldr	r2, [pc, #232]	; (8001f6c <HAL_ADC_ConfigChannel+0x7c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d126      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d120      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e9a:	d156      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	482f      	ldr	r0, [pc, #188]	; (8001f64 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ea8:	f7ff f931 	bl	800110e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001eac:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_ADC_ConfigChannel+0x7cc>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	4a30      	ldr	r2, [pc, #192]	; (8001f74 <HAL_ADC_ConfigChannel+0x7d0>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	099a      	lsrs	r2, r3, #6
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed2:	e03a      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_ADC_ConfigChannel+0x7d4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d113      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x762>
 8001ede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <HAL_ADC_ConfigChannel+0x7d8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d02a      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efc:	4619      	mov	r1, r3
 8001efe:	4819      	ldr	r0, [pc, #100]	; (8001f64 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f00:	f7ff f905 	bl	800110e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f04:	e021      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d11c      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d116      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <HAL_ADC_ConfigChannel+0x7d8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d011      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f32:	f7ff f8ec 	bl	800110e <LL_ADC_SetCommonPathInternalCh>
 8001f36:	e008      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	f043 0220 	orr.w	r2, r3, #32
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	37d8      	adds	r7, #216	; 0xd8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	80080000 	.word	0x80080000
 8001f64:	50000300 	.word	0x50000300
 8001f68:	c3210000 	.word	0xc3210000
 8001f6c:	90c00010 	.word	0x90c00010
 8001f70:	20000000 	.word	0x20000000
 8001f74:	053e2d63 	.word	0x053e2d63
 8001f78:	c7520000 	.word	0xc7520000
 8001f7c:	50000100 	.word	0x50000100
 8001f80:	cb840000 	.word	0xcb840000

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
         );
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f0:	d301      	bcc.n	80020f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00f      	b.n	8002116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <SysTick_Config+0x40>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fe:	210f      	movs	r1, #15
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f7ff ff8e 	bl	8002024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SysTick_Config+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SysTick_Config+0x40>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff29 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff40 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff90 	bl	8002078 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5f 	bl	8002024 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff33 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffa4 	bl	80020e0 <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e014      	b.n	80021de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	791b      	ldrb	r3, [r3, #4]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7fe faab 	bl	8000720 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	795b      	ldrb	r3, [r3, #5]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_DAC_ConfigChannel+0x1c>
 8002200:	2302      	movs	r3, #2
 8002202:	e194      	b.n	800252e <HAL_DAC_ConfigChannel+0x346>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2202      	movs	r2, #2
 800220e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d174      	bne.n	8002302 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d137      	bne.n	800228e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800221e:	f7fe ff35 	bl	800108c <HAL_GetTick>
 8002222:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002224:	e011      	b.n	800224a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002226:	f7fe ff31 	bl	800108c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d90a      	bls.n	800224a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f043 0208 	orr.w	r2, r3, #8
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2203      	movs	r2, #3
 8002244:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e171      	b.n	800252e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e6      	bne.n	8002226 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002258:	2001      	movs	r0, #1
 800225a:	f7fe ff23 	bl	80010a4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
 8002268:	e01e      	b.n	80022a8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800226a:	f7fe ff0f 	bl	800108c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d90a      	bls.n	800228e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f043 0208 	orr.w	r2, r3, #8
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2203      	movs	r2, #3
 8002288:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e14f      	b.n	800252e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002294:	2b00      	cmp	r3, #0
 8002296:	dbe8      	blt.n	800226a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002298:	2001      	movs	r0, #1
 800229a:	f7fe ff03 	bl	80010a4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	ea02 0103 	and.w	r1, r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	409a      	lsls	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	21ff      	movs	r1, #255	; 0xff
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	ea02 0103 	and.w	r1, r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	409a      	lsls	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d11d      	bne.n	8002346 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	221f      	movs	r2, #31
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002322:	4013      	ands	r3, r2
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233a:	4313      	orrs	r3, r2
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002344:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2207      	movs	r2, #7
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235e:	4013      	ands	r3, r2
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
 8002372:	e011      	b.n	8002398 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002380:	2301      	movs	r3, #1
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	e008      	b.n	8002398 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800238e:	2301      	movs	r3, #1
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	e001      	b.n	8002398 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	6a3a      	ldr	r2, [r7, #32]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	4013      	ands	r3, r2
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	791b      	ldrb	r3, [r3, #4]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d102      	bne.n	80023cc <HAL_DAC_ConfigChannel+0x1e4>
 80023c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ca:	e000      	b.n	80023ce <HAL_DAC_ConfigChannel+0x1e6>
 80023cc:	2300      	movs	r3, #0
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e6:	4013      	ands	r3, r2
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	795b      	ldrb	r3, [r3, #5]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <HAL_DAC_ConfigChannel+0x210>
 80023f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f6:	e000      	b.n	80023fa <HAL_DAC_ConfigChannel+0x212>
 80023f8:	2300      	movs	r3, #0
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d114      	bne.n	800243a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002410:	f001 f81c 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8002414:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	4a47      	ldr	r2, [pc, #284]	; (8002538 <HAL_DAC_ConfigChannel+0x350>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d904      	bls.n	8002428 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
 8002426:	e00d      	b.n	8002444 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4a44      	ldr	r2, [pc, #272]	; (800253c <HAL_DAC_ConfigChannel+0x354>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d909      	bls.n	8002444 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	e004      	b.n	8002444 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002440:	4313      	orrs	r3, r2
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002452:	4313      	orrs	r3, r2
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	400a      	ands	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002496:	4013      	ands	r3, r2
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ae:	4313      	orrs	r3, r2
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	22c0      	movs	r2, #192	; 0xc0
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43da      	mvns	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	400a      	ands	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	ea02 0103 	and.w	r1, r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	09896800 	.word	0x09896800
 800253c:	04c4b400 	.word	0x04c4b400

08002540 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d00d      	beq.n	8002574 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2204      	movs	r2, #4
 800255c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e047      	b.n	8002604 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 020e 	bic.w	r2, r2, #14
 8002582:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f202 	lsl.w	r2, r1, r2
 80025b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
    }
  }
  return status;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800261e:	e15a      	b.n	80028d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2101      	movs	r1, #1
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 814c 	beq.w	80028d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d00b      	beq.n	8002658 <HAL_GPIO_Init+0x48>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d007      	beq.n	8002658 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800264c:	2b11      	cmp	r3, #17
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b12      	cmp	r3, #18
 8002656:	d130      	bne.n	80026ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800268e:	2201      	movs	r2, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 0201 	and.w	r2, r3, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0xea>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b12      	cmp	r3, #18
 80026f8:	d123      	bne.n	8002742 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002706:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	08da      	lsrs	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	6939      	ldr	r1, [r7, #16]
 800273e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0203 	and.w	r2, r3, #3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80a6 	beq.w	80028d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002784:	4b5b      	ldr	r3, [pc, #364]	; (80028f4 <HAL_GPIO_Init+0x2e4>)
 8002786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002788:	4a5a      	ldr	r2, [pc, #360]	; (80028f4 <HAL_GPIO_Init+0x2e4>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6613      	str	r3, [r2, #96]	; 0x60
 8002790:	4b58      	ldr	r3, [pc, #352]	; (80028f4 <HAL_GPIO_Init+0x2e4>)
 8002792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279c:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <HAL_GPIO_Init+0x2e8>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	220f      	movs	r2, #15
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027c6:	d01f      	beq.n	8002808 <HAL_GPIO_Init+0x1f8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a4c      	ldr	r2, [pc, #304]	; (80028fc <HAL_GPIO_Init+0x2ec>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d019      	beq.n	8002804 <HAL_GPIO_Init+0x1f4>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a4b      	ldr	r2, [pc, #300]	; (8002900 <HAL_GPIO_Init+0x2f0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <HAL_GPIO_Init+0x1f0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a4a      	ldr	r2, [pc, #296]	; (8002904 <HAL_GPIO_Init+0x2f4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00d      	beq.n	80027fc <HAL_GPIO_Init+0x1ec>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a49      	ldr	r2, [pc, #292]	; (8002908 <HAL_GPIO_Init+0x2f8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <HAL_GPIO_Init+0x1e8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a48      	ldr	r2, [pc, #288]	; (800290c <HAL_GPIO_Init+0x2fc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_GPIO_Init+0x1e4>
 80027f0:	2305      	movs	r3, #5
 80027f2:	e00a      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 80027f4:	2306      	movs	r3, #6
 80027f6:	e008      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 80027f8:	2304      	movs	r3, #4
 80027fa:	e006      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 80027fc:	2303      	movs	r3, #3
 80027fe:	e004      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 8002800:	2302      	movs	r3, #2
 8002802:	e002      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 8002808:	2300      	movs	r3, #0
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	f002 0203 	and.w	r2, r2, #3
 8002810:	0092      	lsls	r2, r2, #2
 8002812:	4093      	lsls	r3, r2
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281a:	4937      	ldr	r1, [pc, #220]	; (80028f8 <HAL_GPIO_Init+0x2e8>)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002828:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_GPIO_Init+0x300>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800284c:	4a30      	ldr	r2, [pc, #192]	; (8002910 <HAL_GPIO_Init+0x300>)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002852:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <HAL_GPIO_Init+0x300>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002876:	4a26      	ldr	r2, [pc, #152]	; (8002910 <HAL_GPIO_Init+0x300>)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800287c:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_GPIO_Init+0x300>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <HAL_GPIO_Init+0x300>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <HAL_GPIO_Init+0x300>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ca:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HAL_GPIO_Init+0x300>)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3301      	adds	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f47f ae9d 	bne.w	8002620 <HAL_GPIO_Init+0x10>
  }
}
 80028e6:	bf00      	nop
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40010000 	.word	0x40010000
 80028fc:	48000400 	.word	0x48000400
 8002900:	48000800 	.word	0x48000800
 8002904:	48000c00 	.word	0x48000c00
 8002908:	48001000 	.word	0x48001000
 800290c:	48001400 	.word	0x48001400
 8002910:	40010400 	.word	0x40010400

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002930:	e002      	b.n	8002938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	041a      	lsls	r2, r3, #16
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	43d9      	mvns	r1, r3
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	400b      	ands	r3, r1
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d141      	bne.n	8002a0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002986:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d131      	bne.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002994:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299a:	4a46      	ldr	r2, [pc, #280]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a4:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029ac:	4a41      	ldr	r2, [pc, #260]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2232      	movs	r2, #50	; 0x32
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	4a3f      	ldr	r2, [pc, #252]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	0c9b      	lsrs	r3, r3, #18
 80029c6:	3301      	adds	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ca:	e002      	b.n	80029d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d2:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029de:	d102      	bne.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f2      	bne.n	80029cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f2:	d158      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e057      	b.n	8002aa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029fe:	4a2d      	ldr	r2, [pc, #180]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a08:	e04d      	b.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a10:	d141      	bne.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a12:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d131      	bne.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a20:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a26:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a38:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2232      	movs	r2, #50	; 0x32
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a56:	e002      	b.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d102      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f2      	bne.n	8002a58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7e:	d112      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e011      	b.n	8002aa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a94:	e007      	b.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	431bde83 	.word	0x431bde83

08002ac0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ace:	6093      	str	r3, [r2, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40007000 	.word	0x40007000

08002ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e308      	b.n	8003104 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d075      	beq.n	8002bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afe:	4ba3      	ldr	r3, [pc, #652]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b08:	4ba0      	ldr	r3, [pc, #640]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d102      	bne.n	8002b1e <HAL_RCC_OscConfig+0x3e>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d002      	beq.n	8002b24 <HAL_RCC_OscConfig+0x44>
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d10b      	bne.n	8002b3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	4b99      	ldr	r3, [pc, #612]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d05b      	beq.n	8002be8 <HAL_RCC_OscConfig+0x108>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d157      	bne.n	8002be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e2e3      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b44:	d106      	bne.n	8002b54 <HAL_RCC_OscConfig+0x74>
 8002b46:	4b91      	ldr	r3, [pc, #580]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a90      	ldr	r2, [pc, #576]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	e01d      	b.n	8002b90 <HAL_RCC_OscConfig+0xb0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x98>
 8002b5e:	4b8b      	ldr	r3, [pc, #556]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a8a      	ldr	r2, [pc, #552]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b88      	ldr	r3, [pc, #544]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a87      	ldr	r2, [pc, #540]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e00b      	b.n	8002b90 <HAL_RCC_OscConfig+0xb0>
 8002b78:	4b84      	ldr	r3, [pc, #528]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a83      	ldr	r2, [pc, #524]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a80      	ldr	r2, [pc, #512]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fa78 	bl	800108c <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fa74 	bl	800108c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e2a8      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb2:	4b76      	ldr	r3, [pc, #472]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xc0>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fa64 	bl	800108c <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fa60 	bl	800108c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e294      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bda:	4b6c      	ldr	r3, [pc, #432]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xe8>
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d075      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf6:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c00:	4b62      	ldr	r3, [pc, #392]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	d102      	bne.n	8002c16 <HAL_RCC_OscConfig+0x136>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_OscConfig+0x13c>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d11f      	bne.n	8002c5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1c:	4b5b      	ldr	r3, [pc, #364]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x154>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e267      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b55      	ldr	r3, [pc, #340]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	4952      	ldr	r1, [pc, #328]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c48:	4b51      	ldr	r3, [pc, #324]	; (8002d90 <HAL_RCC_OscConfig+0x2b0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f9d1 	bl	8000ff4 <HAL_InitTick>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d043      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e253      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d023      	beq.n	8002cac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c64:	4b49      	ldr	r3, [pc, #292]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a48      	ldr	r2, [pc, #288]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe fa0c 	bl	800108c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c78:	f7fe fa08 	bl	800108c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e23c      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c8a:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	061b      	lsls	r3, r3, #24
 8002ca4:	4939      	ldr	r1, [pc, #228]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
 8002caa:	e01a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cac:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a36      	ldr	r2, [pc, #216]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe f9e8 	bl	800108c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7fe f9e4 	bl	800108c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e218      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd2:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x1e0>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d03c      	beq.n	8002d68 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfc:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe f9c1 	bl	800108c <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0e:	f7fe f9bd 	bl	800108c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e1f1      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d20:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0ef      	beq.n	8002d0e <HAL_RCC_OscConfig+0x22e>
 8002d2e:	e01b      	b.n	8002d68 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d36:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe f9a4 	bl	800108c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fe f9a0 	bl	800108c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1d4      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ef      	bne.n	8002d48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80ab 	beq.w	8002ecc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2300      	movs	r3, #0
 8002d78:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_RCC_OscConfig+0x2b4>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e005      	b.n	8002d96 <HAL_RCC_OscConfig+0x2b6>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	20000004 	.word	0x20000004
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	4baf      	ldr	r3, [pc, #700]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	4aae      	ldr	r2, [pc, #696]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6593      	str	r3, [r2, #88]	; 0x58
 8002da6:	4bac      	ldr	r3, [pc, #688]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002db2:	2301      	movs	r3, #1
 8002db4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db6:	4ba9      	ldr	r3, [pc, #676]	; (800305c <HAL_RCC_OscConfig+0x57c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d118      	bne.n	8002df4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc2:	4ba6      	ldr	r3, [pc, #664]	; (800305c <HAL_RCC_OscConfig+0x57c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4aa5      	ldr	r2, [pc, #660]	; (800305c <HAL_RCC_OscConfig+0x57c>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dce:	f7fe f95d 	bl	800108c <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd6:	f7fe f959 	bl	800108c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e18d      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de8:	4b9c      	ldr	r3, [pc, #624]	; (800305c <HAL_RCC_OscConfig+0x57c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d108      	bne.n	8002e0e <HAL_RCC_OscConfig+0x32e>
 8002dfc:	4b96      	ldr	r3, [pc, #600]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	4a95      	ldr	r2, [pc, #596]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e0c:	e024      	b.n	8002e58 <HAL_RCC_OscConfig+0x378>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d110      	bne.n	8002e38 <HAL_RCC_OscConfig+0x358>
 8002e16:	4b90      	ldr	r3, [pc, #576]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	4a8e      	ldr	r2, [pc, #568]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e26:	4b8c      	ldr	r3, [pc, #560]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	4a8a      	ldr	r2, [pc, #552]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e36:	e00f      	b.n	8002e58 <HAL_RCC_OscConfig+0x378>
 8002e38:	4b87      	ldr	r3, [pc, #540]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	4a86      	ldr	r2, [pc, #536]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e48:	4b83      	ldr	r3, [pc, #524]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	4a82      	ldr	r2, [pc, #520]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d016      	beq.n	8002e8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe f914 	bl	800108c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7fe f910 	bl	800108c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e142      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7e:	4b76      	ldr	r3, [pc, #472]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ed      	beq.n	8002e68 <HAL_RCC_OscConfig+0x388>
 8002e8c:	e015      	b.n	8002eba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fe f8fd 	bl	800108c <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe f8f9 	bl	800108c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e12b      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eac:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1ed      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec0:	4b65      	ldr	r3, [pc, #404]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	4a64      	ldr	r2, [pc, #400]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d03c      	beq.n	8002f52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ee0:	4b5d      	ldr	r3, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee6:	4a5c      	ldr	r2, [pc, #368]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe f8cc 	bl	800108c <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef8:	f7fe f8c8 	bl	800108c <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0fc      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f0a:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ef      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x418>
 8002f18:	e01b      	b.n	8002f52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f1a:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f20:	4a4d      	ldr	r2, [pc, #308]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fe f8af 	bl	800108c <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f32:	f7fe f8ab 	bl	800108c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0df      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f44:	4b44      	ldr	r3, [pc, #272]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ef      	bne.n	8002f32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80d3 	beq.w	8003102 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f5c:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	f000 808d 	beq.w	8003084 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d15a      	bne.n	8003028 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b39      	ldr	r3, [pc, #228]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a38      	ldr	r2, [pc, #224]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002f78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe f885 	bl	800108c <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe f881 	bl	800108c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0b5      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f98:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCC_OscConfig+0x580>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6a11      	ldr	r1, [r2, #32]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fb4:	3a01      	subs	r2, #1
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	4311      	orrs	r1, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002fbe:	0212      	lsls	r2, r2, #8
 8002fc0:	4311      	orrs	r1, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fc6:	0852      	lsrs	r2, r2, #1
 8002fc8:	3a01      	subs	r2, #1
 8002fca:	0552      	lsls	r2, r2, #21
 8002fcc:	4311      	orrs	r1, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fd2:	0852      	lsrs	r2, r2, #1
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	0652      	lsls	r2, r2, #25
 8002fd8:	4311      	orrs	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fde:	06d2      	lsls	r2, r2, #27
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	491d      	ldr	r1, [pc, #116]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a17      	ldr	r2, [pc, #92]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe f844 	bl	800108c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe f840 	bl	800108c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e074      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x528>
 8003026:	e06c      	b.n	8003102 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 800302e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003032:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4a07      	ldr	r2, [pc, #28]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_RCC_OscConfig+0x578>)
 8003046:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe f81c 	bl	800108c <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003056:	e00e      	b.n	8003076 <HAL_RCC_OscConfig+0x596>
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe f812 	bl	800108c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e046      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003076:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_RCC_OscConfig+0x62c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x584>
 8003082:	e03e      	b.n	8003102 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e039      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003090:	4b1e      	ldr	r3, [pc, #120]	; (800310c <HAL_RCC_OscConfig+0x62c>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f003 0203 	and.w	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d12c      	bne.n	80030fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	3b01      	subs	r3, #1
 80030b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d123      	bne.n	80030fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d11b      	bne.n	80030fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d113      	bne.n	80030fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	3b01      	subs	r3, #1
 80030e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	3b01      	subs	r3, #1
 80030f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000

08003110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e11e      	b.n	8003366 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b91      	ldr	r3, [pc, #580]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d910      	bls.n	8003158 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b8e      	ldr	r3, [pc, #568]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 020f 	bic.w	r2, r3, #15
 800313e:	498c      	ldr	r1, [pc, #560]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b8a      	ldr	r3, [pc, #552]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e106      	b.n	8003366 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d073      	beq.n	800324c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d129      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316c:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0f4      	b.n	8003366 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800317c:	f000 f99e 	bl	80034bc <RCC_GetSysClockFreqFromPLLSource>
 8003180:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4a7c      	ldr	r2, [pc, #496]	; (8003378 <HAL_RCC_ClockConfig+0x268>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d93f      	bls.n	800320a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800318a:	4b7a      	ldr	r3, [pc, #488]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d033      	beq.n	800320a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d12f      	bne.n	800320a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b2:	4a70      	ldr	r2, [pc, #448]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 80031b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e024      	b.n	800320a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c8:	4b6a      	ldr	r3, [pc, #424]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d109      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0c6      	b.n	8003366 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0be      	b.n	8003366 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80031e8:	f000 f8ce 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4a61      	ldr	r2, [pc, #388]	; (8003378 <HAL_RCC_ClockConfig+0x268>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d909      	bls.n	800320a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031f6:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031fe:	4a5d      	ldr	r2, [pc, #372]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 8003200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003204:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800320a:	4b5a      	ldr	r3, [pc, #360]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f023 0203 	bic.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4957      	ldr	r1, [pc, #348]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800321c:	f7fd ff36 	bl	800108c <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	e00a      	b.n	800323a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003224:	f7fd ff32 	bl	800108c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e095      	b.n	8003366 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	4b4e      	ldr	r3, [pc, #312]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 020c 	and.w	r2, r3, #12
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	429a      	cmp	r2, r3
 800324a:	d1eb      	bne.n	8003224 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d023      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003264:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a42      	ldr	r2, [pc, #264]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 800326a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800326e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800327c:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003284:	4a3b      	ldr	r2, [pc, #236]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 8003286:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800328a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328c:	4b39      	ldr	r3, [pc, #228]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4936      	ldr	r1, [pc, #216]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
 800329e:	e008      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b80      	cmp	r3, #128	; 0x80
 80032a4:	d105      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032a6:	4b33      	ldr	r3, [pc, #204]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	4a32      	ldr	r2, [pc, #200]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 80032ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032b2:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d21d      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c0:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f023 020f 	bic.w	r2, r3, #15
 80032c8:	4929      	ldr	r1, [pc, #164]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032d0:	f7fd fedc 	bl	800108c <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fd fed8 	bl	800108c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e03b      	b.n	8003366 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_RCC_ClockConfig+0x260>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1ed      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4917      	ldr	r1, [pc, #92]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	490f      	ldr	r1, [pc, #60]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800333a:	f000 f825 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 800333e:	4601      	mov	r1, r0
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <HAL_RCC_ClockConfig+0x264>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	4a0c      	ldr	r2, [pc, #48]	; (800337c <HAL_RCC_ClockConfig+0x26c>)
 800334c:	5cd3      	ldrb	r3, [r2, r3]
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	fa21 f303 	lsr.w	r3, r1, r3
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_RCC_ClockConfig+0x270>)
 8003358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_ClockConfig+0x274>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd fe48 	bl	8000ff4 <HAL_InitTick>
 8003364:	4603      	mov	r3, r0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40022000 	.word	0x40022000
 8003374:	40021000 	.word	0x40021000
 8003378:	04c4b400 	.word	0x04c4b400
 800337c:	08005eb0 	.word	0x08005eb0
 8003380:	20000000 	.word	0x20000000
 8003384:	20000004 	.word	0x20000004

08003388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d102      	bne.n	80033a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800339a:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <HAL_RCC_GetSysClockFreq+0xbc>)
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	e047      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033a0:	4b27      	ldr	r3, [pc, #156]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	e03e      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033b2:	4b23      	ldr	r3, [pc, #140]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d136      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3301      	adds	r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d10c      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033dc:	4a1a      	ldr	r2, [pc, #104]	; (8003448 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033e6:	68d2      	ldr	r2, [r2, #12]
 80033e8:	0a12      	lsrs	r2, r2, #8
 80033ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	617b      	str	r3, [r7, #20]
      break;
 80033f4:	e00c      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033f6:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	4a10      	ldr	r2, [pc, #64]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003400:	68d2      	ldr	r2, [r2, #12]
 8003402:	0a12      	lsrs	r2, r2, #8
 8003404:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]
      break;
 800340e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	0e5b      	lsrs	r3, r3, #25
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	3301      	adds	r3, #1
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e001      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003430:	693b      	ldr	r3, [r7, #16]
}
 8003432:	4618      	mov	r0, r3
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	00f42400 	.word	0x00f42400
 8003448:	007a1200 	.word	0x007a1200

0800344c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCC_GetHCLKFreq+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000000 	.word	0x20000000

08003464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003468:	f7ff fff0 	bl	800344c <HAL_RCC_GetHCLKFreq>
 800346c:	4601      	mov	r1, r0
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0a1b      	lsrs	r3, r3, #8
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <HAL_RCC_GetPCLK1Freq+0x28>)
 800347a:	5cd3      	ldrb	r3, [r2, r3]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	08005ec0 	.word	0x08005ec0

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003494:	f7ff ffda 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8003498:	4601      	mov	r1, r0
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0adb      	lsrs	r3, r3, #11
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	08005ec0 	.word	0x08005ec0

080034bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	3301      	adds	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d10c      	bne.n	80034fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034e0:	4a17      	ldr	r2, [pc, #92]	; (8003540 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	4a14      	ldr	r2, [pc, #80]	; (800353c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034ea:	68d2      	ldr	r2, [r2, #12]
 80034ec:	0a12      	lsrs	r2, r2, #8
 80034ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	617b      	str	r3, [r7, #20]
    break;
 80034f8:	e00c      	b.n	8003514 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034fa:	4a12      	ldr	r2, [pc, #72]	; (8003544 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	4a0e      	ldr	r2, [pc, #56]	; (800353c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003504:	68d2      	ldr	r2, [r2, #12]
 8003506:	0a12      	lsrs	r2, r2, #8
 8003508:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800350c:	fb02 f303 	mul.w	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]
    break;
 8003512:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	0e5b      	lsrs	r3, r3, #25
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	3301      	adds	r3, #1
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800352e:	687b      	ldr	r3, [r7, #4]
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40021000 	.word	0x40021000
 8003540:	007a1200 	.word	0x007a1200
 8003544:	00f42400 	.word	0x00f42400

08003548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003550:	2300      	movs	r3, #0
 8003552:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003554:	2300      	movs	r3, #0
 8003556:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8098 	beq.w	8003696 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356a:	4b43      	ldr	r3, [pc, #268]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	4b40      	ldr	r3, [pc, #256]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	4a3f      	ldr	r2, [pc, #252]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6593      	str	r3, [r2, #88]	; 0x58
 8003582:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003592:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a39      	ldr	r2, [pc, #228]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800359e:	f7fd fd75 	bl	800108c <HAL_GetTick>
 80035a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035a4:	e009      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a6:	f7fd fd71 	bl	800108c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d902      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	74fb      	strb	r3, [r7, #19]
        break;
 80035b8:	e005      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ba:	4b30      	ldr	r3, [pc, #192]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0ef      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d159      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035cc:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01e      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d019      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035e8:	4b23      	ldr	r3, [pc, #140]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035f4:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003604:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003614:	4a18      	ldr	r2, [pc, #96]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fd fd31 	bl	800108c <HAL_GetTick>
 800362a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362c:	e00b      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fd fd2d 	bl	800108c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d902      	bls.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	74fb      	strb	r3, [r7, #19]
            break;
 8003644:	e006      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ec      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	4903      	ldr	r1, [pc, #12]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003670:	e008      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	74bb      	strb	r3, [r7, #18]
 8003676:	e005      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003678:	40021000 	.word	0x40021000
 800367c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003684:	7c7b      	ldrb	r3, [r7, #17]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d105      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368a:	4ba6      	ldr	r3, [pc, #664]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	4aa5      	ldr	r2, [pc, #660]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003694:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a2:	4ba0      	ldr	r3, [pc, #640]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f023 0203 	bic.w	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	499c      	ldr	r1, [pc, #624]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036c4:	4b97      	ldr	r3, [pc, #604]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f023 020c 	bic.w	r2, r3, #12
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4994      	ldr	r1, [pc, #592]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036e6:	4b8f      	ldr	r3, [pc, #572]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	498b      	ldr	r1, [pc, #556]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003708:	4b86      	ldr	r3, [pc, #536]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	4983      	ldr	r1, [pc, #524]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800372a:	4b7e      	ldr	r3, [pc, #504]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	497a      	ldr	r1, [pc, #488]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800374c:	4b75      	ldr	r3, [pc, #468]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	4972      	ldr	r1, [pc, #456]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800376e:	4b6d      	ldr	r3, [pc, #436]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	4969      	ldr	r1, [pc, #420]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003790:	4b64      	ldr	r3, [pc, #400]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	4961      	ldr	r1, [pc, #388]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037b2:	4b5c      	ldr	r3, [pc, #368]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	4958      	ldr	r1, [pc, #352]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d015      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037d4:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	4950      	ldr	r1, [pc, #320]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f2:	d105      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f4:	4b4b      	ldr	r3, [pc, #300]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a4a      	ldr	r2, [pc, #296]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800380c:	4b45      	ldr	r3, [pc, #276]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	4942      	ldr	r1, [pc, #264]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382a:	d105      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800382c:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003836:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d015      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003844:	4b37      	ldr	r3, [pc, #220]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4934      	ldr	r1, [pc, #208]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003862:	d105      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003864:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a2e      	ldr	r2, [pc, #184]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800386e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d015      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800387c:	4b29      	ldr	r3, [pc, #164]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388a:	4926      	ldr	r1, [pc, #152]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800389a:	d105      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800389c:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a20      	ldr	r2, [pc, #128]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	4918      	ldr	r1, [pc, #96]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d2:	d105      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d015      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	490a      	ldr	r1, [pc, #40]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800390a:	d105      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003916:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003918:	7cbb      	ldrb	r3, [r7, #18]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000

08003928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e049      	b.n	80039ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd f9e4 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f000 faa6 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e049      	b.n	8003a7c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d106      	bne.n	8003a02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f841 	bl	8003a84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f000 fa4f 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <HAL_TIM_PWM_Start+0x24>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e03c      	b.n	8003b36 <HAL_TIM_PWM_Start+0x9e>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d109      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0x3e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	bf14      	ite	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	2300      	moveq	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	e02f      	b.n	8003b36 <HAL_TIM_PWM_Start+0x9e>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d109      	bne.n	8003af0 <HAL_TIM_PWM_Start+0x58>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e022      	b.n	8003b36 <HAL_TIM_PWM_Start+0x9e>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b0c      	cmp	r3, #12
 8003af4:	d109      	bne.n	8003b0a <HAL_TIM_PWM_Start+0x72>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	e015      	b.n	8003b36 <HAL_TIM_PWM_Start+0x9e>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d109      	bne.n	8003b24 <HAL_TIM_PWM_Start+0x8c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	bf14      	ite	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	2300      	moveq	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e008      	b.n	8003b36 <HAL_TIM_PWM_Start+0x9e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e097      	b.n	8003c6e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d104      	bne.n	8003b4e <HAL_TIM_PWM_Start+0xb6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b4c:	e023      	b.n	8003b96 <HAL_TIM_PWM_Start+0xfe>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d104      	bne.n	8003b5e <HAL_TIM_PWM_Start+0xc6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b5c:	e01b      	b.n	8003b96 <HAL_TIM_PWM_Start+0xfe>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_PWM_Start+0xd6>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b6c:	e013      	b.n	8003b96 <HAL_TIM_PWM_Start+0xfe>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Start+0xe6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b7c:	e00b      	b.n	8003b96 <HAL_TIM_PWM_Start+0xfe>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d104      	bne.n	8003b8e <HAL_TIM_PWM_Start+0xf6>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b8c:	e003      	b.n	8003b96 <HAL_TIM_PWM_Start+0xfe>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2202      	movs	r2, #2
 8003b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	6839      	ldr	r1, [r7, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fd10 	bl	80045c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a33      	ldr	r2, [pc, #204]	; (8003c78 <HAL_TIM_PWM_Start+0x1e0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x13e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <HAL_TIM_PWM_Start+0x1e4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x13e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a30      	ldr	r2, [pc, #192]	; (8003c80 <HAL_TIM_PWM_Start+0x1e8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x13e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	; (8003c84 <HAL_TIM_PWM_Start+0x1ec>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x13e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2d      	ldr	r2, [pc, #180]	; (8003c88 <HAL_TIM_PWM_Start+0x1f0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_TIM_PWM_Start+0x142>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_TIM_PWM_Start+0x144>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <HAL_TIM_PWM_Start+0x1e0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d018      	beq.n	8003c2c <HAL_TIM_PWM_Start+0x194>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c02:	d013      	beq.n	8003c2c <HAL_TIM_PWM_Start+0x194>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <HAL_TIM_PWM_Start+0x1f4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00e      	beq.n	8003c2c <HAL_TIM_PWM_Start+0x194>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <HAL_TIM_PWM_Start+0x1f8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d009      	beq.n	8003c2c <HAL_TIM_PWM_Start+0x194>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_TIM_PWM_Start+0x1e4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_TIM_PWM_Start+0x194>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <HAL_TIM_PWM_Start+0x1e8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d115      	bne.n	8003c58 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <HAL_TIM_PWM_Start+0x1fc>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d015      	beq.n	8003c6a <HAL_TIM_PWM_Start+0x1d2>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d011      	beq.n	8003c6a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c56:	e008      	b.n	8003c6a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e000      	b.n	8003c6c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40013400 	.word	0x40013400
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40014400 	.word	0x40014400
 8003c88:	40014800 	.word	0x40014800
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	00010007 	.word	0x00010007

08003c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e0fd      	b.n	8003eae <HAL_TIM_PWM_ConfigChannel+0x216>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b14      	cmp	r3, #20
 8003cbe:	f200 80f0 	bhi.w	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003ea3 	.word	0x08003ea3
 8003cd0:	08003ea3 	.word	0x08003ea3
 8003cd4:	08003ea3 	.word	0x08003ea3
 8003cd8:	08003d5d 	.word	0x08003d5d
 8003cdc:	08003ea3 	.word	0x08003ea3
 8003ce0:	08003ea3 	.word	0x08003ea3
 8003ce4:	08003ea3 	.word	0x08003ea3
 8003ce8:	08003d9f 	.word	0x08003d9f
 8003cec:	08003ea3 	.word	0x08003ea3
 8003cf0:	08003ea3 	.word	0x08003ea3
 8003cf4:	08003ea3 	.word	0x08003ea3
 8003cf8:	08003ddf 	.word	0x08003ddf
 8003cfc:	08003ea3 	.word	0x08003ea3
 8003d00:	08003ea3 	.word	0x08003ea3
 8003d04:	08003ea3 	.word	0x08003ea3
 8003d08:	08003e21 	.word	0x08003e21
 8003d0c:	08003ea3 	.word	0x08003ea3
 8003d10:	08003ea3 	.word	0x08003ea3
 8003d14:	08003ea3 	.word	0x08003ea3
 8003d18:	08003e61 	.word	0x08003e61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f958 	bl	8003fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0208 	orr.w	r2, r2, #8
 8003d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	619a      	str	r2, [r3, #24]
      break;
 8003d5a:	e0a3      	b.n	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f9c8 	bl	80040f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6999      	ldr	r1, [r3, #24]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	619a      	str	r2, [r3, #24]
      break;
 8003d9c:	e082      	b.n	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fa31 	bl	800420c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0208 	orr.w	r2, r2, #8
 8003db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0204 	bic.w	r2, r2, #4
 8003dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
      break;
 8003ddc:	e062      	b.n	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fa99 	bl	800431c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	021a      	lsls	r2, r3, #8
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	61da      	str	r2, [r3, #28]
      break;
 8003e1e:	e041      	b.n	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fb02 	bl	8004430 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0208 	orr.w	r2, r2, #8
 8003e3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0204 	bic.w	r2, r2, #4
 8003e4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003e5e:	e021      	b.n	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fb46 	bl	80044f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003ea0:	e000      	b.n	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003ea2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop

08003eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a3c      	ldr	r2, [pc, #240]	; (8003fbc <TIM_Base_SetConfig+0x104>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00f      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d00b      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a39      	ldr	r2, [pc, #228]	; (8003fc0 <TIM_Base_SetConfig+0x108>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a38      	ldr	r2, [pc, #224]	; (8003fc4 <TIM_Base_SetConfig+0x10c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a37      	ldr	r2, [pc, #220]	; (8003fc8 <TIM_Base_SetConfig+0x110>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d108      	bne.n	8003f02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <TIM_Base_SetConfig+0x104>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01b      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f10:	d017      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2a      	ldr	r2, [pc, #168]	; (8003fc0 <TIM_Base_SetConfig+0x108>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <TIM_Base_SetConfig+0x10c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <TIM_Base_SetConfig+0x110>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <TIM_Base_SetConfig+0x114>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a26      	ldr	r2, [pc, #152]	; (8003fd0 <TIM_Base_SetConfig+0x118>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a25      	ldr	r2, [pc, #148]	; (8003fd4 <TIM_Base_SetConfig+0x11c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <TIM_Base_SetConfig+0x104>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00f      	beq.n	8003fa0 <TIM_Base_SetConfig+0xe8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <TIM_Base_SetConfig+0x110>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <TIM_Base_SetConfig+0xe8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <TIM_Base_SetConfig+0x114>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_Base_SetConfig+0xe8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <TIM_Base_SetConfig+0x118>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_Base_SetConfig+0xe8>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <TIM_Base_SetConfig+0x11c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d103      	bne.n	8003fa8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	615a      	str	r2, [r3, #20]
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40013400 	.word	0x40013400
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40014400 	.word	0x40014400
 8003fd4:	40014800 	.word	0x40014800

08003fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0302 	bic.w	r3, r3, #2
 8004024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a2c      	ldr	r2, [pc, #176]	; (80040e4 <TIM_OC1_SetConfig+0x10c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00f      	beq.n	8004058 <TIM_OC1_SetConfig+0x80>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <TIM_OC1_SetConfig+0x110>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00b      	beq.n	8004058 <TIM_OC1_SetConfig+0x80>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <TIM_OC1_SetConfig+0x114>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <TIM_OC1_SetConfig+0x80>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <TIM_OC1_SetConfig+0x118>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_OC1_SetConfig+0x80>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <TIM_OC1_SetConfig+0x11c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d10c      	bne.n	8004072 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0308 	bic.w	r3, r3, #8
 800405e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f023 0304 	bic.w	r3, r3, #4
 8004070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <TIM_OC1_SetConfig+0x10c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00f      	beq.n	800409a <TIM_OC1_SetConfig+0xc2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <TIM_OC1_SetConfig+0x110>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00b      	beq.n	800409a <TIM_OC1_SetConfig+0xc2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a19      	ldr	r2, [pc, #100]	; (80040ec <TIM_OC1_SetConfig+0x114>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <TIM_OC1_SetConfig+0xc2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <TIM_OC1_SetConfig+0x118>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d003      	beq.n	800409a <TIM_OC1_SetConfig+0xc2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <TIM_OC1_SetConfig+0x11c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d111      	bne.n	80040be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40013400 	.word	0x40013400
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40014400 	.word	0x40014400
 80040f4:	40014800 	.word	0x40014800

080040f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f023 0210 	bic.w	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 0320 	bic.w	r3, r3, #32
 8004146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <TIM_OC2_SetConfig+0x100>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC2_SetConfig+0x6c>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a27      	ldr	r2, [pc, #156]	; (80041fc <TIM_OC2_SetConfig+0x104>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10d      	bne.n	8004180 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800417e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <TIM_OC2_SetConfig+0x100>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00f      	beq.n	80041a8 <TIM_OC2_SetConfig+0xb0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <TIM_OC2_SetConfig+0x104>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00b      	beq.n	80041a8 <TIM_OC2_SetConfig+0xb0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <TIM_OC2_SetConfig+0x108>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d007      	beq.n	80041a8 <TIM_OC2_SetConfig+0xb0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <TIM_OC2_SetConfig+0x10c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_OC2_SetConfig+0xb0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a19      	ldr	r2, [pc, #100]	; (8004208 <TIM_OC2_SetConfig+0x110>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d113      	bne.n	80041d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40013400 	.word	0x40013400
 8004200:	40014000 	.word	0x40014000
 8004204:	40014400 	.word	0x40014400
 8004208:	40014800 	.word	0x40014800

0800420c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a27      	ldr	r2, [pc, #156]	; (8004308 <TIM_OC3_SetConfig+0xfc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC3_SetConfig+0x6a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a26      	ldr	r2, [pc, #152]	; (800430c <TIM_OC3_SetConfig+0x100>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10d      	bne.n	8004292 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <TIM_OC3_SetConfig+0xfc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00f      	beq.n	80042ba <TIM_OC3_SetConfig+0xae>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1b      	ldr	r2, [pc, #108]	; (800430c <TIM_OC3_SetConfig+0x100>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00b      	beq.n	80042ba <TIM_OC3_SetConfig+0xae>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a1a      	ldr	r2, [pc, #104]	; (8004310 <TIM_OC3_SetConfig+0x104>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <TIM_OC3_SetConfig+0xae>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a19      	ldr	r2, [pc, #100]	; (8004314 <TIM_OC3_SetConfig+0x108>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <TIM_OC3_SetConfig+0xae>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a18      	ldr	r2, [pc, #96]	; (8004318 <TIM_OC3_SetConfig+0x10c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d113      	bne.n	80042e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	621a      	str	r2, [r3, #32]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40013400 	.word	0x40013400
 8004310:	40014000 	.word	0x40014000
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800

0800431c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800434a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800436a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	031b      	lsls	r3, r3, #12
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a28      	ldr	r2, [pc, #160]	; (800441c <TIM_OC4_SetConfig+0x100>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_OC4_SetConfig+0x6c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a27      	ldr	r2, [pc, #156]	; (8004420 <TIM_OC4_SetConfig+0x104>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d10d      	bne.n	80043a4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800438e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	031b      	lsls	r3, r3, #12
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a1d      	ldr	r2, [pc, #116]	; (800441c <TIM_OC4_SetConfig+0x100>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00f      	beq.n	80043cc <TIM_OC4_SetConfig+0xb0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <TIM_OC4_SetConfig+0x104>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00b      	beq.n	80043cc <TIM_OC4_SetConfig+0xb0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a1b      	ldr	r2, [pc, #108]	; (8004424 <TIM_OC4_SetConfig+0x108>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_OC4_SetConfig+0xb0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <TIM_OC4_SetConfig+0x10c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_OC4_SetConfig+0xb0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a19      	ldr	r2, [pc, #100]	; (800442c <TIM_OC4_SetConfig+0x110>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d113      	bne.n	80043f4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	019b      	lsls	r3, r3, #6
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	019b      	lsls	r3, r3, #6
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40013400 	.word	0x40013400
 8004424:	40014000 	.word	0x40014000
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800

08004430 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004474:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <TIM_OC5_SetConfig+0xb4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00f      	beq.n	80044aa <TIM_OC5_SetConfig+0x7a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <TIM_OC5_SetConfig+0xb8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_OC5_SetConfig+0x7a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a15      	ldr	r2, [pc, #84]	; (80044ec <TIM_OC5_SetConfig+0xbc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d007      	beq.n	80044aa <TIM_OC5_SetConfig+0x7a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <TIM_OC5_SetConfig+0xc0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_OC5_SetConfig+0x7a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <TIM_OC5_SetConfig+0xc4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d109      	bne.n	80044be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	621a      	str	r2, [r3, #32]
}
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40013400 	.word	0x40013400
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800

080044f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800453e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	051b      	lsls	r3, r3, #20
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <TIM_OC6_SetConfig+0xb8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00f      	beq.n	8004574 <TIM_OC6_SetConfig+0x7c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <TIM_OC6_SetConfig+0xbc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00b      	beq.n	8004574 <TIM_OC6_SetConfig+0x7c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <TIM_OC6_SetConfig+0xc0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <TIM_OC6_SetConfig+0x7c>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a15      	ldr	r2, [pc, #84]	; (80045bc <TIM_OC6_SetConfig+0xc4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_OC6_SetConfig+0x7c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <TIM_OC6_SetConfig+0xc8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d109      	bne.n	8004588 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	029b      	lsls	r3, r3, #10
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40012c00 	.word	0x40012c00
 80045b4:	40013400 	.word	0x40013400
 80045b8:	40014000 	.word	0x40014000
 80045bc:	40014400 	.word	0x40014400
 80045c0:	40014800 	.word	0x40014800

080045c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2201      	movs	r2, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	401a      	ands	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <HAL_TIMEx_PWMN_Start+0x24>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e022      	b.n	800467a <HAL_TIMEx_PWMN_Start+0x6a>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b04      	cmp	r3, #4
 8004638:	d109      	bne.n	800464e <HAL_TIMEx_PWMN_Start+0x3e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	bf14      	ite	ne
 8004646:	2301      	movne	r3, #1
 8004648:	2300      	moveq	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	e015      	b.n	800467a <HAL_TIMEx_PWMN_Start+0x6a>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d109      	bne.n	8004668 <HAL_TIMEx_PWMN_Start+0x58>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e008      	b.n	800467a <HAL_TIMEx_PWMN_Start+0x6a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e069      	b.n	8004756 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <HAL_TIMEx_PWMN_Start+0x82>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004690:	e013      	b.n	80046ba <HAL_TIMEx_PWMN_Start+0xaa>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b04      	cmp	r3, #4
 8004696:	d104      	bne.n	80046a2 <HAL_TIMEx_PWMN_Start+0x92>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a0:	e00b      	b.n	80046ba <HAL_TIMEx_PWMN_Start+0xaa>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d104      	bne.n	80046b2 <HAL_TIMEx_PWMN_Start+0xa2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046b0:	e003      	b.n	80046ba <HAL_TIMEx_PWMN_Start+0xaa>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2204      	movs	r2, #4
 80046c0:	6839      	ldr	r1, [r7, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f8f8 	bl	80048b8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a20      	ldr	r2, [pc, #128]	; (8004760 <HAL_TIMEx_PWMN_Start+0x150>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <HAL_TIMEx_PWMN_Start+0x104>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ea:	d013      	beq.n	8004714 <HAL_TIMEx_PWMN_Start+0x104>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <HAL_TIMEx_PWMN_Start+0x154>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_TIMEx_PWMN_Start+0x104>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <HAL_TIMEx_PWMN_Start+0x158>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_TIMEx_PWMN_Start+0x104>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <HAL_TIMEx_PWMN_Start+0x15c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIMEx_PWMN_Start+0x104>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_TIMEx_PWMN_Start+0x160>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d115      	bne.n	8004740 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	4b16      	ldr	r3, [pc, #88]	; (8004774 <HAL_TIMEx_PWMN_Start+0x164>)
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b06      	cmp	r3, #6
 8004724:	d015      	beq.n	8004752 <HAL_TIMEx_PWMN_Start+0x142>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d011      	beq.n	8004752 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473e:	e008      	b.n	8004752 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e000      	b.n	8004754 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40012c00 	.word	0x40012c00
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40013400 	.word	0x40013400
 8004770:	40014000 	.word	0x40014000
 8004774:	00010007 	.word	0x00010007

08004778 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004790:	2302      	movs	r3, #2
 8004792:	e087      	b.n	80048a4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d004      	beq.n	8004822 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a25      	ldr	r2, [pc, #148]	; (80048b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d106      	bne.n	8004830 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d126      	bne.n	8004892 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	051b      	lsls	r3, r3, #20
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a0d      	ldr	r2, [pc, #52]	; (80048b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d106      	bne.n	8004892 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	40013400 	.word	0x40013400

080048b8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2204      	movs	r2, #4
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	43db      	mvns	r3, r3
 80048da:	401a      	ands	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	460b      	mov	r3, r1
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e05b      	b.n	80049d2 <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004920:	2b00      	cmp	r3, #0
 8004922:	d106      	bne.n	8004932 <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7fc fad3 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2224      	movs	r2, #36	; 0x24
 8004936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 f9da 	bl	8004d04 <UART_SetConfig>
 8004950:	4603      	mov	r3, r0
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_MultiProcessor_Init+0x58>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e03b      	b.n	80049d2 <HAL_MultiProcessor_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_MultiProcessor_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fc76 	bl	8005254 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004986:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498e:	d10a      	bne.n	80049a6 <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800499a:	7afb      	ldrb	r3, [r7, #11]
 800499c:	061a      	lsls	r2, r3, #24
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fce4 	bl	8005398 <UART_CheckIdleState>
 80049d0:	4603      	mov	r3, r0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a02:	4013      	ands	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d118      	bne.n	8004a3e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d013      	beq.n	8004a3e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d104      	bne.n	8004a2a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8145 	beq.w	8004cbe <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
      }
      return;
 8004a3c:	e13f      	b.n	8004cbe <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80e8 	beq.w	8004c16 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4ba1      	ldr	r3, [pc, #644]	; (8004cd0 <HAL_UART_IRQHandler+0x2f4>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4ba0      	ldr	r3, [pc, #640]	; (8004cd4 <HAL_UART_IRQHandler+0x2f8>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80dd 	beq.w	8004c16 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d010      	beq.n	8004a88 <HAL_UART_IRQHandler+0xac>
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00b      	beq.n	8004a88 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2201      	movs	r2, #1
 8004a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f043 0201 	orr.w	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d010      	beq.n	8004ab4 <HAL_UART_IRQHandler+0xd8>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f043 0204 	orr.w	r2, r3, #4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d010      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x104>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00b      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2204      	movs	r2, #4
 8004ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f043 0202 	orr.w	r2, r3, #2
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d015      	beq.n	8004b16 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d104      	bne.n	8004afe <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4b76      	ldr	r3, [pc, #472]	; (8004cd0 <HAL_UART_IRQHandler+0x2f4>)
 8004af8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2208      	movs	r2, #8
 8004b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0c:	f043 0208 	orr.w	r2, r3, #8
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d011      	beq.n	8004b44 <HAL_UART_IRQHandler+0x168>
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00c      	beq.n	8004b44 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f043 0220 	orr.w	r2, r3, #32
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80b9 	beq.w	8004cc2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d011      	beq.n	8004b7e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d007      	beq.n	8004b7e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d004      	beq.n	8004b9e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d031      	beq.n	8004c02 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fcc2 	bl	8005528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d123      	bne.n	8004bfa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d013      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bce:	4a42      	ldr	r2, [pc, #264]	; (8004cd8 <HAL_UART_IRQHandler+0x2fc>)
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fd fcb2 	bl	8002540 <HAL_DMA_Abort_IT>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d017      	beq.n	8004c12 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004bec:	4610      	mov	r0, r2
 8004bee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf0:	e00f      	b.n	8004c12 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f87c 	bl	8004cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf8:	e00b      	b.n	8004c12 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f878 	bl	8004cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c00:	e007      	b.n	8004c12 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f874 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004c10:	e057      	b.n	8004cc2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c12:	bf00      	nop
    return;
 8004c14:	e055      	b.n	8004cc2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00d      	beq.n	8004c3c <HAL_UART_IRQHandler+0x260>
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fcca 	bl	80055ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c3a:	e045      	b.n	8004cc8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d031      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	4798      	blx	r3
    }
    return;
 8004c6a:	e02c      	b.n	8004cc6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d008      	beq.n	8004c88 <HAL_UART_IRQHandler+0x2ac>
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fc8a 	bl	800559a <UART_EndTransmit_IT>
    return;
 8004c86:	e01f      	b.n	8004cc8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x2c8>
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fcaa 	bl	80055f6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ca2:	e011      	b.n	8004cc8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x2ec>
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	da09      	bge.n	8004cc8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fc94 	bl	80055e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cba:	bf00      	nop
 8004cbc:	e004      	b.n	8004cc8 <HAL_UART_IRQHandler+0x2ec>
      return;
 8004cbe:	bf00      	nop
 8004cc0:	e002      	b.n	8004cc8 <HAL_UART_IRQHandler+0x2ec>
    return;
 8004cc2:	bf00      	nop
 8004cc4:	e000      	b.n	8004cc8 <HAL_UART_IRQHandler+0x2ec>
    return;
 8004cc6:	bf00      	nop
  }
}
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	10000001 	.word	0x10000001
 8004cd4:	04000120 	.word	0x04000120
 8004cd8:	0800556f 	.word	0x0800556f

08004cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d04:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004d08:	b088      	sub	sp, #32
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4bb0      	ldr	r3, [pc, #704]	; (8004ffc <UART_SetConfig+0x2f8>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	69f9      	ldr	r1, [r7, #28]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4aa5      	ldr	r2, [pc, #660]	; (8005000 <UART_SetConfig+0x2fc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	69f9      	ldr	r1, [r7, #28]
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	f023 010f 	bic.w	r1, r3, #15
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a96      	ldr	r2, [pc, #600]	; (8005004 <UART_SetConfig+0x300>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d121      	bne.n	8004df4 <UART_SetConfig+0xf0>
 8004db0:	4b95      	ldr	r3, [pc, #596]	; (8005008 <UART_SetConfig+0x304>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d816      	bhi.n	8004dec <UART_SetConfig+0xe8>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <UART_SetConfig+0xc0>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004dd5 	.word	0x08004dd5
 8004dc8:	08004de1 	.word	0x08004de1
 8004dcc:	08004ddb 	.word	0x08004ddb
 8004dd0:	08004de7 	.word	0x08004de7
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	76fb      	strb	r3, [r7, #27]
 8004dd8:	e0be      	b.n	8004f58 <UART_SetConfig+0x254>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	76fb      	strb	r3, [r7, #27]
 8004dde:	e0bb      	b.n	8004f58 <UART_SetConfig+0x254>
 8004de0:	2304      	movs	r3, #4
 8004de2:	76fb      	strb	r3, [r7, #27]
 8004de4:	e0b8      	b.n	8004f58 <UART_SetConfig+0x254>
 8004de6:	2308      	movs	r3, #8
 8004de8:	76fb      	strb	r3, [r7, #27]
 8004dea:	e0b5      	b.n	8004f58 <UART_SetConfig+0x254>
 8004dec:	2310      	movs	r3, #16
 8004dee:	76fb      	strb	r3, [r7, #27]
 8004df0:	bf00      	nop
 8004df2:	e0b1      	b.n	8004f58 <UART_SetConfig+0x254>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a84      	ldr	r2, [pc, #528]	; (800500c <UART_SetConfig+0x308>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d134      	bne.n	8004e68 <UART_SetConfig+0x164>
 8004dfe:	4b82      	ldr	r3, [pc, #520]	; (8005008 <UART_SetConfig+0x304>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b0c      	cmp	r3, #12
 8004e0a:	d829      	bhi.n	8004e60 <UART_SetConfig+0x15c>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x110>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e49 	.word	0x08004e49
 8004e18:	08004e61 	.word	0x08004e61
 8004e1c:	08004e61 	.word	0x08004e61
 8004e20:	08004e61 	.word	0x08004e61
 8004e24:	08004e55 	.word	0x08004e55
 8004e28:	08004e61 	.word	0x08004e61
 8004e2c:	08004e61 	.word	0x08004e61
 8004e30:	08004e61 	.word	0x08004e61
 8004e34:	08004e4f 	.word	0x08004e4f
 8004e38:	08004e61 	.word	0x08004e61
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e61 	.word	0x08004e61
 8004e44:	08004e5b 	.word	0x08004e5b
 8004e48:	2300      	movs	r3, #0
 8004e4a:	76fb      	strb	r3, [r7, #27]
 8004e4c:	e084      	b.n	8004f58 <UART_SetConfig+0x254>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	76fb      	strb	r3, [r7, #27]
 8004e52:	e081      	b.n	8004f58 <UART_SetConfig+0x254>
 8004e54:	2304      	movs	r3, #4
 8004e56:	76fb      	strb	r3, [r7, #27]
 8004e58:	e07e      	b.n	8004f58 <UART_SetConfig+0x254>
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	76fb      	strb	r3, [r7, #27]
 8004e5e:	e07b      	b.n	8004f58 <UART_SetConfig+0x254>
 8004e60:	2310      	movs	r3, #16
 8004e62:	76fb      	strb	r3, [r7, #27]
 8004e64:	bf00      	nop
 8004e66:	e077      	b.n	8004f58 <UART_SetConfig+0x254>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a68      	ldr	r2, [pc, #416]	; (8005010 <UART_SetConfig+0x30c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d120      	bne.n	8004eb4 <UART_SetConfig+0x1b0>
 8004e72:	4b65      	ldr	r3, [pc, #404]	; (8005008 <UART_SetConfig+0x304>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d00f      	beq.n	8004ea0 <UART_SetConfig+0x19c>
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d802      	bhi.n	8004e8a <UART_SetConfig+0x186>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <UART_SetConfig+0x190>
 8004e88:	e010      	b.n	8004eac <UART_SetConfig+0x1a8>
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d005      	beq.n	8004e9a <UART_SetConfig+0x196>
 8004e8e:	2b30      	cmp	r3, #48	; 0x30
 8004e90:	d009      	beq.n	8004ea6 <UART_SetConfig+0x1a2>
 8004e92:	e00b      	b.n	8004eac <UART_SetConfig+0x1a8>
 8004e94:	2300      	movs	r3, #0
 8004e96:	76fb      	strb	r3, [r7, #27]
 8004e98:	e05e      	b.n	8004f58 <UART_SetConfig+0x254>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	76fb      	strb	r3, [r7, #27]
 8004e9e:	e05b      	b.n	8004f58 <UART_SetConfig+0x254>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	76fb      	strb	r3, [r7, #27]
 8004ea4:	e058      	b.n	8004f58 <UART_SetConfig+0x254>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	76fb      	strb	r3, [r7, #27]
 8004eaa:	e055      	b.n	8004f58 <UART_SetConfig+0x254>
 8004eac:	2310      	movs	r3, #16
 8004eae:	76fb      	strb	r3, [r7, #27]
 8004eb0:	bf00      	nop
 8004eb2:	e051      	b.n	8004f58 <UART_SetConfig+0x254>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a56      	ldr	r2, [pc, #344]	; (8005014 <UART_SetConfig+0x310>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d120      	bne.n	8004f00 <UART_SetConfig+0x1fc>
 8004ebe:	4b52      	ldr	r3, [pc, #328]	; (8005008 <UART_SetConfig+0x304>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	d00f      	beq.n	8004eec <UART_SetConfig+0x1e8>
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d802      	bhi.n	8004ed6 <UART_SetConfig+0x1d2>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <UART_SetConfig+0x1dc>
 8004ed4:	e010      	b.n	8004ef8 <UART_SetConfig+0x1f4>
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d005      	beq.n	8004ee6 <UART_SetConfig+0x1e2>
 8004eda:	2bc0      	cmp	r3, #192	; 0xc0
 8004edc:	d009      	beq.n	8004ef2 <UART_SetConfig+0x1ee>
 8004ede:	e00b      	b.n	8004ef8 <UART_SetConfig+0x1f4>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	76fb      	strb	r3, [r7, #27]
 8004ee4:	e038      	b.n	8004f58 <UART_SetConfig+0x254>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	76fb      	strb	r3, [r7, #27]
 8004eea:	e035      	b.n	8004f58 <UART_SetConfig+0x254>
 8004eec:	2304      	movs	r3, #4
 8004eee:	76fb      	strb	r3, [r7, #27]
 8004ef0:	e032      	b.n	8004f58 <UART_SetConfig+0x254>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	76fb      	strb	r3, [r7, #27]
 8004ef6:	e02f      	b.n	8004f58 <UART_SetConfig+0x254>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	76fb      	strb	r3, [r7, #27]
 8004efc:	bf00      	nop
 8004efe:	e02b      	b.n	8004f58 <UART_SetConfig+0x254>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a3e      	ldr	r2, [pc, #248]	; (8005000 <UART_SetConfig+0x2fc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d124      	bne.n	8004f54 <UART_SetConfig+0x250>
 8004f0a:	4b3f      	ldr	r3, [pc, #252]	; (8005008 <UART_SetConfig+0x304>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f18:	d012      	beq.n	8004f40 <UART_SetConfig+0x23c>
 8004f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1e:	d802      	bhi.n	8004f26 <UART_SetConfig+0x222>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <UART_SetConfig+0x230>
 8004f24:	e012      	b.n	8004f4c <UART_SetConfig+0x248>
 8004f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2a:	d006      	beq.n	8004f3a <UART_SetConfig+0x236>
 8004f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f30:	d009      	beq.n	8004f46 <UART_SetConfig+0x242>
 8004f32:	e00b      	b.n	8004f4c <UART_SetConfig+0x248>
 8004f34:	2300      	movs	r3, #0
 8004f36:	76fb      	strb	r3, [r7, #27]
 8004f38:	e00e      	b.n	8004f58 <UART_SetConfig+0x254>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	76fb      	strb	r3, [r7, #27]
 8004f3e:	e00b      	b.n	8004f58 <UART_SetConfig+0x254>
 8004f40:	2304      	movs	r3, #4
 8004f42:	76fb      	strb	r3, [r7, #27]
 8004f44:	e008      	b.n	8004f58 <UART_SetConfig+0x254>
 8004f46:	2308      	movs	r3, #8
 8004f48:	76fb      	strb	r3, [r7, #27]
 8004f4a:	e005      	b.n	8004f58 <UART_SetConfig+0x254>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	76fb      	strb	r3, [r7, #27]
 8004f50:	bf00      	nop
 8004f52:	e001      	b.n	8004f58 <UART_SetConfig+0x254>
 8004f54:	2310      	movs	r3, #16
 8004f56:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a28      	ldr	r2, [pc, #160]	; (8005000 <UART_SetConfig+0x2fc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	f040 80a1 	bne.w	80050a6 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f64:	7efb      	ldrb	r3, [r7, #27]
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d823      	bhi.n	8004fb2 <UART_SetConfig+0x2ae>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <UART_SetConfig+0x26c>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004fb3 	.word	0x08004fb3
 8004f78:	08004f9d 	.word	0x08004f9d
 8004f7c:	08004fb3 	.word	0x08004fb3
 8004f80:	08004fa3 	.word	0x08004fa3
 8004f84:	08004fb3 	.word	0x08004fb3
 8004f88:	08004fb3 	.word	0x08004fb3
 8004f8c:	08004fb3 	.word	0x08004fb3
 8004f90:	08004fab 	.word	0x08004fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f94:	f7fe fa66 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 8004f98:	6178      	str	r0, [r7, #20]
        break;
 8004f9a:	e00f      	b.n	8004fbc <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <UART_SetConfig+0x314>)
 8004f9e:	617b      	str	r3, [r7, #20]
        break;
 8004fa0:	e00c      	b.n	8004fbc <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7fe f9f1 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8004fa6:	6178      	str	r0, [r7, #20]
        break;
 8004fa8:	e008      	b.n	8004fbc <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fae:	617b      	str	r3, [r7, #20]
        break;
 8004fb0:	e004      	b.n	8004fbc <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	76bb      	strb	r3, [r7, #26]
        break;
 8004fba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8130 	beq.w	8005224 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	4a14      	ldr	r2, [pc, #80]	; (800501c <UART_SetConfig+0x318>)
 8004fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d305      	bcc.n	8004ff4 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d915      	bls.n	8005020 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	76bb      	strb	r3, [r7, #26]
 8004ff8:	e114      	b.n	8005224 <UART_SetConfig+0x520>
 8004ffa:	bf00      	nop
 8004ffc:	cfff69f3 	.word	0xcfff69f3
 8005000:	40008000 	.word	0x40008000
 8005004:	40013800 	.word	0x40013800
 8005008:	40021000 	.word	0x40021000
 800500c:	40004400 	.word	0x40004400
 8005010:	40004800 	.word	0x40004800
 8005014:	40004c00 	.word	0x40004c00
 8005018:	00f42400 	.word	0x00f42400
 800501c:	08005ec8 	.word	0x08005ec8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	4618      	mov	r0, r3
 8005024:	f04f 0100 	mov.w	r1, #0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	4a87      	ldr	r2, [pc, #540]	; (800524c <UART_SetConfig+0x548>)
 800502e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f04f 0400 	mov.w	r4, #0
 8005038:	461a      	mov	r2, r3
 800503a:	4623      	mov	r3, r4
 800503c:	f7fb f8ec 	bl	8000218 <__aeabi_uldivmod>
 8005040:	4603      	mov	r3, r0
 8005042:	460c      	mov	r4, r1
 8005044:	4619      	mov	r1, r3
 8005046:	4622      	mov	r2, r4
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	f04f 0400 	mov.w	r4, #0
 8005050:	0214      	lsls	r4, r2, #8
 8005052:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005056:	020b      	lsls	r3, r1, #8
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6852      	ldr	r2, [r2, #4]
 800505c:	0852      	lsrs	r2, r2, #1
 800505e:	4611      	mov	r1, r2
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	eb13 0b01 	adds.w	fp, r3, r1
 8005068:	eb44 0c02 	adc.w	ip, r4, r2
 800506c:	4658      	mov	r0, fp
 800506e:	4661      	mov	r1, ip
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f04f 0400 	mov.w	r4, #0
 8005078:	461a      	mov	r2, r3
 800507a:	4623      	mov	r3, r4
 800507c:	f7fb f8cc 	bl	8000218 <__aeabi_uldivmod>
 8005080:	4603      	mov	r3, r0
 8005082:	460c      	mov	r4, r1
 8005084:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800508c:	d308      	bcc.n	80050a0 <UART_SetConfig+0x39c>
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005094:	d204      	bcs.n	80050a0 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	e0c1      	b.n	8005224 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	76bb      	strb	r3, [r7, #26]
 80050a4:	e0be      	b.n	8005224 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ae:	d164      	bne.n	800517a <UART_SetConfig+0x476>
  {
    switch (clocksource)
 80050b0:	7efb      	ldrb	r3, [r7, #27]
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d827      	bhi.n	8005106 <UART_SetConfig+0x402>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <UART_SetConfig+0x3b8>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	080050e1 	.word	0x080050e1
 80050c0:	080050e9 	.word	0x080050e9
 80050c4:	080050f1 	.word	0x080050f1
 80050c8:	08005107 	.word	0x08005107
 80050cc:	080050f7 	.word	0x080050f7
 80050d0:	08005107 	.word	0x08005107
 80050d4:	08005107 	.word	0x08005107
 80050d8:	08005107 	.word	0x08005107
 80050dc:	080050ff 	.word	0x080050ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e0:	f7fe f9c0 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 80050e4:	6178      	str	r0, [r7, #20]
        break;
 80050e6:	e013      	b.n	8005110 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e8:	f7fe f9d2 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 80050ec:	6178      	str	r0, [r7, #20]
        break;
 80050ee:	e00f      	b.n	8005110 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f0:	4b57      	ldr	r3, [pc, #348]	; (8005250 <UART_SetConfig+0x54c>)
 80050f2:	617b      	str	r3, [r7, #20]
        break;
 80050f4:	e00c      	b.n	8005110 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f6:	f7fe f947 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 80050fa:	6178      	str	r0, [r7, #20]
        break;
 80050fc:	e008      	b.n	8005110 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005102:	617b      	str	r3, [r7, #20]
        break;
 8005104:	e004      	b.n	8005110 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	76bb      	strb	r3, [r7, #26]
        break;
 800510e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8086 	beq.w	8005224 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	4a4b      	ldr	r2, [pc, #300]	; (800524c <UART_SetConfig+0x548>)
 800511e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005122:	461a      	mov	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	fbb3 f3f2 	udiv	r3, r3, r2
 800512a:	005a      	lsls	r2, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	441a      	add	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	b29b      	uxth	r3, r3
 800513e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b0f      	cmp	r3, #15
 8005144:	d916      	bls.n	8005174 <UART_SetConfig+0x470>
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514c:	d212      	bcs.n	8005174 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f023 030f 	bic.w	r3, r3, #15
 8005156:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	b29b      	uxth	r3, r3
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	b29a      	uxth	r2, r3
 8005164:	89fb      	ldrh	r3, [r7, #14]
 8005166:	4313      	orrs	r3, r2
 8005168:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	89fa      	ldrh	r2, [r7, #14]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	e057      	b.n	8005224 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	76bb      	strb	r3, [r7, #26]
 8005178:	e054      	b.n	8005224 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800517a:	7efb      	ldrb	r3, [r7, #27]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d828      	bhi.n	80051d2 <UART_SetConfig+0x4ce>
 8005180:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <UART_SetConfig+0x484>)
 8005182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005186:	bf00      	nop
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051b5 	.word	0x080051b5
 8005190:	080051bd 	.word	0x080051bd
 8005194:	080051d3 	.word	0x080051d3
 8005198:	080051c3 	.word	0x080051c3
 800519c:	080051d3 	.word	0x080051d3
 80051a0:	080051d3 	.word	0x080051d3
 80051a4:	080051d3 	.word	0x080051d3
 80051a8:	080051cb 	.word	0x080051cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ac:	f7fe f95a 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 80051b0:	6178      	str	r0, [r7, #20]
        break;
 80051b2:	e013      	b.n	80051dc <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b4:	f7fe f96c 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 80051b8:	6178      	str	r0, [r7, #20]
        break;
 80051ba:	e00f      	b.n	80051dc <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051bc:	4b24      	ldr	r3, [pc, #144]	; (8005250 <UART_SetConfig+0x54c>)
 80051be:	617b      	str	r3, [r7, #20]
        break;
 80051c0:	e00c      	b.n	80051dc <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c2:	f7fe f8e1 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 80051c6:	6178      	str	r0, [r7, #20]
        break;
 80051c8:	e008      	b.n	80051dc <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ce:	617b      	str	r3, [r7, #20]
        break;
 80051d0:	e004      	b.n	80051dc <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	76bb      	strb	r3, [r7, #26]
        break;
 80051da:	bf00      	nop
    }

    if (pclk != 0U)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d020      	beq.n	8005224 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	4a19      	ldr	r2, [pc, #100]	; (800524c <UART_SetConfig+0x548>)
 80051e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ec:	461a      	mov	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	441a      	add	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	b29b      	uxth	r3, r3
 8005206:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b0f      	cmp	r3, #15
 800520c:	d908      	bls.n	8005220 <UART_SetConfig+0x51c>
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005214:	d204      	bcs.n	8005220 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	60da      	str	r2, [r3, #12]
 800521e:	e001      	b.n	8005224 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005240:	7ebb      	ldrb	r3, [r7, #26]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800524c:	08005ec8 	.word	0x08005ec8
 8005250:	00f42400 	.word	0x00f42400

08005254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01a      	beq.n	800536a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005352:	d10a      	bne.n	800536a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af02      	add	r7, sp, #8
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053a8:	f7fb fe70 	bl	800108c <HAL_GetTick>
 80053ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d10e      	bne.n	80053da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f82c 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e022      	b.n	8005420 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d10e      	bne.n	8005406 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f816 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e00c      	b.n	8005420 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005438:	e062      	b.n	8005500 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d05e      	beq.n	8005500 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fb fe23 	bl	800108c <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <UART_WaitOnFlagUntilTimeout+0x30>
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11d      	bne.n	8005494 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005466:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e045      	b.n	8005520 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d02e      	beq.n	8005500 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b0:	d126      	bne.n	8005500 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054ca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e00f      	b.n	8005520 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69da      	ldr	r2, [r3, #28]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4013      	ands	r3, r2
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	429a      	cmp	r2, r3
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	429a      	cmp	r2, r3
 800551c:	d08d      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800553e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800554e:	f023 0301 	bic.w	r3, r3, #1
 8005552:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7ff fbaf 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fb8b 	bl	8004cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_UARTEx_DisableFifoMode+0x16>
 800561c:	2302      	movs	r3, #2
 800561e:	e027      	b.n	8005670 <HAL_UARTEx_DisableFifoMode+0x66>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2224      	movs	r2, #36	; 0x24
 800562c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800564e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005690:	2302      	movs	r3, #2
 8005692:	e02d      	b.n	80056f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2224      	movs	r2, #36	; 0x24
 80056a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f84f 	bl	8005774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e02d      	b.n	800576c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2224      	movs	r2, #36	; 0x24
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f811 	bl	8005774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800577c:	4a2f      	ldr	r2, [pc, #188]	; (800583c <UARTEx_SetNbDataToProcess+0xc8>)
 800577e:	f107 0314 	add.w	r3, r7, #20
 8005782:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005786:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800578a:	4a2d      	ldr	r2, [pc, #180]	; (8005840 <UARTEx_SetNbDataToProcess+0xcc>)
 800578c:	f107 030c 	add.w	r3, r7, #12
 8005790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005794:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800579c:	2b00      	cmp	r3, #0
 800579e:	d108      	bne.n	80057b2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057b0:	e03d      	b.n	800582e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057b2:	2308      	movs	r3, #8
 80057b4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057b6:	2308      	movs	r3, #8
 80057b8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	0e5b      	lsrs	r3, r3, #25
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	0f5b      	lsrs	r3, r3, #29
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057da:	7fbb      	ldrb	r3, [r7, #30]
 80057dc:	7f3a      	ldrb	r2, [r7, #28]
 80057de:	f107 0120 	add.w	r1, r7, #32
 80057e2:	440a      	add	r2, r1
 80057e4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057ec:	7f3a      	ldrb	r2, [r7, #28]
 80057ee:	f107 0120 	add.w	r1, r7, #32
 80057f2:	440a      	add	r2, r1
 80057f4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005804:	7ffb      	ldrb	r3, [r7, #31]
 8005806:	7f7a      	ldrb	r2, [r7, #29]
 8005808:	f107 0120 	add.w	r1, r7, #32
 800580c:	440a      	add	r2, r1
 800580e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005812:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005816:	7f7a      	ldrb	r2, [r7, #29]
 8005818:	f107 0120 	add.w	r1, r7, #32
 800581c:	440a      	add	r2, r1
 800581e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005822:	fb93 f3f2 	sdiv	r3, r3, r2
 8005826:	b29a      	uxth	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800582e:	bf00      	nop
 8005830:	3724      	adds	r7, #36	; 0x24
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	08005ea0 	.word	0x08005ea0
 8005840:	08005ea8 	.word	0x08005ea8

08005844 <delay>:
#include "stdlib.h"
#include "oledfont.h"  	 

u8 OLED_GRAM[144][8];
void delay(void)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
	u8 t=3;
 800584a:	2303      	movs	r3, #3
 800584c:	71fb      	strb	r3, [r7, #7]
	while(t--);
 800584e:	bf00      	nop
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	1e5a      	subs	r2, r3, #1
 8005854:	71fa      	strb	r2, [r7, #7]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1fa      	bne.n	8005850 <delay+0xc>
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <OLED_WR_Byte>:
			OLED_WR_Byte(0xA0,OLED_CMD);
		}
}

void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	460a      	mov	r2, r1
 8005872:	71fb      	strb	r3, [r7, #7]
 8005874:	4613      	mov	r3, r2
 8005876:	71bb      	strb	r3, [r7, #6]
	u8 i;			  
	if(cmd)
 8005878:	79bb      	ldrb	r3, [r7, #6]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d006      	beq.n	800588c <OLED_WR_Byte+0x24>
	  OLED_DC_Set();
 800587e:	2201      	movs	r2, #1
 8005880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005884:	4821      	ldr	r0, [pc, #132]	; (800590c <OLED_WR_Byte+0xa4>)
 8005886:	f7fd f845 	bl	8002914 <HAL_GPIO_WritePin>
 800588a:	e005      	b.n	8005898 <OLED_WR_Byte+0x30>
	else
	  OLED_DC_Clr();
 800588c:	2200      	movs	r2, #0
 800588e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005892:	481e      	ldr	r0, [pc, #120]	; (800590c <OLED_WR_Byte+0xa4>)
 8005894:	f7fd f83e 	bl	8002914 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8005898:	2300      	movs	r3, #0
 800589a:	73fb      	strb	r3, [r7, #15]
 800589c:	e028      	b.n	80058f0 <OLED_WR_Byte+0x88>
	{
		OLED_SCL_Clr();
 800589e:	2200      	movs	r2, #0
 80058a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058a4:	4819      	ldr	r0, [pc, #100]	; (800590c <OLED_WR_Byte+0xa4>)
 80058a6:	f7fd f835 	bl	8002914 <HAL_GPIO_WritePin>
		
		delay();
 80058aa:	f7ff ffcb 	bl	8005844 <delay>
		if(dat&0x80)
 80058ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	da06      	bge.n	80058c4 <OLED_WR_Byte+0x5c>
		   OLED_SDA_Set();
 80058b6:	2201      	movs	r2, #1
 80058b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058bc:	4813      	ldr	r0, [pc, #76]	; (800590c <OLED_WR_Byte+0xa4>)
 80058be:	f7fd f829 	bl	8002914 <HAL_GPIO_WritePin>
 80058c2:	e005      	b.n	80058d0 <OLED_WR_Byte+0x68>
		else 
		   OLED_SDA_Clr();
 80058c4:	2200      	movs	r2, #0
 80058c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058ca:	4810      	ldr	r0, [pc, #64]	; (800590c <OLED_WR_Byte+0xa4>)
 80058cc:	f7fd f822 	bl	8002914 <HAL_GPIO_WritePin>
		delay();
 80058d0:	f7ff ffb8 	bl	8005844 <delay>
		OLED_SCL_Set();
 80058d4:	2201      	movs	r2, #1
 80058d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058da:	480c      	ldr	r0, [pc, #48]	; (800590c <OLED_WR_Byte+0xa4>)
 80058dc:	f7fd f81a 	bl	8002914 <HAL_GPIO_WritePin>
		delay();
 80058e0:	f7ff ffb0 	bl	8005844 <delay>
		dat<<=1;   
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	3301      	adds	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b07      	cmp	r3, #7
 80058f4:	d9d3      	bls.n	800589e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_DC_Set();   	  
 80058f6:	2201      	movs	r2, #1
 80058f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058fc:	4803      	ldr	r0, [pc, #12]	; (800590c <OLED_WR_Byte+0xa4>)
 80058fe:	f7fd f809 	bl	8002914 <HAL_GPIO_WritePin>
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	48000400 	.word	0x48000400

08005910 <OLED_Refresh>:
	OLED_WR_Byte(0xAE,OLED_CMD);//�ر���Ļ
}

//�����Դ浽OLED	
void OLED_Refresh(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<8;i++)
 8005916:	2300      	movs	r3, #0
 8005918:	71fb      	strb	r3, [r7, #7]
 800591a:	e026      	b.n	800596a <OLED_Refresh+0x5a>
	{
	   OLED_WR_Byte(0xb0+i,OLED_CMD); //��������ʼ��ַ
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	3b50      	subs	r3, #80	; 0x50
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff ff9f 	bl	8005868 <OLED_WR_Byte>
	   OLED_WR_Byte(0x02,OLED_CMD);   //���õ�����ʼ��ַ
 800592a:	2100      	movs	r1, #0
 800592c:	2002      	movs	r0, #2
 800592e:	f7ff ff9b 	bl	8005868 <OLED_WR_Byte>
	   OLED_WR_Byte(0x10,OLED_CMD);   //���ø�����ʼ��ַ
 8005932:	2100      	movs	r1, #0
 8005934:	2010      	movs	r0, #16
 8005936:	f7ff ff97 	bl	8005868 <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 800593a:	2300      	movs	r3, #0
 800593c:	71bb      	strb	r3, [r7, #6]
 800593e:	e00d      	b.n	800595c <OLED_Refresh+0x4c>
		 OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8005940:	79ba      	ldrb	r2, [r7, #6]
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	490c      	ldr	r1, [pc, #48]	; (8005978 <OLED_Refresh+0x68>)
 8005946:	00d2      	lsls	r2, r2, #3
 8005948:	440a      	add	r2, r1
 800594a:	4413      	add	r3, r2
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ff89 	bl	8005868 <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 8005956:	79bb      	ldrb	r3, [r7, #6]
 8005958:	3301      	adds	r3, #1
 800595a:	71bb      	strb	r3, [r7, #6]
 800595c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005960:	2b00      	cmp	r3, #0
 8005962:	daed      	bge.n	8005940 <OLED_Refresh+0x30>
	for(i=0;i<8;i++)
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	3301      	adds	r3, #1
 8005968:	71fb      	strb	r3, [r7, #7]
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	2b07      	cmp	r3, #7
 800596e:	d9d5      	bls.n	800591c <OLED_Refresh+0xc>
  }
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	200001d0 	.word	0x200001d0

0800597c <OLED_Clear>:
//��������
void OLED_Clear(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<8;i++)
 8005982:	2300      	movs	r3, #0
 8005984:	71fb      	strb	r3, [r7, #7]
 8005986:	e014      	b.n	80059b2 <OLED_Clear+0x36>
	{
	   for(n=0;n<128;n++)
 8005988:	2300      	movs	r3, #0
 800598a:	71bb      	strb	r3, [r7, #6]
 800598c:	e00a      	b.n	80059a4 <OLED_Clear+0x28>
			{
			 OLED_GRAM[n][i]=0;//�����������
 800598e:	79ba      	ldrb	r2, [r7, #6]
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	490c      	ldr	r1, [pc, #48]	; (80059c4 <OLED_Clear+0x48>)
 8005994:	00d2      	lsls	r2, r2, #3
 8005996:	440a      	add	r2, r1
 8005998:	4413      	add	r3, r2
 800599a:	2200      	movs	r2, #0
 800599c:	701a      	strb	r2, [r3, #0]
	   for(n=0;n<128;n++)
 800599e:	79bb      	ldrb	r3, [r7, #6]
 80059a0:	3301      	adds	r3, #1
 80059a2:	71bb      	strb	r3, [r7, #6]
 80059a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	daf0      	bge.n	800598e <OLED_Clear+0x12>
	for(i=0;i<8;i++)
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	3301      	adds	r3, #1
 80059b0:	71fb      	strb	r3, [r7, #7]
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b07      	cmp	r3, #7
 80059b6:	d9e7      	bls.n	8005988 <OLED_Clear+0xc>
			}
  }
	OLED_Refresh();//������ʾ
 80059b8:	f7ff ffaa 	bl	8005910 <OLED_Refresh>
}
 80059bc:	bf00      	nop
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	200001d0 	.word	0x200001d0

080059c8 <OLED_DrawPoint>:
//���� 
//x:0~127
//y:0~63
//t:1 ��� 0,���	
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
 80059d2:	460b      	mov	r3, r1
 80059d4:	71bb      	strb	r3, [r7, #6]
 80059d6:	4613      	mov	r3, r2
 80059d8:	717b      	strb	r3, [r7, #5]
	u8 i,m,n;
	i=y/8;
 80059da:	79bb      	ldrb	r3, [r7, #6]
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	73fb      	strb	r3, [r7, #15]
	m=y%8;
 80059e0:	79bb      	ldrb	r3, [r7, #6]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	73bb      	strb	r3, [r7, #14]
	n=1<<m;
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	2201      	movs	r2, #1
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	737b      	strb	r3, [r7, #13]
	if(t){OLED_GRAM[x][i]|=n;}
 80059f2:	797b      	ldrb	r3, [r7, #5]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d012      	beq.n	8005a1e <OLED_DrawPoint+0x56>
 80059f8:	79fa      	ldrb	r2, [r7, #7]
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	4925      	ldr	r1, [pc, #148]	; (8005a94 <OLED_DrawPoint+0xcc>)
 80059fe:	00d2      	lsls	r2, r2, #3
 8005a00:	440a      	add	r2, r1
 8005a02:	4413      	add	r3, r2
 8005a04:	7818      	ldrb	r0, [r3, #0]
 8005a06:	79fa      	ldrb	r2, [r7, #7]
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	7b79      	ldrb	r1, [r7, #13]
 8005a0c:	4301      	orrs	r1, r0
 8005a0e:	b2c8      	uxtb	r0, r1
 8005a10:	4920      	ldr	r1, [pc, #128]	; (8005a94 <OLED_DrawPoint+0xcc>)
 8005a12:	00d2      	lsls	r2, r2, #3
 8005a14:	440a      	add	r2, r1
 8005a16:	4413      	add	r3, r2
 8005a18:	4602      	mov	r2, r0
 8005a1a:	701a      	strb	r2, [r3, #0]
	{
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
		OLED_GRAM[x][i]|=n;
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
	}
}
 8005a1c:	e033      	b.n	8005a86 <OLED_DrawPoint+0xbe>
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8005a1e:	79fa      	ldrb	r2, [r7, #7]
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	491c      	ldr	r1, [pc, #112]	; (8005a94 <OLED_DrawPoint+0xcc>)
 8005a24:	00d2      	lsls	r2, r2, #3
 8005a26:	440a      	add	r2, r1
 8005a28:	4413      	add	r3, r2
 8005a2a:	7819      	ldrb	r1, [r3, #0]
 8005a2c:	79fa      	ldrb	r2, [r7, #7]
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	43c9      	mvns	r1, r1
 8005a32:	b2c8      	uxtb	r0, r1
 8005a34:	4917      	ldr	r1, [pc, #92]	; (8005a94 <OLED_DrawPoint+0xcc>)
 8005a36:	00d2      	lsls	r2, r2, #3
 8005a38:	440a      	add	r2, r1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i]|=n;
 8005a40:	79fa      	ldrb	r2, [r7, #7]
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	4913      	ldr	r1, [pc, #76]	; (8005a94 <OLED_DrawPoint+0xcc>)
 8005a46:	00d2      	lsls	r2, r2, #3
 8005a48:	440a      	add	r2, r1
 8005a4a:	4413      	add	r3, r2
 8005a4c:	7818      	ldrb	r0, [r3, #0]
 8005a4e:	79fa      	ldrb	r2, [r7, #7]
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	7b79      	ldrb	r1, [r7, #13]
 8005a54:	4301      	orrs	r1, r0
 8005a56:	b2c8      	uxtb	r0, r1
 8005a58:	490e      	ldr	r1, [pc, #56]	; (8005a94 <OLED_DrawPoint+0xcc>)
 8005a5a:	00d2      	lsls	r2, r2, #3
 8005a5c:	440a      	add	r2, r1
 8005a5e:	4413      	add	r3, r2
 8005a60:	4602      	mov	r2, r0
 8005a62:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8005a64:	79fa      	ldrb	r2, [r7, #7]
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	490a      	ldr	r1, [pc, #40]	; (8005a94 <OLED_DrawPoint+0xcc>)
 8005a6a:	00d2      	lsls	r2, r2, #3
 8005a6c:	440a      	add	r2, r1
 8005a6e:	4413      	add	r3, r2
 8005a70:	7819      	ldrb	r1, [r3, #0]
 8005a72:	79fa      	ldrb	r2, [r7, #7]
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	43c9      	mvns	r1, r1
 8005a78:	b2c8      	uxtb	r0, r1
 8005a7a:	4906      	ldr	r1, [pc, #24]	; (8005a94 <OLED_DrawPoint+0xcc>)
 8005a7c:	00d2      	lsls	r2, r2, #3
 8005a7e:	440a      	add	r2, r1
 8005a80:	4413      	add	r3, r2
 8005a82:	4602      	mov	r2, r0
 8005a84:	701a      	strb	r2, [r3, #0]
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	200001d0 	.word	0x200001d0

08005a98 <OLED_ShowChar>:
//x:0~127
//y:0~63
//size1:ѡ������ 6x8/6x12/8x16/12x24
//mode:0,��ɫ��ʾ;1,������ʾ
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size1,u8 mode)
{
 8005a98:	b590      	push	{r4, r7, lr}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	71fb      	strb	r3, [r7, #7]
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71bb      	strb	r3, [r7, #6]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	717b      	strb	r3, [r7, #5]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	713b      	strb	r3, [r7, #4]
	u8 i,m,temp,size2,chr1;
	u8 x0=x,y0=y;
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	72bb      	strb	r3, [r7, #10]
 8005aba:	79bb      	ldrb	r3, [r7, #6]
 8005abc:	72fb      	strb	r3, [r7, #11]
	if(size1==8)size2=6;
 8005abe:	793b      	ldrb	r3, [r7, #4]
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d102      	bne.n	8005aca <OLED_ShowChar+0x32>
 8005ac4:	2306      	movs	r3, #6
 8005ac6:	733b      	strb	r3, [r7, #12]
 8005ac8:	e014      	b.n	8005af4 <OLED_ShowChar+0x5c>
	else size2=(size1/8+((size1%8)?1:0))*(size1/2);  //�õ�����һ���ַ���Ӧ������ռ���ֽ���
 8005aca:	793b      	ldrb	r3, [r7, #4]
 8005acc:	08db      	lsrs	r3, r3, #3
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	793b      	ldrb	r3, [r7, #4]
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf14      	ite	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	2300      	moveq	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	793b      	ldrb	r3, [r7, #4]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	fb12 f303 	smulbb	r3, r2, r3
 8005af2:	733b      	strb	r3, [r7, #12]
	chr1=chr-' ';  //����ƫ�ƺ��ֵ
 8005af4:	797b      	ldrb	r3, [r7, #5]
 8005af6:	3b20      	subs	r3, #32
 8005af8:	727b      	strb	r3, [r7, #9]
	for(i=0;i<size2;i++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
 8005afe:	e078      	b.n	8005bf2 <OLED_ShowChar+0x15a>
	{
		if(size1==8)
 8005b00:	793b      	ldrb	r3, [r7, #4]
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d10b      	bne.n	8005b1e <OLED_ShowChar+0x86>
			  {temp=asc2_0806[chr1][i];} //����0806����
 8005b06:	7a7a      	ldrb	r2, [r7, #9]
 8005b08:	7bf9      	ldrb	r1, [r7, #15]
 8005b0a:	483e      	ldr	r0, [pc, #248]	; (8005c04 <OLED_ShowChar+0x16c>)
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	4403      	add	r3, r0
 8005b16:	440b      	add	r3, r1
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	737b      	strb	r3, [r7, #13]
 8005b1c:	e028      	b.n	8005b70 <OLED_ShowChar+0xd8>
		else if(size1==12)
 8005b1e:	793b      	ldrb	r3, [r7, #4]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	d10b      	bne.n	8005b3c <OLED_ShowChar+0xa4>
        {temp=asc2_1206[chr1][i];} //����1206����
 8005b24:	7a7a      	ldrb	r2, [r7, #9]
 8005b26:	7bf9      	ldrb	r1, [r7, #15]
 8005b28:	4837      	ldr	r0, [pc, #220]	; (8005c08 <OLED_ShowChar+0x170>)
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4403      	add	r3, r0
 8005b34:	440b      	add	r3, r1
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	737b      	strb	r3, [r7, #13]
 8005b3a:	e019      	b.n	8005b70 <OLED_ShowChar+0xd8>
		else if(size1==16)
 8005b3c:	793b      	ldrb	r3, [r7, #4]
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	d108      	bne.n	8005b54 <OLED_ShowChar+0xbc>
        {temp=asc2_1608[chr1][i];} //����1608����
 8005b42:	7a7a      	ldrb	r2, [r7, #9]
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	4931      	ldr	r1, [pc, #196]	; (8005c0c <OLED_ShowChar+0x174>)
 8005b48:	0112      	lsls	r2, r2, #4
 8005b4a:	440a      	add	r2, r1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	737b      	strb	r3, [r7, #13]
 8005b52:	e00d      	b.n	8005b70 <OLED_ShowChar+0xd8>
		else if(size1==24)
 8005b54:	793b      	ldrb	r3, [r7, #4]
 8005b56:	2b18      	cmp	r3, #24
 8005b58:	d150      	bne.n	8005bfc <OLED_ShowChar+0x164>
        {temp=asc2_2412[chr1][i];} //����2412����
 8005b5a:	7a7a      	ldrb	r2, [r7, #9]
 8005b5c:	7bf9      	ldrb	r1, [r7, #15]
 8005b5e:	482c      	ldr	r0, [pc, #176]	; (8005c10 <OLED_ShowChar+0x178>)
 8005b60:	4613      	mov	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4403      	add	r3, r0
 8005b6a:	440b      	add	r3, r1
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	737b      	strb	r3, [r7, #13]
		else return;
		for(m=0;m<8;m++)
 8005b70:	2300      	movs	r3, #0
 8005b72:	73bb      	strb	r3, [r7, #14]
 8005b74:	e022      	b.n	8005bbc <OLED_ShowChar+0x124>
		{
			if(temp&0x01)OLED_DrawPoint(x,y,mode);
 8005b76:	7b7b      	ldrb	r3, [r7, #13]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <OLED_ShowChar+0xf8>
 8005b80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005b84:	79b9      	ldrb	r1, [r7, #6]
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff ff1d 	bl	80059c8 <OLED_DrawPoint>
 8005b8e:	e00c      	b.n	8005baa <OLED_ShowChar+0x112>
			else OLED_DrawPoint(x,y,!mode);
 8005b90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bf0c      	ite	eq
 8005b98:	2301      	moveq	r3, #1
 8005b9a:	2300      	movne	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	79b9      	ldrb	r1, [r7, #6]
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff ff0f 	bl	80059c8 <OLED_DrawPoint>
			temp>>=1;
 8005baa:	7b7b      	ldrb	r3, [r7, #13]
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	737b      	strb	r3, [r7, #13]
			y++;
 8005bb0:	79bb      	ldrb	r3, [r7, #6]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	71bb      	strb	r3, [r7, #6]
		for(m=0;m<8;m++)
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	73bb      	strb	r3, [r7, #14]
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	2b07      	cmp	r3, #7
 8005bc0:	d9d9      	bls.n	8005b76 <OLED_ShowChar+0xde>
		}
		x++;
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	71fb      	strb	r3, [r7, #7]
		if((size1!=8)&&((x-x0)==size1/2))
 8005bc8:	793b      	ldrb	r3, [r7, #4]
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d00c      	beq.n	8005be8 <OLED_ShowChar+0x150>
 8005bce:	79fa      	ldrb	r2, [r7, #7]
 8005bd0:	7abb      	ldrb	r3, [r7, #10]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	793a      	ldrb	r2, [r7, #4]
 8005bd6:	0852      	lsrs	r2, r2, #1
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d104      	bne.n	8005be8 <OLED_ShowChar+0x150>
		{x=x0;y0=y0+8;}
 8005bde:	7abb      	ldrb	r3, [r7, #10]
 8005be0:	71fb      	strb	r3, [r7, #7]
 8005be2:	7afb      	ldrb	r3, [r7, #11]
 8005be4:	3308      	adds	r3, #8
 8005be6:	72fb      	strb	r3, [r7, #11]
		y=y0;
 8005be8:	7afb      	ldrb	r3, [r7, #11]
 8005bea:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<size2;i++)
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
 8005bf2:	7bfa      	ldrb	r2, [r7, #15]
 8005bf4:	7b3b      	ldrb	r3, [r7, #12]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d382      	bcc.n	8005b00 <OLED_ShowChar+0x68>
 8005bfa:	e000      	b.n	8005bfe <OLED_ShowChar+0x166>
		else return;
 8005bfc:	bf00      	nop
  }
}
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd90      	pop	{r4, r7, pc}
 8005c04:	08005ee0 	.word	0x08005ee0
 8005c08:	08006108 	.word	0x08006108
 8005c0c:	0800657c 	.word	0x0800657c
 8005c10:	08006b6c 	.word	0x08006b6c

08005c14 <OLED_Pow>:
  }
}

//m^n
u32 OLED_Pow(u8 m,u8 n)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	460a      	mov	r2, r1
 8005c1e:	71fb      	strb	r3, [r7, #7]
 8005c20:	4613      	mov	r3, r2
 8005c22:	71bb      	strb	r3, [r7, #6]
	u32 result=1;
 8005c24:	2301      	movs	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
	while(n--)
 8005c28:	e004      	b.n	8005c34 <OLED_Pow+0x20>
	{
	  result*=m;
 8005c2a:	79fa      	ldrb	r2, [r7, #7]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	60fb      	str	r3, [r7, #12]
	while(n--)
 8005c34:	79bb      	ldrb	r3, [r7, #6]
 8005c36:	1e5a      	subs	r2, r3, #1
 8005c38:	71ba      	strb	r2, [r7, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f5      	bne.n	8005c2a <OLED_Pow+0x16>
	}
	return result;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <OLED_ShowNum>:
//num :Ҫ��ʾ������
//len :���ֵ�λ��
//size:�����С
//mode:0,��ɫ��ʾ;1,������ʾ
void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 size1,u8 mode)
{
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	603a      	str	r2, [r7, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	71fb      	strb	r3, [r7, #7]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	71bb      	strb	r3, [r7, #6]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	717b      	strb	r3, [r7, #5]
	u8 t,temp,m=0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	73bb      	strb	r3, [r7, #14]
	if(size1==8)m=2;
 8005c66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d101      	bne.n	8005c72 <OLED_ShowNum+0x26>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	73fb      	strb	r3, [r7, #15]
 8005c76:	e051      	b.n	8005d1c <OLED_ShowNum+0xd0>
	{
		temp=(num/OLED_Pow(10,len-t-1))%10;
 8005c78:	797a      	ldrb	r2, [r7, #5]
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	4619      	mov	r1, r3
 8005c86:	200a      	movs	r0, #10
 8005c88:	f7ff ffc4 	bl	8005c14 <OLED_Pow>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c94:	4b25      	ldr	r3, [pc, #148]	; (8005d2c <OLED_ShowNum+0xe0>)
 8005c96:	fba3 2301 	umull	r2, r3, r3, r1
 8005c9a:	08da      	lsrs	r2, r3, #3
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	1aca      	subs	r2, r1, r3
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	737b      	strb	r3, [r7, #13]
			if(temp==0)
 8005caa:	7b7b      	ldrb	r3, [r7, #13]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d118      	bne.n	8005ce2 <OLED_ShowNum+0x96>
			{
				OLED_ShowChar(x+(size1/2+m)*t,y,'0',size1,mode);
 8005cb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	4413      	add	r3, r2
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	7bfa      	ldrb	r2, [r7, #15]
 8005cc0:	fb12 f303 	smulbb	r3, r2, r3
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	4413      	add	r3, r2
 8005cca:	b2d8      	uxtb	r0, r3
 8005ccc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005cd0:	79b9      	ldrb	r1, [r7, #6]
 8005cd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	2230      	movs	r2, #48	; 0x30
 8005cdc:	f7ff fedc 	bl	8005a98 <OLED_ShowChar>
 8005ce0:	e019      	b.n	8005d16 <OLED_ShowNum+0xca>
      }
			else 
			{
			  OLED_ShowChar(x+(size1/2+m)*t,y,temp+'0',size1,mode);
 8005ce2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	4413      	add	r3, r2
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	7bfa      	ldrb	r2, [r7, #15]
 8005cf2:	fb12 f303 	smulbb	r3, r2, r3
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	b2d8      	uxtb	r0, r3
 8005cfe:	7b7b      	ldrb	r3, [r7, #13]
 8005d00:	3330      	adds	r3, #48	; 0x30
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	f897 4020 	ldrb.w	r4, [r7, #32]
 8005d08:	79b9      	ldrb	r1, [r7, #6]
 8005d0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	4623      	mov	r3, r4
 8005d12:	f7ff fec1 	bl	8005a98 <OLED_ShowChar>
	for(t=0;t<len;t++)
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
 8005d1c:	7bfa      	ldrb	r2, [r7, #15]
 8005d1e:	797b      	ldrb	r3, [r7, #5]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d3a9      	bcc.n	8005c78 <OLED_ShowNum+0x2c>
			}
  }
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd90      	pop	{r4, r7, pc}
 8005d2c:	cccccccd 	.word	0xcccccccd

08005d30 <OLED_Init>:
     }
	 }
}
//OLED�ĳ�ʼ��
void OLED_Init(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
	OLED_RES_Clr();
 8005d34:	2200      	movs	r2, #0
 8005d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d3a:	483c      	ldr	r0, [pc, #240]	; (8005e2c <OLED_Init+0xfc>)
 8005d3c:	f7fc fdea 	bl	8002914 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8005d40:	20c8      	movs	r0, #200	; 0xc8
 8005d42:	f7fb f9af 	bl	80010a4 <HAL_Delay>
	OLED_RES_Set();
 8005d46:	2201      	movs	r2, #1
 8005d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d4c:	4837      	ldr	r0, [pc, #220]	; (8005e2c <OLED_Init+0xfc>)
 8005d4e:	f7fc fde1 	bl	8002914 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); /*display off*/ 
 8005d52:	2100      	movs	r1, #0
 8005d54:	20ae      	movs	r0, #174	; 0xae
 8005d56:	f7ff fd87 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); /*set lower column address*/ 
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	2002      	movs	r0, #2
 8005d5e:	f7ff fd83 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD); /*set higher column address*/ 
 8005d62:	2100      	movs	r1, #0
 8005d64:	2010      	movs	r0, #16
 8005d66:	f7ff fd7f 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD); /*set display start line*/ 
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	2040      	movs	r0, #64	; 0x40
 8005d6e:	f7ff fd7b 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD); /*set page address*/
 8005d72:	2100      	movs	r1, #0
 8005d74:	20b0      	movs	r0, #176	; 0xb0
 8005d76:	f7ff fd77 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); /*contract control*/ 
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	2081      	movs	r0, #129	; 0x81
 8005d7e:	f7ff fd73 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xcf,OLED_CMD); /*128*/ 
 8005d82:	2100      	movs	r1, #0
 8005d84:	20cf      	movs	r0, #207	; 0xcf
 8005d86:	f7ff fd6f 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); /*set segment remap*/ 
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	20a1      	movs	r0, #161	; 0xa1
 8005d8e:	f7ff fd6b 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); /*normal / reverse*/ 
 8005d92:	2100      	movs	r1, #0
 8005d94:	20a6      	movs	r0, #166	; 0xa6
 8005d96:	f7ff fd67 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); /*multiplex ratio*/ 
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	20a8      	movs	r0, #168	; 0xa8
 8005d9e:	f7ff fd63 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD); /*duty = 1/64*/ 
 8005da2:	2100      	movs	r1, #0
 8005da4:	203f      	movs	r0, #63	; 0x3f
 8005da6:	f7ff fd5f 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xad,OLED_CMD); /*set charge pump enable*/ 
 8005daa:	2100      	movs	r1, #0
 8005dac:	20ad      	movs	r0, #173	; 0xad
 8005dae:	f7ff fd5b 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x8b,OLED_CMD); /* 0x8B �ڹ� VCC */ 
 8005db2:	2100      	movs	r1, #0
 8005db4:	208b      	movs	r0, #139	; 0x8b
 8005db6:	f7ff fd57 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x33,OLED_CMD); /*0X30---0X33 set VPP 9V */ 
 8005dba:	2100      	movs	r1, #0
 8005dbc:	2033      	movs	r0, #51	; 0x33
 8005dbe:	f7ff fd53 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD); /*Com scan direction*/ 
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	20c8      	movs	r0, #200	; 0xc8
 8005dc6:	f7ff fd4f 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); /*set display offset*/ 
 8005dca:	2100      	movs	r1, #0
 8005dcc:	20d3      	movs	r0, #211	; 0xd3
 8005dce:	f7ff fd4b 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD); /* 0x20 */ 
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	f7ff fd47 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); /*set osc division*/ 
 8005dda:	2100      	movs	r1, #0
 8005ddc:	20d5      	movs	r0, #213	; 0xd5
 8005dde:	f7ff fd43 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD); 
 8005de2:	2100      	movs	r1, #0
 8005de4:	2080      	movs	r0, #128	; 0x80
 8005de6:	f7ff fd3f 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); /*set pre-charge period*/ 
 8005dea:	2100      	movs	r1, #0
 8005dec:	20d9      	movs	r0, #217	; 0xd9
 8005dee:	f7ff fd3b 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x1f,OLED_CMD); /*0x22*/ 
 8005df2:	2100      	movs	r1, #0
 8005df4:	201f      	movs	r0, #31
 8005df6:	f7ff fd37 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); /*set COM pins*/ 
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	20da      	movs	r0, #218	; 0xda
 8005dfe:	f7ff fd33 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); 
 8005e02:	2100      	movs	r1, #0
 8005e04:	2012      	movs	r0, #18
 8005e06:	f7ff fd2f 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0xdb,OLED_CMD); /*set vcomh*/ 
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	20db      	movs	r0, #219	; 0xdb
 8005e0e:	f7ff fd2b 	bl	8005868 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);
 8005e12:	2100      	movs	r1, #0
 8005e14:	2040      	movs	r0, #64	; 0x40
 8005e16:	f7ff fd27 	bl	8005868 <OLED_WR_Byte>
	OLED_Clear();
 8005e1a:	f7ff fdaf 	bl	800597c <OLED_Clear>
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/
 8005e1e:	2100      	movs	r1, #0
 8005e20:	20af      	movs	r0, #175	; 0xaf
 8005e22:	f7ff fd21 	bl	8005868 <OLED_WR_Byte>
}
 8005e26:	bf00      	nop
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	48000400 	.word	0x48000400

08005e30 <__libc_init_array>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4e0d      	ldr	r6, [pc, #52]	; (8005e68 <__libc_init_array+0x38>)
 8005e34:	4c0d      	ldr	r4, [pc, #52]	; (8005e6c <__libc_init_array+0x3c>)
 8005e36:	1ba4      	subs	r4, r4, r6
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	2500      	movs	r5, #0
 8005e3c:	42a5      	cmp	r5, r4
 8005e3e:	d109      	bne.n	8005e54 <__libc_init_array+0x24>
 8005e40:	4e0b      	ldr	r6, [pc, #44]	; (8005e70 <__libc_init_array+0x40>)
 8005e42:	4c0c      	ldr	r4, [pc, #48]	; (8005e74 <__libc_init_array+0x44>)
 8005e44:	f000 f820 	bl	8005e88 <_init>
 8005e48:	1ba4      	subs	r4, r4, r6
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	42a5      	cmp	r5, r4
 8005e50:	d105      	bne.n	8005e5e <__libc_init_array+0x2e>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e58:	4798      	blx	r3
 8005e5a:	3501      	adds	r5, #1
 8005e5c:	e7ee      	b.n	8005e3c <__libc_init_array+0xc>
 8005e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e62:	4798      	blx	r3
 8005e64:	3501      	adds	r5, #1
 8005e66:	e7f2      	b.n	8005e4e <__libc_init_array+0x1e>
 8005e68:	080078d0 	.word	0x080078d0
 8005e6c:	080078d0 	.word	0x080078d0
 8005e70:	080078d0 	.word	0x080078d0
 8005e74:	080078d4 	.word	0x080078d4

08005e78 <memset>:
 8005e78:	4402      	add	r2, r0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d100      	bne.n	8005e82 <memset+0xa>
 8005e80:	4770      	bx	lr
 8005e82:	f803 1b01 	strb.w	r1, [r3], #1
 8005e86:	e7f9      	b.n	8005e7c <memset+0x4>

08005e88 <_init>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr

08005e94 <_fini>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr
