
TypeC-Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000733c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a28  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f3c  08008f3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f44  08008f44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  2000000c  08008f58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  08008f58  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018684  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ede  00000000  00000000  000386c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001498  00000000  00000000  0003b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001310  00000000  00000000  0003ca38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021742  00000000  00000000  0003dd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001262d  00000000  00000000  0005f48a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbfdf  00000000  00000000  00071ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014da96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005688  00000000  00000000  0014db14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080074fc 	.word	0x080074fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080074fc 	.word	0x080074fc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800051e:	463b      	mov	r3, r7
 8000520:	2220      	movs	r2, #32
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f006 ffe1 	bl	80074ec <memset>

  /** Common config
  */
  hadc2.Instance = ADC2;
 800052a:	4b48      	ldr	r3, [pc, #288]	; (800064c <MX_ADC2_Init+0x134>)
 800052c:	4a48      	ldr	r2, [pc, #288]	; (8000650 <MX_ADC2_Init+0x138>)
 800052e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000530:	4b46      	ldr	r3, [pc, #280]	; (800064c <MX_ADC2_Init+0x134>)
 8000532:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000536:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000538:	4b44      	ldr	r3, [pc, #272]	; (800064c <MX_ADC2_Init+0x134>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053e:	4b43      	ldr	r3, [pc, #268]	; (800064c <MX_ADC2_Init+0x134>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000544:	4b41      	ldr	r3, [pc, #260]	; (800064c <MX_ADC2_Init+0x134>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800054a:	4b40      	ldr	r3, [pc, #256]	; (800064c <MX_ADC2_Init+0x134>)
 800054c:	2201      	movs	r2, #1
 800054e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000550:	4b3e      	ldr	r3, [pc, #248]	; (800064c <MX_ADC2_Init+0x134>)
 8000552:	2208      	movs	r2, #8
 8000554:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000556:	4b3d      	ldr	r3, [pc, #244]	; (800064c <MX_ADC2_Init+0x134>)
 8000558:	2200      	movs	r2, #0
 800055a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800055c:	4b3b      	ldr	r3, [pc, #236]	; (800064c <MX_ADC2_Init+0x134>)
 800055e:	2200      	movs	r2, #0
 8000560:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 5;
 8000562:	4b3a      	ldr	r3, [pc, #232]	; (800064c <MX_ADC2_Init+0x134>)
 8000564:	2205      	movs	r2, #5
 8000566:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000568:	4b38      	ldr	r3, [pc, #224]	; (800064c <MX_ADC2_Init+0x134>)
 800056a:	2200      	movs	r2, #0
 800056c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000570:	4b36      	ldr	r3, [pc, #216]	; (800064c <MX_ADC2_Init+0x134>)
 8000572:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000578:	4b34      	ldr	r3, [pc, #208]	; (800064c <MX_ADC2_Init+0x134>)
 800057a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800057e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000580:	4b32      	ldr	r3, [pc, #200]	; (800064c <MX_ADC2_Init+0x134>)
 8000582:	2201      	movs	r2, #1
 8000584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000588:	4b30      	ldr	r3, [pc, #192]	; (800064c <MX_ADC2_Init+0x134>)
 800058a:	2200      	movs	r2, #0
 800058c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <MX_ADC2_Init+0x134>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000596:	482d      	ldr	r0, [pc, #180]	; (800064c <MX_ADC2_Init+0x134>)
 8000598:	f001 fa52 	bl	8001a40 <HAL_ADC_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80005a2:	f000 fb71 	bl	8000c88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a6:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <MX_ADC2_Init+0x13c>)
 80005a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005aa:	2306      	movs	r3, #6
 80005ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80005ae:	2307      	movs	r3, #7
 80005b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005b2:	237f      	movs	r3, #127	; 0x7f
 80005b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005b6:	2304      	movs	r3, #4
 80005b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	4619      	mov	r1, r3
 80005c2:	4822      	ldr	r0, [pc, #136]	; (800064c <MX_ADC2_Init+0x134>)
 80005c4:	f001 fc96 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80005ce:	f000 fb5b 	bl	8000c88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC2_Init+0x140>)
 80005d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d6:	230c      	movs	r3, #12
 80005d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	481b      	ldr	r0, [pc, #108]	; (800064c <MX_ADC2_Init+0x134>)
 80005e0:	f001 fc88 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80005ea:	f000 fb4d 	bl	8000c88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_ADC2_Init+0x144>)
 80005f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005f2:	2312      	movs	r3, #18
 80005f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4619      	mov	r1, r3
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <MX_ADC2_Init+0x134>)
 80005fc:	f001 fc7a 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8000606:	f000 fb3f 	bl	8000c88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_ADC2_Init+0x148>)
 800060c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800060e:	2318      	movs	r3, #24
 8000610:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC2_Init+0x134>)
 8000618:	f001 fc6c 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC2_Init+0x10e>
  {
    Error_Handler();
 8000622:	f000 fb31 	bl	8000c88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_ADC2_Init+0x14c>)
 8000628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800062a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC2_Init+0x134>)
 8000636:	f001 fc5d 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC2_Init+0x12c>
  {
    Error_Handler();
 8000640:	f000 fb22 	bl	8000c88 <Error_Handler>
  }

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000030 	.word	0x20000030
 8000650:	50000100 	.word	0x50000100
 8000654:	04300002 	.word	0x04300002
 8000658:	08600004 	.word	0x08600004
 800065c:	0c900008 	.word	0x0c900008
 8000660:	10c00010 	.word	0x10c00010
 8000664:	14f00020 	.word	0x14f00020

08000668 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a37      	ldr	r2, [pc, #220]	; (8000764 <HAL_ADC_MspInit+0xfc>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d167      	bne.n	800075a <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <HAL_ADC_MspInit+0x100>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a36      	ldr	r2, [pc, #216]	; (8000768 <HAL_ADC_MspInit+0x100>)
 8000690:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b34      	ldr	r3, [pc, #208]	; (8000768 <HAL_ADC_MspInit+0x100>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b31      	ldr	r3, [pc, #196]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a30      	ldr	r2, [pc, #192]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <HAL_ADC_MspInit+0x100>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80006d2:	23c3      	movs	r3, #195	; 0xc3
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f002 ff14 	bl	8003514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ec:	2310      	movs	r3, #16
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	2303      	movs	r3, #3
 80006f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	481b      	ldr	r0, [pc, #108]	; (800076c <HAL_ADC_MspInit+0x104>)
 8000700:	f002 ff08 	bl	8003514 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000706:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <HAL_ADC_MspInit+0x10c>)
 8000708:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <HAL_ADC_MspInit+0x108>)
 800070c:	2224      	movs	r2, #36	; 0x24
 800070e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_ADC_MspInit+0x108>)
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_ADC_MspInit+0x108>)
 800072c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000730:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000734:	2220      	movs	r2, #32
 8000736:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_ADC_MspInit+0x108>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000740:	f002 fc0e 	bl	8002f60 <HAL_DMA_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800074a:	f000 fa9d 	bl	8000c88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000752:	655a      	str	r2, [r3, #84]	; 0x54
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_ADC_MspInit+0x108>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	50000100 	.word	0x50000100
 8000768:	40021000 	.word	0x40021000
 800076c:	48000800 	.word	0x48000800
 8000770:	200000b0 	.word	0x200000b0
 8000774:	40020008 	.word	0x40020008

08000778 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2230      	movs	r2, #48	; 0x30
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f006 feb1 	bl	80074ec <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_DAC1_Init+0x84>)
 800078c:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_DAC1_Init+0x88>)
 800078e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000790:	481a      	ldr	r0, [pc, #104]	; (80007fc <MX_DAC1_Init+0x84>)
 8000792:	f002 f99c 	bl	8002ace <HAL_DAC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800079c:	f000 fa74 	bl	8000c88 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80007a0:	2302      	movs	r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_DAC1_Init+0x84>)
 80007cc:	f002 fa1c 	bl	8002c08 <HAL_DAC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80007d6:	f000 fa57 	bl	8000c88 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	2210      	movs	r2, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_DAC1_Init+0x84>)
 80007e6:	f002 fa0f 	bl	8002c08 <HAL_DAC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 80007f0:	f000 fa4a 	bl	8000c88 <Error_Handler>
  }

}
 80007f4:	bf00      	nop
 80007f6:	3730      	adds	r7, #48	; 0x30
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000110 	.word	0x20000110
 8000800:	50000800 	.word	0x50000800

08000804 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a15      	ldr	r2, [pc, #84]	; (8000878 <HAL_DAC_MspInit+0x74>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d124      	bne.n	8000870 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_DAC_MspInit+0x78>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <HAL_DAC_MspInit+0x78>)
 800082c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_DAC_MspInit+0x78>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_DAC_MspInit+0x78>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_DAC_MspInit+0x78>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_DAC_MspInit+0x78>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000856:	2330      	movs	r3, #48	; 0x30
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f002 fe52 	bl	8003514 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	50000800 	.word	0x50000800
 800087c:	40021000 	.word	0x40021000

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_DMA_Init+0x50>)
 8000888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <MX_DMA_Init+0x50>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6493      	str	r3, [r2, #72]	; 0x48
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_DMA_Init+0x50>)
 8000894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_DMA_Init+0x50>)
 80008a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <MX_DMA_Init+0x50>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6493      	str	r3, [r2, #72]	; 0x48
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_DMA_Init+0x50>)
 80008ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	200b      	movs	r0, #11
 80008bc:	f002 f8d3 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008c0:	200b      	movs	r0, #11
 80008c2:	f002 f8ea 	bl	8002a9a <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ea:	4b4d      	ldr	r3, [pc, #308]	; (8000a20 <MX_GPIO_Init+0x14c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a4c      	ldr	r2, [pc, #304]	; (8000a20 <MX_GPIO_Init+0x14c>)
 80008f0:	f043 0320 	orr.w	r3, r3, #32
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b4a      	ldr	r3, [pc, #296]	; (8000a20 <MX_GPIO_Init+0x14c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0320 	and.w	r3, r3, #32
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <MX_GPIO_Init+0x14c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a46      	ldr	r2, [pc, #280]	; (8000a20 <MX_GPIO_Init+0x14c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <MX_GPIO_Init+0x14c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b41      	ldr	r3, [pc, #260]	; (8000a20 <MX_GPIO_Init+0x14c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a40      	ldr	r2, [pc, #256]	; (8000a20 <MX_GPIO_Init+0x14c>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <MX_GPIO_Init+0x14c>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <MX_GPIO_Init+0x14c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a3a      	ldr	r2, [pc, #232]	; (8000a20 <MX_GPIO_Init+0x14c>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <MX_GPIO_Init+0x14c>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CV_Pin|CC_Pin|OLED_D1_Pin|OLED_D0_Pin
 800094a:	2201      	movs	r2, #1
 800094c:	f643 4123 	movw	r1, #15395	; 0x3c23
 8000950:	4834      	ldr	r0, [pc, #208]	; (8000a24 <MX_GPIO_Init+0x150>)
 8000952:	f002 ff79 	bl	8003848 <HAL_GPIO_WritePin>
                          |OLED_DC_Pin|OLED_RES_Pin|LED_HEART_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095c:	4832      	ldr	r0, [pc, #200]	; (8000a28 <MX_GPIO_Init+0x154>)
 800095e:	f002 ff73 	bl	8003848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CV_Pin|CC_Pin|OLED_D1_Pin|OLED_D0_Pin
 8000962:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000966:	617b      	str	r3, [r7, #20]
                          |OLED_DC_Pin|OLED_RES_Pin|LED_HEART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	482a      	ldr	r0, [pc, #168]	; (8000a24 <MX_GPIO_Init+0x150>)
 800097c:	f002 fdca 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000980:	2304      	movs	r3, #4
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4824      	ldr	r0, [pc, #144]	; (8000a24 <MX_GPIO_Init+0x150>)
 8000994:	f002 fdbe 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000998:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_GPIO_Init+0x158>)
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	481d      	ldr	r0, [pc, #116]	; (8000a24 <MX_GPIO_Init+0x150>)
 80009ae:	f002 fdb1 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|POWER_CTRL_Pin;
 80009b2:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4818      	ldr	r0, [pc, #96]	; (8000a28 <MX_GPIO_Init+0x154>)
 80009c8:	f002 fda4 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f002 fd96 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80009e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <MX_GPIO_Init+0x154>)
 8000a02:	f002 fd87 	bl	8003514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2028      	movs	r0, #40	; 0x28
 8000a0c:	f002 f82b 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a10:	2028      	movs	r0, #40	; 0x28
 8000a12:	f002 f842 	bl	8002a9a <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000
 8000a24:	48000400 	.word	0x48000400
 8000a28:	48000800 	.word	0x48000800
 8000a2c:	10310000 	.word	0x10310000

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  unsigned int i=0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3a:	f000 fd50 	bl	80014de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3e:	f000 f8bd 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a42:	f7ff ff47 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a46:	f7ff ff1b 	bl	8000880 <MX_DMA_Init>
  MX_ADC2_Init();
 8000a4a:	f7ff fd65 	bl	8000518 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000a4e:	f7ff fe93 	bl	8000778 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8000a52:	f000 fc81 	bl	8001358 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000a56:	f000 faa5 	bl	8000fa4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000a5a:	f000 fb1d 	bl	8001098 <MX_TIM17_Init>
  MX_TIM4_Init();
 8000a5e:	f000 fa4b 	bl	8000ef8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000a62:	f000 f9fb 	bl	8000e5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000a66:	f006 fc9d 	bl	80073a4 <OLED_Init>
  HAL_TIM_Base_Start(&htim2);
 8000a6a:	484a      	ldr	r0, [pc, #296]	; (8000b94 <main+0x164>)
 8000a6c:	f003 ff66 	bl	800493c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc2,adc_buff,5);
 8000a70:	463b      	mov	r3, r7
 8000a72:	2205      	movs	r2, #5
 8000a74:	4619      	mov	r1, r3
 8000a76:	4848      	ldr	r0, [pc, #288]	; (8000b98 <main+0x168>)
 8000a78:	f001 f96a 	bl	8001d50 <HAL_ADC_Start_DMA>

  HAL_TIMEx_PWMN_Start(&htim16,TIM_CHANNEL_1);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4847      	ldr	r0, [pc, #284]	; (8000b9c <main+0x16c>)
 8000a80:	f005 f87e 	bl	8005b80 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim16,TIM_CHANNEL_1);
 8000a84:	2100      	movs	r1, #0
 8000a86:	4845      	ldr	r0, [pc, #276]	; (8000b9c <main+0x16c>)
 8000a88:	f004 f81c 	bl	8004ac4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim17,TIM_CHANNEL_1);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4844      	ldr	r0, [pc, #272]	; (8000ba0 <main+0x170>)
 8000a90:	f005 f876 	bl	8005b80 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim17,TIM_CHANNEL_1);
 8000a94:	2100      	movs	r1, #0
 8000a96:	4842      	ldr	r0, [pc, #264]	; (8000ba0 <main+0x170>)
 8000a98:	f004 f814 	bl	8004ac4 <HAL_TIM_PWM_Start>

  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	483f      	ldr	r0, [pc, #252]	; (8000ba4 <main+0x174>)
 8000aa6:	f002 f887 	bl	8002bb8 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2048);
 8000aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	483c      	ldr	r0, [pc, #240]	; (8000ba4 <main+0x174>)
 8000ab4:	f002 f880 	bl	8002bb8 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	483a      	ldr	r0, [pc, #232]	; (8000ba4 <main+0x174>)
 8000abc:	f002 f829 	bl	8002b12 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4838      	ldr	r0, [pc, #224]	; (8000ba4 <main+0x174>)
 8000ac4:	f002 f825 	bl	8002b12 <HAL_DAC_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000ac8:	213c      	movs	r1, #60	; 0x3c
 8000aca:	4837      	ldr	r0, [pc, #220]	; (8000ba8 <main+0x178>)
 8000acc:	f004 f9a0 	bl	8004e10 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i = (i+1)%100;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	4a35      	ldr	r2, [pc, #212]	; (8000bac <main+0x17c>)
 8000ad6:	fba2 1203 	umull	r1, r2, r2, r3
 8000ada:	0952      	lsrs	r2, r2, #5
 8000adc:	2164      	movs	r1, #100	; 0x64
 8000ade:	fb01 f202 	mul.w	r2, r1, r2
 8000ae2:	1a9b      	subs	r3, r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_TogglePin(LED_HEART_GPIO_Port, LED_HEART_Pin);
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	4831      	ldr	r0, [pc, #196]	; (8000bb0 <main+0x180>)
 8000aea:	f002 fec5 	bl	8003878 <HAL_GPIO_TogglePin>

    cnt1 = (uint32_t)(__HAL_TIM_GET_COUNTER(&htim4));
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <main+0x178>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af4:	4a2f      	ldr	r2, [pc, #188]	; (8000bb4 <main+0x184>)
 8000af6:	6013      	str	r3, [r2, #0]
	  OLED_ShowNum(0,8,adc_buff[0],4,16,1);
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	2310      	movs	r3, #16
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2304      	movs	r3, #4
 8000b04:	2108      	movs	r1, #8
 8000b06:	2000      	movs	r0, #0
 8000b08:	f006 fbda 	bl	80072c0 <OLED_ShowNum>
	  OLED_ShowNum(0,24,adc_buff[1],4,16,1);
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	2301      	movs	r3, #1
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	2310      	movs	r3, #16
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2304      	movs	r3, #4
 8000b18:	2118      	movs	r1, #24
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f006 fbd0 	bl	80072c0 <OLED_ShowNum>
	  OLED_ShowNum(0,40,adc_buff[2],4,16,1);
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	2301      	movs	r3, #1
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	2310      	movs	r3, #16
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	2128      	movs	r1, #40	; 0x28
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f006 fbc6 	bl	80072c0 <OLED_ShowNum>
	  OLED_ShowNum(64,8,adc_buff[3],4,16,1);
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	2301      	movs	r3, #1
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2304      	movs	r3, #4
 8000b40:	2108      	movs	r1, #8
 8000b42:	2040      	movs	r0, #64	; 0x40
 8000b44:	f006 fbbc 	bl	80072c0 <OLED_ShowNum>
	  OLED_ShowNum(64,24,adc_buff[4],4,16,1);
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	2310      	movs	r3, #16
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2304      	movs	r3, #4
 8000b54:	2118      	movs	r1, #24
 8000b56:	2040      	movs	r0, #64	; 0x40
 8000b58:	f006 fbb2 	bl	80072c0 <OLED_ShowNum>
	  OLED_ShowNum(64,40,cnt2,4,16,1);
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <main+0x188>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2301      	movs	r3, #1
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	2310      	movs	r3, #16
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2304      	movs	r3, #4
 8000b6a:	2128      	movs	r1, #40	; 0x28
 8000b6c:	2040      	movs	r0, #64	; 0x40
 8000b6e:	f006 fba7 	bl	80072c0 <OLED_ShowNum>
	  OLED_Refresh();
 8000b72:	f006 fa07 	bl	8006f84 <OLED_Refresh>
	  __HAL_TIM_SetCompare(&htim16, TIM_CHANNEL_1, i*5);
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <main+0x16c>)
 8000b78:	6819      	ldr	r1, [r3, #0]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	634b      	str	r3, [r1, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim17, TIM_CHANNEL_1, i*5);
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <main+0x170>)
 8000b86:	6819      	ldr	r1, [r3, #0]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	634b      	str	r3, [r1, #52]	; 0x34
	  i = (i+1)%100;
 8000b92:	e79d      	b.n	8000ad0 <main+0xa0>
 8000b94:	200001bc 	.word	0x200001bc
 8000b98:	20000030 	.word	0x20000030
 8000b9c:	20000208 	.word	0x20000208
 8000ba0:	20000170 	.word	0x20000170
 8000ba4:	20000110 	.word	0x20000110
 8000ba8:	20000124 	.word	0x20000124
 8000bac:	51eb851f 	.word	0x51eb851f
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	20000028 	.word	0x20000028
 8000bb8:	2000002c 	.word	0x2000002c

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0a4      	sub	sp, #144	; 0x90
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bc6:	2238      	movs	r2, #56	; 0x38
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 fc8e 	bl	80074ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2244      	movs	r2, #68	; 0x44
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f006 fc80 	bl	80074ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f002 fe75 	bl	80038dc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c00:	2303      	movs	r3, #3
 8000c02:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c08:	2328      	movs	r3, #40	; 0x28
 8000c0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 ff0d 	bl	8003a44 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c30:	f000 f82a 	bl	8000c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 fa10 	bl	8004074 <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c5a:	f000 f815 	bl	8000c88 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8000c5e:	f248 0301 	movw	r3, #32769	; 0x8001
 8000c62:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c68:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 fc1b 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c7c:	f000 f804 	bl	8000c88 <Error_Handler>
  }
}
 8000c80:	bf00      	nop
 8000c82:	3790      	adds	r7, #144	; 0x90
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <Error_Handler+0x6>

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cc6:	f002 fead 	bl	8003a24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 fc2e 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <DMA1_Channel1_IRQHandler+0x10>)
 8000d32:	f002 fa9f 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000b0 	.word	0x200000b0

08000d40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <USART1_IRQHandler+0x10>)
 8000d46:	f005 f983 	bl	8006050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000254 	.word	0x20000254

08000d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000d58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d5c:	f002 fda6 	bl	80038ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000d60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d64:	f002 fda2 	bl	80038ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000d78:	695a      	ldr	r2, [r3, #20]
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d04c      	beq.n	8000e1c <HAL_GPIO_EXTI_Callback+0xb0>
  {
	  if(GPIO_Pin == GPIO_PIN_14)
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d88:	d11b      	bne.n	8000dc2 <HAL_GPIO_EXTI_Callback+0x56>
	  {
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_14) == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 8000d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f002 fd41 	bl	8003818 <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461c      	mov	r4, r3
 8000d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f002 fd39 	bl	8003818 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d105      	bne.n	8000db8 <HAL_GPIO_EXTI_Callback+0x4c>
		  {
			  cnt2++;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e004      	b.n	8000dc2 <HAL_GPIO_EXTI_Callback+0x56>
		  }
		  else
		  {
			  cnt2--;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dc0:	6013      	str	r3, [r2, #0]
		  }
	  }
	  if(GPIO_Pin == GPIO_PIN_15)
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dc8:	d11b      	bne.n	8000e02 <HAL_GPIO_EXTI_Callback+0x96>
	  {
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_14) == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15))
 8000dca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f002 fd21 	bl	8003818 <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461c      	mov	r4, r3
 8000dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f002 fd19 	bl	8003818 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d105      	bne.n	8000df8 <HAL_GPIO_EXTI_Callback+0x8c>
		  {
			  cnt2--;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e004      	b.n	8000e02 <HAL_GPIO_EXTI_Callback+0x96>
		  }
		  else
		  {
			  cnt2++;
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e00:	6013      	str	r3, [r2, #0]
		  }
	  }
	  cnt2 = cnt2%60;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e04:	6819      	ldr	r1, [r3, #0]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e08:	fba3 2301 	umull	r2, r3, r3, r1
 8000e0c:	095a      	lsrs	r2, r3, #5
 8000e0e:	4613      	mov	r3, r2
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	1aca      	subs	r2, r1, r3
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e1a:	601a      	str	r2, [r3, #0]
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	40010400 	.word	0x40010400
 8000e28:	2000002c 	.word	0x2000002c
 8000e2c:	88888889 	.word	0x88888889

08000e30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <SystemInit+0x28>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <SystemInit+0x28>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SystemInit+0x28>)
 8000e46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM2_Init+0x98>)
 8000e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_TIM2_Init+0x98>)
 8000e84:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000e88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_TIM2_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_TIM2_Init+0x98>)
 8000e92:	2263      	movs	r2, #99	; 0x63
 8000e94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_TIM2_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_TIM2_Init+0x98>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea2:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <MX_TIM2_Init+0x98>)
 8000ea4:	f003 fcf2 	bl	800488c <HAL_TIM_Base_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000eae:	f7ff feeb 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_TIM2_Init+0x98>)
 8000ec0:	f004 f944 	bl	800514c <HAL_TIM_ConfigClockSource>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eca:	f7ff fedd 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_TIM2_Init+0x98>)
 8000edc:	f004 ff04 	bl	8005ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ee6:	f7ff fecf 	bl	8000c88 <Error_Handler>
  }

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200001bc 	.word	0x200001bc

08000ef8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	; 0x30
 8000efc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2224      	movs	r2, #36	; 0x24
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f006 faf0 	bl	80074ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_TIM4_Init+0xa4>)
 8000f18:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <MX_TIM4_Init+0xa8>)
 8000f1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_TIM4_Init+0xa4>)
 8000f1e:	2207      	movs	r2, #7
 8000f20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <MX_TIM4_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000f28:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_TIM4_Init+0xa4>)
 8000f2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_TIM4_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_TIM4_Init+0xa4>)
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f44:	2301      	movs	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f54:	2301      	movs	r3, #1
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_TIM4_Init+0xa4>)
 8000f68:	f003 feac 	bl	8004cc4 <HAL_TIM_Encoder_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f72:	f7ff fe89 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <MX_TIM4_Init+0xa4>)
 8000f84:	f004 feb0 	bl	8005ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f8e:	f7ff fe7b 	bl	8000c88 <Error_Handler>
  }

}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	; 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000124 	.word	0x20000124
 8000fa0:	40000800 	.word	0x40000800

08000fa4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	; 0x50
 8000fa8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000faa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]
 8000fba:	615a      	str	r2, [r3, #20]
 8000fbc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2234      	movs	r2, #52	; 0x34
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f006 fa91 	bl	80074ec <memset>

  htim16.Instance = TIM16;
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <MX_TIM16_Init+0xec>)
 8000fcc:	4a31      	ldr	r2, [pc, #196]	; (8001094 <MX_TIM16_Init+0xf0>)
 8000fce:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3;
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <MX_TIM16_Init+0xec>)
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_TIM16_Init+0xec>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_TIM16_Init+0xec>)
 8000fde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fe2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <MX_TIM16_Init+0xec>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <MX_TIM16_Init+0xec>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <MX_TIM16_Init+0xec>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ff6:	4826      	ldr	r0, [pc, #152]	; (8001090 <MX_TIM16_Init+0xec>)
 8000ff8:	f003 fc48 	bl	800488c <HAL_TIM_Base_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001002:	f7ff fe41 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001006:	4822      	ldr	r0, [pc, #136]	; (8001090 <MX_TIM16_Init+0xec>)
 8001008:	f003 fcfa 	bl	8004a00 <HAL_TIM_PWM_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001012:	f7ff fe39 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001016:	2360      	movs	r3, #96	; 0x60
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500;
 800101a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001020:	2300      	movs	r3, #0
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001034:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	4814      	ldr	r0, [pc, #80]	; (8001090 <MX_TIM16_Init+0xec>)
 800103e:	f003 ff75 	bl	8004f2c <HAL_TIM_PWM_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001048:	f7ff fe1e 	bl	8000c88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 2;
 8001058:	2302      	movs	r3, #2
 800105a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001064:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <MX_TIM16_Init+0xec>)
 8001074:	f004 feba 	bl	8005dec <HAL_TIMEx_ConfigBreakDeadTime>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800107e:	f7ff fe03 	bl	8000c88 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <MX_TIM16_Init+0xec>)
 8001084:	f000 f90c 	bl	80012a0 <HAL_TIM_MspPostInit>

}
 8001088:	bf00      	nop
 800108a:	3750      	adds	r7, #80	; 0x50
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000208 	.word	0x20000208
 8001094:	40014400 	.word	0x40014400

08001098 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2234      	movs	r2, #52	; 0x34
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f006 fa17 	bl	80074ec <memset>

  htim17.Instance = TIM17;
 80010be:	4b31      	ldr	r3, [pc, #196]	; (8001184 <MX_TIM17_Init+0xec>)
 80010c0:	4a31      	ldr	r2, [pc, #196]	; (8001188 <MX_TIM17_Init+0xf0>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3;
 80010c4:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <MX_TIM17_Init+0xec>)
 80010c6:	2203      	movs	r2, #3
 80010c8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <MX_TIM17_Init+0xec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 80010d0:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <MX_TIM17_Init+0xec>)
 80010d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <MX_TIM17_Init+0xec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <MX_TIM17_Init+0xec>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <MX_TIM17_Init+0xec>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80010ea:	4826      	ldr	r0, [pc, #152]	; (8001184 <MX_TIM17_Init+0xec>)
 80010ec:	f003 fbce 	bl	800488c <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80010f6:	f7ff fdc7 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80010fa:	4822      	ldr	r0, [pc, #136]	; (8001184 <MX_TIM17_Init+0xec>)
 80010fc:	f003 fc80 	bl	8004a00 <HAL_TIM_PWM_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001106:	f7ff fdbf 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110a:	2360      	movs	r3, #96	; 0x60
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500;
 800110e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001112:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001114:	2300      	movs	r3, #0
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001118:	2300      	movs	r3, #0
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001128:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	4814      	ldr	r0, [pc, #80]	; (8001184 <MX_TIM17_Init+0xec>)
 8001132:	f003 fefb 	bl	8004f2c <HAL_TIM_PWM_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 800113c:	f7ff fda4 	bl	8000c88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 2;
 800114c:	2302      	movs	r3, #2
 800114e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001158:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <MX_TIM17_Init+0xec>)
 8001168:	f004 fe40 	bl	8005dec <HAL_TIMEx_ConfigBreakDeadTime>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8001172:	f7ff fd89 	bl	8000c88 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <MX_TIM17_Init+0xec>)
 8001178:	f000 f892 	bl	80012a0 <HAL_TIM_MspPostInit>

}
 800117c:	bf00      	nop
 800117e:	3750      	adds	r7, #80	; 0x50
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000170 	.word	0x20000170
 8001188:	40014800 	.word	0x40014800

0800118c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800119c:	d10c      	bne.n	80011b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_TIM_Base_MspInit+0x80>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	4a1a      	ldr	r2, [pc, #104]	; (800120c <HAL_TIM_Base_MspInit+0x80>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6593      	str	r3, [r2, #88]	; 0x58
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_TIM_Base_MspInit+0x80>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80011b6:	e022      	b.n	80011fe <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <HAL_TIM_Base_MspInit+0x84>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10c      	bne.n	80011dc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_TIM_Base_MspInit+0x80>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <HAL_TIM_Base_MspInit+0x80>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6613      	str	r3, [r2, #96]	; 0x60
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_TIM_Base_MspInit+0x80>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
}
 80011da:	e010      	b.n	80011fe <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM17)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <HAL_TIM_Base_MspInit+0x88>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10b      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_TIM_Base_MspInit+0x80>)
 80011e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_TIM_Base_MspInit+0x80>)
 80011ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f0:	6613      	str	r3, [r2, #96]	; 0x60
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_TIM_Base_MspInit+0x80>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
}
 80011fe:	bf00      	nop
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40014400 	.word	0x40014400
 8001214:	40014800 	.word	0x40014800

08001218 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a18      	ldr	r2, [pc, #96]	; (8001298 <HAL_TIM_Encoder_MspInit+0x80>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d129      	bne.n	800128e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_TIM_Encoder_MspInit+0x84>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_TIM_Encoder_MspInit+0x84>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6593      	str	r3, [r2, #88]	; 0x58
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_TIM_Encoder_MspInit+0x84>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_TIM_Encoder_MspInit+0x84>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a11      	ldr	r2, [pc, #68]	; (800129c <HAL_TIM_Encoder_MspInit+0x84>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_TIM_Encoder_MspInit+0x84>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800126a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001270:	2312      	movs	r3, #18
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001274:	2301      	movs	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800127c:	230a      	movs	r3, #10
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128a:	f002 f943 	bl	8003514 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40000800 	.word	0x40000800
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a22      	ldr	r2, [pc, #136]	; (8001348 <HAL_TIM_MspPostInit+0xa8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d11c      	bne.n	80012fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_TIM_MspPostInit+0xac>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a21      	ldr	r2, [pc, #132]	; (800134c <HAL_TIM_MspPostInit+0xac>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_TIM_MspPostInit+0xac>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80012da:	2350      	movs	r3, #80	; 0x50
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80012ea:	2301      	movs	r3, #1
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4816      	ldr	r0, [pc, #88]	; (8001350 <HAL_TIM_MspPostInit+0xb0>)
 80012f6:	f002 f90d 	bl	8003514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80012fa:	e021      	b.n	8001340 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM17)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <HAL_TIM_MspPostInit+0xb4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d11c      	bne.n	8001340 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_TIM_MspPostInit+0xac>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <HAL_TIM_MspPostInit+0xac>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_TIM_MspPostInit+0xac>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800131e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001330:	2301      	movs	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <HAL_TIM_MspPostInit+0xb0>)
 800133c:	f002 f8ea 	bl	8003514 <HAL_GPIO_Init>
}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40014400 	.word	0x40014400
 800134c:	40021000 	.word	0x40021000
 8001350:	48000400 	.word	0x48000400
 8001354:	40014800 	.word	0x40014800

08001358 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_USART1_UART_Init+0x94>)
 800135e:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <MX_USART1_UART_Init+0x98>)
 8001360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_USART1_UART_Init+0x94>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_USART1_UART_Init+0x94>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_USART1_UART_Init+0x94>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_USART1_UART_Init+0x94>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_USART1_UART_Init+0x94>)
 800139c:	2200      	movs	r2, #0
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_USART1_UART_Init+0x94>)
 80013a6:	f004 fde6 	bl	8005f76 <HAL_MultiProcessor_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80013b0:	f7ff fc6a 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b4:	2100      	movs	r1, #0
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_USART1_UART_Init+0x94>)
 80013b8:	f005 fc9a 	bl	8006cf0 <HAL_UARTEx_SetTxFifoThreshold>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f7ff fc61 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <MX_USART1_UART_Init+0x94>)
 80013ca:	f005 fccf 	bl	8006d6c <HAL_UARTEx_SetRxFifoThreshold>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80013d4:	f7ff fc58 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_USART1_UART_Init+0x94>)
 80013da:	f005 fc50 	bl	8006c7e <HAL_UARTEx_DisableFifoMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80013e4:	f7ff fc50 	bl	8000c88 <Error_Handler>
  }

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000254 	.word	0x20000254
 80013f0:	40013800 	.word	0x40013800

080013f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <HAL_UART_MspInit+0x90>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d131      	bne.n	800147a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <HAL_UART_MspInit+0x94>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141a:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <HAL_UART_MspInit+0x94>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6613      	str	r3, [r2, #96]	; 0x60
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_UART_MspInit+0x94>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_UART_MspInit+0x94>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <HAL_UART_MspInit+0x94>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_UART_MspInit+0x94>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001446:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144c:	2312      	movs	r3, #18
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001458:	2307      	movs	r3, #7
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f002 f855 	bl	8003514 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2025      	movs	r0, #37	; 0x25
 8001470:	f001 faf9 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001474:	2025      	movs	r0, #37	; 0x25
 8001476:	f001 fb10 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40013800 	.word	0x40013800
 8001488:	40021000 	.word	0x40021000

0800148c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800148e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <LoopForever+0xe>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a8:	4c0b      	ldr	r4, [pc, #44]	; (80014d8 <LoopForever+0x16>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b6:	f7ff fcbb 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f005 fff3 	bl	80074a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014be:	f7ff fab7 	bl	8000a30 <main>

080014c2 <LoopForever>:

LoopForever:
    b LoopForever
 80014c2:	e7fe      	b.n	80014c2 <LoopForever>
  ldr   r0, =_estack
 80014c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014d0:	08008f4c 	.word	0x08008f4c
  ldr r2, =_sbss
 80014d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014d8:	20000764 	.word	0x20000764

080014dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC1_2_IRQHandler>

080014de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f001 fab1 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 f80e 	bl	8001510 <HAL_InitTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	e001      	b.n	8001504 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001500:	f7ff fbc6 	bl	8000c90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001504:	79fb      	ldrb	r3, [r7, #7]

}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_InitTick+0x68>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d022      	beq.n	800156a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_InitTick+0x6c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_InitTick+0x68>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001530:	fbb1 f3f3 	udiv	r3, r1, r3
 8001534:	fbb2 f3f3 	udiv	r3, r2, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f001 fabc 	bl	8002ab6 <HAL_SYSTICK_Config>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10f      	bne.n	8001564 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	d809      	bhi.n	800155e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154a:	2200      	movs	r2, #0
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	f04f 30ff 	mov.w	r0, #4294967295
 8001552:	f001 fa88 	bl	8002a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_InitTick+0x70>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e007      	b.n	800156e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e004      	b.n	800156e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e001      	b.n	800156e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000008 	.word	0x20000008
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x1c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x20>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4413      	add	r3, r2
 8001592:	4a03      	ldr	r2, [pc, #12]	; (80015a0 <HAL_IncTick+0x1c>)
 8001594:	6013      	str	r3, [r2, #0]
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	200002e0 	.word	0x200002e0
 80015a4:	20000008 	.word	0x20000008

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200002e0 	.word	0x200002e0

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff ffee 	bl	80015a8 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d004      	beq.n	80015e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_Delay+0x40>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e4:	bf00      	nop
 80015e6:	f7ff ffdf 	bl	80015a8 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d8f7      	bhi.n	80015e6 <HAL_Delay+0x26>
  {
  }
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008

08001604 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3360      	adds	r3, #96	; 0x60
 800167e:	461a      	mov	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <LL_ADC_SetOffset+0x44>)
 800168e:	4013      	ands	r3, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	4313      	orrs	r3, r2
 800169c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016a4:	bf00      	nop
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	03fff000 	.word	0x03fff000

080016b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3360      	adds	r3, #96	; 0x60
 80016c2:	461a      	mov	r2, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3360      	adds	r3, #96	; 0x60
 80016f0:	461a      	mov	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	431a      	orrs	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001716:	b480      	push	{r7}
 8001718:	b087      	sub	sp, #28
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3360      	adds	r3, #96	; 0x60
 8001726:	461a      	mov	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	431a      	orrs	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001740:	bf00      	nop
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3360      	adds	r3, #96	; 0x60
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	431a      	orrs	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	615a      	str	r2, [r3, #20]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b087      	sub	sp, #28
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3330      	adds	r3, #48	; 0x30
 80017de:	461a      	mov	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	4413      	add	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	211f      	movs	r1, #31
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	401a      	ands	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0e9b      	lsrs	r3, r3, #26
 8001806:	f003 011f 	and.w	r1, r3, #31
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001826:	b480      	push	{r7}
 8001828:	b087      	sub	sp, #28
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3314      	adds	r3, #20
 8001836:	461a      	mov	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	0e5b      	lsrs	r3, r3, #25
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	4413      	add	r3, r2
 8001844:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	0d1b      	lsrs	r3, r3, #20
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2107      	movs	r1, #7
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	0d1b      	lsrs	r3, r3, #20
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	431a      	orrs	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0318 	and.w	r3, r3, #24
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018a0:	40d9      	lsrs	r1, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	400b      	ands	r3, r1
 80018a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018aa:	431a      	orrs	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	0007ffff 	.word	0x0007ffff

080018c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 031f 	and.w	r3, r3, #31
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6093      	str	r3, [r2, #8]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001918:	d101      	bne.n	800191e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800193c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001940:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001968:	d101      	bne.n	800196e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800198c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <LL_ADC_IsEnabled+0x18>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <LL_ADC_IsEnabled+0x1a>
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019de:	f043 0204 	orr.w	r2, r3, #4
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d101      	bne.n	8001a0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e16b      	b.n	8001d32 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7fe fdfd 	bl	8000668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff3f 	bl	8001904 <LL_ADC_IsDeepPowerDownEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff25 	bl	80018e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff5a 	bl	8001954 <LL_ADC_IsInternalRegulatorEnabled>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d113      	bne.n	8001ace <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff3e 	bl	800192c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001ab0:	4ba2      	ldr	r3, [pc, #648]	; (8001d3c <HAL_ADC_Init+0x2fc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	4aa2      	ldr	r2, [pc, #648]	; (8001d40 <HAL_ADC_Init+0x300>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f9      	bne.n	8001ac2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff3e 	bl	8001954 <LL_ADC_IsInternalRegulatorEnabled>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10d      	bne.n	8001afa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	f043 0210 	orr.w	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff77 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001b04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8106 	bne.w	8001d20 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 8102 	bne.w	8001d20 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b24:	f043 0202 	orr.w	r2, r3, #2
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff37 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d111      	bne.n	8001b60 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001b40:	f7ff ff30 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b44:	4604      	mov	r4, r0
 8001b46:	487f      	ldr	r0, [pc, #508]	; (8001d44 <HAL_ADC_Init+0x304>)
 8001b48:	f7ff ff2c 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4323      	orrs	r3, r4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	487b      	ldr	r0, [pc, #492]	; (8001d48 <HAL_ADC_Init+0x308>)
 8001b5c:	f7ff fd52 	bl	8001604 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7f5b      	ldrb	r3, [r3, #29]
 8001b64:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b6a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b70:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b76:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b7e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d106      	bne.n	8001b9c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	3b01      	subs	r3, #1
 8001b94:	045b      	lsls	r3, r3, #17
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d009      	beq.n	8001bb8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_ADC_Init+0x30c>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	69b9      	ldr	r1, [r7, #24]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff03 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001bec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff10 	bl	8001a18 <LL_ADC_INJ_IsConversionOngoing>
 8001bf8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d16d      	bne.n	8001cdc <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d16a      	bne.n	8001cdc <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c0a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c12:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c22:	f023 0302 	bic.w	r3, r3, #2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d017      	beq.n	8001c68 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6911      	ldr	r1, [r2, #16]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001c66:	e013      	b.n	8001c90 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d118      	bne.n	8001ccc <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	611a      	str	r2, [r3, #16]
 8001cca:	e007      	b.n	8001cdc <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d10c      	bne.n	8001cfe <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f023 010f 	bic.w	r1, r3, #15
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	1e5a      	subs	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfc:	e007      	b.n	8001d0e <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 020f 	bic.w	r2, r2, #15
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	f043 0201 	orr.w	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d1e:	e007      	b.n	8001d30 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	f043 0210 	orr.w	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d30:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd90      	pop	{r4, r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	053e2d63 	.word	0x053e2d63
 8001d44:	50000100 	.word	0x50000100
 8001d48:	50000300 	.word	0x50000300
 8001d4c:	fff04007 	.word	0xfff04007

08001d50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d5c:	4851      	ldr	r0, [pc, #324]	; (8001ea4 <HAL_ADC_Start_DMA+0x154>)
 8001d5e:	f7ff fdb1 	bl	80018c4 <LL_ADC_GetMultimode>
 8001d62:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fe42 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 808f 	bne.w	8001e94 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_Start_DMA+0x34>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e08a      	b.n	8001e9a <HAL_ADC_Start_DMA+0x14a>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d002      	beq.n	8001d9e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b09      	cmp	r3, #9
 8001d9c:	d173      	bne.n	8001e86 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fc98 	bl	80026d4 <ADC_Enable>
 8001da4:	4603      	mov	r3, r0
 8001da6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d166      	bne.n	8001e7c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a38      	ldr	r2, [pc, #224]	; (8001ea8 <HAL_ADC_Start_DMA+0x158>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d002      	beq.n	8001dd2 <HAL_ADC_Start_DMA+0x82>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e001      	b.n	8001dd6 <HAL_ADC_Start_DMA+0x86>
 8001dd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d002      	beq.n	8001de4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e00:	f023 0206 	bic.w	r2, r3, #6
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	661a      	str	r2, [r3, #96]	; 0x60
 8001e08:	e002      	b.n	8001e10 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_ADC_Start_DMA+0x15c>)
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <HAL_ADC_Start_DMA+0x160>)
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <HAL_ADC_Start_DMA+0x164>)
 8001e26:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	221c      	movs	r2, #28
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0210 	orr.w	r2, r2, #16
 8001e46:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3340      	adds	r3, #64	; 0x40
 8001e62:	4619      	mov	r1, r3
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f001 f922 	bl	80030b0 <HAL_DMA_Start_IT>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fda8 	bl	80019ca <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e7a:	e00d      	b.n	8001e98 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001e84:	e008      	b.n	8001e98 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001e92:	e001      	b.n	8001e98 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
 8001e96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	50000300 	.word	0x50000300
 8001ea8:	50000100 	.word	0x50000100
 8001eac:	08002789 	.word	0x08002789
 8001eb0:	08002861 	.word	0x08002861
 8001eb4:	0800287d 	.word	0x0800287d

08001eb8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b0b6      	sub	sp, #216	; 0xd8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x22>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e3c7      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x7b2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fd65 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 83ac 	bne.w	8002688 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f7ff fc46 	bl	80017ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fd53 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001f4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fd5f 	bl	8001a18 <LL_ADC_INJ_IsConversionOngoing>
 8001f5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 81d9 	bne.w	800231a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 81d4 	bne.w	800231a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f7a:	d10f      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7ff fc4d 	bl	8001826 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fbf4 	bl	8001782 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f9a:	e00e      	b.n	8001fba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f7ff fc3c 	bl	8001826 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fbe4 	bl	8001782 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d022      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6919      	ldr	r1, [r3, #16]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fec:	f7ff fb3e 	bl	800166c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6919      	ldr	r1, [r3, #16]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f7ff fb8a 	bl	8001716 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6919      	ldr	r1, [r3, #16]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	7f1b      	ldrb	r3, [r3, #28]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x124>
 8002012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002016:	e000      	b.n	800201a <HAL_ADC_ConfigChannel+0x126>
 8002018:	2300      	movs	r3, #0
 800201a:	461a      	mov	r2, r3
 800201c:	f7ff fb96 	bl	800174c <LL_ADC_SetOffsetSaturation>
 8002020:	e17b      	b.n	800231a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fb43 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 800202e:	4603      	mov	r3, r0
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10a      	bne.n	800204e <HAL_ADC_ConfigChannel+0x15a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fb38 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	e01e      	b.n	800208c <HAL_ADC_ConfigChannel+0x198>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fb2d 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800206c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002074:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800207c:	2320      	movs	r3, #32
 800207e:	e004      	b.n	800208a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1b0>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	e018      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x1e2>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80020b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80020c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e004      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80020cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d106      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fafc 	bl	80016e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fae0 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10a      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x220>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2101      	movs	r1, #1
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fad5 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	f003 021f 	and.w	r2, r3, #31
 8002112:	e01e      	b.n	8002152 <HAL_ADC_ConfigChannel+0x25e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff faca 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002136:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800213a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002142:	2320      	movs	r3, #32
 8002144:	e004      	b.n	8002150 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <HAL_ADC_ConfigChannel+0x276>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0e9b      	lsrs	r3, r3, #26
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	e018      	b.n	800219c <HAL_ADC_ConfigChannel+0x2a8>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800217e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800218e:	2320      	movs	r3, #32
 8002190:	e004      	b.n	800219c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	429a      	cmp	r2, r3
 800219e:	d106      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	2101      	movs	r1, #1
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fa99 	bl	80016e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2102      	movs	r1, #2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fa7d 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <HAL_ADC_ConfigChannel+0x2e6>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2102      	movs	r1, #2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fa72 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 80021d0:	4603      	mov	r3, r0
 80021d2:	0e9b      	lsrs	r3, r3, #26
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	e01e      	b.n	8002218 <HAL_ADC_ConfigChannel+0x324>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2102      	movs	r1, #2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fa67 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002200:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e004      	b.n	8002216 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800220c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x33c>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	e016      	b.n	800225e <HAL_ADC_ConfigChannel+0x36a>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002250:	2320      	movs	r3, #32
 8002252:	e004      	b.n	800225e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	429a      	cmp	r2, r3
 8002260:	d106      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	2102      	movs	r1, #2
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fa38 	bl	80016e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2103      	movs	r1, #3
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fa1c 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <HAL_ADC_ConfigChannel+0x3a8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2103      	movs	r1, #3
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fa11 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	f003 021f 	and.w	r2, r3, #31
 800229a:	e017      	b.n	80022cc <HAL_ADC_ConfigChannel+0x3d8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2103      	movs	r1, #3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fa06 	bl	80016b4 <LL_ADC_GetOffsetChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80022b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80022b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80022be:	2320      	movs	r3, #32
 80022c0:	e003      	b.n	80022ca <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80022c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x3f0>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	e011      	b.n	8002308 <HAL_ADC_ConfigChannel+0x414>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	429a      	cmp	r2, r3
 800230a:	d106      	bne.n	800231a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2200      	movs	r2, #0
 8002312:	2103      	movs	r1, #3
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f9e3 	bl	80016e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fb40 	bl	80019a4 <LL_ADC_IsEnabled>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8140 	bne.w	80025ac <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6819      	ldr	r1, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	461a      	mov	r2, r3
 800233a:	f7ff fa9f 	bl	800187c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	4a8f      	ldr	r2, [pc, #572]	; (8002580 <HAL_ADC_ConfigChannel+0x68c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	f040 8131 	bne.w	80025ac <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x47e>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	3301      	adds	r3, #1
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2b09      	cmp	r3, #9
 8002368:	bf94      	ite	ls
 800236a:	2301      	movls	r3, #1
 800236c:	2300      	movhi	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	e019      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x4b2>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002382:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e003      	b.n	8002396 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800238e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2b09      	cmp	r3, #9
 800239e:	bf94      	ite	ls
 80023a0:	2301      	movls	r3, #1
 80023a2:	2300      	movhi	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d079      	beq.n	800249e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d107      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x4d2>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	3301      	adds	r3, #1
 80023be:	069b      	lsls	r3, r3, #26
 80023c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c4:	e015      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x4fe>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80023e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	069b      	lsls	r3, r3, #26
 80023ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x51e>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	3301      	adds	r3, #1
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	e017      	b.n	8002442 <HAL_ADC_ConfigChannel+0x54e>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002422:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e003      	b.n	8002436 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800242e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	3301      	adds	r3, #1
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	ea42 0103 	orr.w	r1, r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x574>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0e9b      	lsrs	r3, r3, #26
 8002458:	3301      	adds	r3, #1
 800245a:	f003 021f 	and.w	r2, r3, #31
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	051b      	lsls	r3, r3, #20
 8002466:	e018      	b.n	800249a <HAL_ADC_ConfigChannel+0x5a6>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002478:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800247a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e003      	b.n	800248c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	3301      	adds	r3, #1
 800248e:	f003 021f 	and.w	r2, r3, #31
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800249a:	430b      	orrs	r3, r1
 800249c:	e081      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d107      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x5c6>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0e9b      	lsrs	r3, r3, #26
 80024b0:	3301      	adds	r3, #1
 80024b2:	069b      	lsls	r3, r3, #26
 80024b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b8:	e015      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x5f2>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80024d2:	2320      	movs	r3, #32
 80024d4:	e003      	b.n	80024de <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	069b      	lsls	r3, r3, #26
 80024e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x612>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	3301      	adds	r3, #1
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2101      	movs	r1, #1
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	e017      	b.n	8002536 <HAL_ADC_ConfigChannel+0x642>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	61fb      	str	r3, [r7, #28]
  return result;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800251e:	2320      	movs	r3, #32
 8002520:	e003      	b.n	800252a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	ea42 0103 	orr.w	r1, r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x66e>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	3301      	adds	r3, #1
 800254e:	f003 021f 	and.w	r2, r3, #31
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	3b1e      	subs	r3, #30
 800255a:	051b      	lsls	r3, r3, #20
 800255c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002560:	e01e      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x6ac>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	613b      	str	r3, [r7, #16]
  return result;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d104      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800257a:	2320      	movs	r3, #32
 800257c:	e006      	b.n	800258c <HAL_ADC_ConfigChannel+0x698>
 800257e:	bf00      	nop
 8002580:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	3301      	adds	r3, #1
 800258e:	f003 021f 	and.w	r2, r3, #31
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	3b1e      	subs	r3, #30
 800259a:	051b      	lsls	r3, r3, #20
 800259c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a0:	430b      	orrs	r3, r1
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	4619      	mov	r1, r3
 80025a8:	f7ff f93d 	bl	8001826 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_ADC_ConfigChannel+0x7bc>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d070      	beq.n	800269a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025b8:	483e      	ldr	r0, [pc, #248]	; (80026b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80025ba:	f7ff f849 	bl	8001650 <LL_ADC_GetCommonPathInternalCh>
 80025be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3c      	ldr	r2, [pc, #240]	; (80026b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d004      	beq.n	80025d6 <HAL_ADC_ConfigChannel+0x6e2>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a3a      	ldr	r2, [pc, #232]	; (80026bc <HAL_ADC_ConfigChannel+0x7c8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d126      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d120      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ea:	d156      	bne.n	800269a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025f4:	4619      	mov	r1, r3
 80025f6:	482f      	ldr	r0, [pc, #188]	; (80026b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80025f8:	f7ff f817 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025fc:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <HAL_ADC_ConfigChannel+0x7cc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	099a      	lsrs	r2, r3, #6
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002614:	e002      	b.n	800261c <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b01      	subs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f9      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002622:	e03a      	b.n	800269a <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <HAL_ADC_ConfigChannel+0x7d4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d113      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x762>
 800262e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10d      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a23      	ldr	r2, [pc, #140]	; (80026cc <HAL_ADC_ConfigChannel+0x7d8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d02a      	beq.n	800269a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264c:	4619      	mov	r1, r3
 800264e:	4819      	ldr	r0, [pc, #100]	; (80026b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002650:	f7fe ffeb 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002654:	e021      	b.n	800269a <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d11c      	bne.n	800269a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d116      	bne.n	800269a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a16      	ldr	r2, [pc, #88]	; (80026cc <HAL_ADC_ConfigChannel+0x7d8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d011      	beq.n	800269a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800267a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800267e:	4619      	mov	r1, r3
 8002680:	480c      	ldr	r0, [pc, #48]	; (80026b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002682:	f7fe ffd2 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
 8002686:	e008      	b.n	800269a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80026a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	37d8      	adds	r7, #216	; 0xd8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	80080000 	.word	0x80080000
 80026b4:	50000300 	.word	0x50000300
 80026b8:	c3210000 	.word	0xc3210000
 80026bc:	90c00010 	.word	0x90c00010
 80026c0:	20000000 	.word	0x20000000
 80026c4:	053e2d63 	.word	0x053e2d63
 80026c8:	c7520000 	.word	0xc7520000
 80026cc:	50000100 	.word	0x50000100
 80026d0:	cb840000 	.word	0xcb840000

080026d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f95f 	bl	80019a4 <LL_ADC_IsEnabled>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d146      	bne.n	800277a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <ADC_Enable+0xb0>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00d      	beq.n	8002716 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	f043 0210 	orr.w	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e032      	b.n	800277c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f92e 	bl	800197c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002720:	f7fe ff42 	bl	80015a8 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002726:	e021      	b.n	800276c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff f939 	bl	80019a4 <LL_ADC_IsEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff f91d 	bl	800197c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002742:	f7fe ff31 	bl	80015a8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d90d      	bls.n	800276c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	f043 0210 	orr.w	r2, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e007      	b.n	800277c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d1d6      	bne.n	8002728 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	8000003f 	.word	0x8000003f

08002788 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d14b      	bne.n	800283a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d021      	beq.n	8002800 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fff1 	bl	80017a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d032      	beq.n	8002832 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d12b      	bne.n	8002832 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11f      	bne.n	8002832 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f6:	f043 0201 	orr.w	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80027fe:	e018      	b.n	8002832 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d111      	bne.n	8002832 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7ff fb40 	bl	8001eb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002838:	e00e      	b.n	8002858 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff fb4a 	bl	8001ee0 <HAL_ADC_ErrorCallback>
}
 800284c:	e004      	b.n	8002858 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f7ff fb2c 	bl	8001ecc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289a:	f043 0204 	orr.w	r2, r3, #4
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f7ff fb1c 	bl	8001ee0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60d3      	str	r3, [r2, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	; (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d301      	bcc.n	8002a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <SysTick_Config+0x40>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f7ff ff8e 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <SysTick_Config+0x40>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SysTick_Config+0x40>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff29 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff40 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff90 	bl	80029a4 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff5f 	bl	8002950 <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff33 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffa4 	bl	8002a0c <SysTick_Config>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e014      	b.n	8002b0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	791b      	ldrb	r3, [r3, #4]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fd fe87 	bl	8000804 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	795b      	ldrb	r3, [r3, #5]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_DAC_Start+0x16>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e043      	b.n	8002bb0 <HAL_DAC_Start+0x9e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2201      	movs	r2, #1
 8002b42:	409a      	lsls	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f7fe fd37 	bl	80015c0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10f      	bne.n	8002b78 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d11d      	bne.n	8002ba2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0201 	orr.w	r2, r2, #1
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e014      	b.n	8002ba2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2102      	movs	r1, #2
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d107      	bne.n	8002ba2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0202 	orr.w	r2, r2, #2
 8002ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	3308      	adds	r3, #8
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	e004      	b.n	8002bf2 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	3314      	adds	r3, #20
 8002bf0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	795b      	ldrb	r3, [r3, #5]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_DAC_ConfigChannel+0x1c>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e194      	b.n	8002f4e <HAL_DAC_ConfigChannel+0x346>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d174      	bne.n	8002d22 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d137      	bne.n	8002cae <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fcb3 	bl	80015a8 <HAL_GetTick>
 8002c42:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c44:	e011      	b.n	8002c6a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c46:	f7fe fcaf 	bl	80015a8 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d90a      	bls.n	8002c6a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f043 0208 	orr.w	r2, r3, #8
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2203      	movs	r2, #3
 8002c64:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e171      	b.n	8002f4e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e6      	bne.n	8002c46 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7fe fca1 	bl	80015c0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
 8002c88:	e01e      	b.n	8002cc8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c8a:	f7fe fc8d 	bl	80015a8 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d90a      	bls.n	8002cae <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f043 0208 	orr.w	r2, r3, #8
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e14f      	b.n	8002f4e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	dbe8      	blt.n	8002c8a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7fe fc81 	bl	80015c0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	ea02 0103 	and.w	r1, r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	409a      	lsls	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	21ff      	movs	r1, #255	; 0xff
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	ea02 0103 	and.w	r1, r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d11d      	bne.n	8002d66 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	221f      	movs	r2, #31
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d42:	4013      	ands	r3, r2
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2207      	movs	r2, #7
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	4013      	ands	r3, r2
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
 8002d92:	e011      	b.n	8002db8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002da0:	2301      	movs	r3, #1
 8002da2:	623b      	str	r3, [r7, #32]
 8002da4:	e008      	b.n	8002db8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002dae:	2301      	movs	r3, #1
 8002db0:	623b      	str	r3, [r7, #32]
 8002db2:	e001      	b.n	8002db8 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dda:	4013      	ands	r3, r2
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	791b      	ldrb	r3, [r3, #4]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d102      	bne.n	8002dec <HAL_DAC_ConfigChannel+0x1e4>
 8002de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dea:	e000      	b.n	8002dee <HAL_DAC_ConfigChannel+0x1e6>
 8002dec:	2300      	movs	r3, #0
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e06:	4013      	ands	r3, r2
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	795b      	ldrb	r3, [r3, #5]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d102      	bne.n	8002e18 <HAL_DAC_ConfigChannel+0x210>
 8002e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e16:	e000      	b.n	8002e1a <HAL_DAC_ConfigChannel+0x212>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d114      	bne.n	8002e5a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002e30:	f001 fabe 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 8002e34:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4a47      	ldr	r2, [pc, #284]	; (8002f58 <HAL_DAC_ConfigChannel+0x350>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d904      	bls.n	8002e48 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	e00d      	b.n	8002e64 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <HAL_DAC_ConfigChannel+0x354>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d909      	bls.n	8002e64 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
 8002e58:	e004      	b.n	8002e64 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e60:	4313      	orrs	r3, r2
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e72:	4313      	orrs	r3, r2
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	400a      	ands	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	22c0      	movs	r2, #192	; 0xc0
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43da      	mvns	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	ea02 0103 	and.w	r1, r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	09896800 	.word	0x09896800
 8002f5c:	04c4b400 	.word	0x04c4b400

08002f60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e08d      	b.n	800308e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_DMA_Init+0x138>)
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d80f      	bhi.n	8002f9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	4b45      	ldr	r3, [pc, #276]	; (800309c <HAL_DMA_Init+0x13c>)
 8002f86:	4413      	add	r3, r2
 8002f88:	4a45      	ldr	r2, [pc, #276]	; (80030a0 <HAL_DMA_Init+0x140>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	009a      	lsls	r2, r3, #2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a42      	ldr	r2, [pc, #264]	; (80030a4 <HAL_DMA_Init+0x144>)
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f9c:	e00e      	b.n	8002fbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <HAL_DMA_Init+0x148>)
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a3d      	ldr	r2, [pc, #244]	; (80030a0 <HAL_DMA_Init+0x140>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	009a      	lsls	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a3c      	ldr	r2, [pc, #240]	; (80030ac <HAL_DMA_Init+0x14c>)
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fa1e 	bl	8003450 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800301c:	d102      	bne.n	8003024 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003038:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d010      	beq.n	8003064 <HAL_DMA_Init+0x104>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b04      	cmp	r3, #4
 8003048:	d80c      	bhi.n	8003064 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa3e 	bl	80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	e008      	b.n	8003076 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40020407 	.word	0x40020407
 800309c:	bffdfff8 	.word	0xbffdfff8
 80030a0:	cccccccd 	.word	0xcccccccd
 80030a4:	40020000 	.word	0x40020000
 80030a8:	bffdfbf8 	.word	0xbffdfbf8
 80030ac:	40020400 	.word	0x40020400

080030b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_DMA_Start_IT+0x20>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e066      	b.n	800319e <HAL_DMA_Start_IT+0xee>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d155      	bne.n	8003190 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f962 	bl	80033d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 020e 	orr.w	r2, r2, #14
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e00f      	b.n	8003148 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0204 	bic.w	r2, r2, #4
 8003136:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 020a 	orr.w	r2, r2, #10
 8003146:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003164:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800317c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e005      	b.n	800319c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003198:	2302      	movs	r3, #2
 800319a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800319c:	7dfb      	ldrb	r3, [r7, #23]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d00d      	beq.n	80031da <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2204      	movs	r2, #4
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	e047      	b.n	800326a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 020e 	bic.w	r2, r2, #14
 80031e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003208:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f003 021f 	and.w	r2, r3, #31
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2101      	movs	r1, #1
 8003218:	fa01 f202 	lsl.w	r2, r1, r2
 800321c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003226:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00c      	beq.n	800324a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800323e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003248:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
    }
  }
  return status;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2204      	movs	r2, #4
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d026      	beq.n	80032ee <HAL_DMA_IRQHandler+0x7a>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d021      	beq.n	80032ee <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d107      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0204 	bic.w	r2, r2, #4
 80032c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2104      	movs	r1, #4
 80032d6:	fa01 f202 	lsl.w	r2, r1, r2
 80032da:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d071      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032ec:	e06c      	b.n	80033c8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2202      	movs	r2, #2
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02e      	beq.n	8003360 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d029      	beq.n	8003360 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 020a 	bic.w	r2, r2, #10
 8003328:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f003 021f 	and.w	r2, r3, #31
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	2102      	movs	r1, #2
 8003340:	fa01 f202 	lsl.w	r2, r1, r2
 8003344:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d038      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800335e:	e033      	b.n	80033c8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	2208      	movs	r2, #8
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d02a      	beq.n	80033ca <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d025      	beq.n	80033ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 020e 	bic.w	r2, r2, #14
 800338c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f003 021f 	and.w	r2, r3, #31
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2101      	movs	r1, #1
 800339c:	fa01 f202 	lsl.w	r2, r1, r2
 80033a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
}
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033e8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033fa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f202 	lsl.w	r2, r1, r2
 800340e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b10      	cmp	r3, #16
 800341e:	d108      	bne.n	8003432 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003430:	e007      	b.n	8003442 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	60da      	str	r2, [r3, #12]
}
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003460:	429a      	cmp	r2, r3
 8003462:	d802      	bhi.n	800346a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003464:	4b15      	ldr	r3, [pc, #84]	; (80034bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e001      	b.n	800346e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800346c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3b08      	subs	r3, #8
 800347a:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	009a      	lsls	r2, r3, #2
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	461a      	mov	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800349a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2201      	movs	r2, #1
 80034a4:	409a      	lsls	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40020407 	.word	0x40020407
 80034bc:	40020800 	.word	0x40020800
 80034c0:	40020820 	.word	0x40020820
 80034c4:	cccccccd 	.word	0xcccccccd
 80034c8:	40020880 	.word	0x40020880

080034cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	461a      	mov	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a08      	ldr	r2, [pc, #32]	; (8003510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034ee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2201      	movs	r2, #1
 80034fa:	409a      	lsls	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	1000823f 	.word	0x1000823f
 8003510:	40020940 	.word	0x40020940

08003514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003522:	e15a      	b.n	80037da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 814c 	beq.w	80037d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d00b      	beq.n	800355c <HAL_GPIO_Init+0x48>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d007      	beq.n	800355c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003550:	2b11      	cmp	r3, #17
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b12      	cmp	r3, #18
 800355a:	d130      	bne.n	80035be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003592:	2201      	movs	r2, #1
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0201 	and.w	r2, r3, #1
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2203      	movs	r2, #3
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0xea>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b12      	cmp	r3, #18
 80035fc:	d123      	bne.n	8003646 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	08da      	lsrs	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3208      	adds	r2, #8
 8003606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	08da      	lsrs	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3208      	adds	r2, #8
 8003640:	6939      	ldr	r1, [r7, #16]
 8003642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0203 	and.w	r2, r3, #3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80a6 	beq.w	80037d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003688:	4b5b      	ldr	r3, [pc, #364]	; (80037f8 <HAL_GPIO_Init+0x2e4>)
 800368a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368c:	4a5a      	ldr	r2, [pc, #360]	; (80037f8 <HAL_GPIO_Init+0x2e4>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6613      	str	r3, [r2, #96]	; 0x60
 8003694:	4b58      	ldr	r3, [pc, #352]	; (80037f8 <HAL_GPIO_Init+0x2e4>)
 8003696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036a0:	4a56      	ldr	r2, [pc, #344]	; (80037fc <HAL_GPIO_Init+0x2e8>)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	3302      	adds	r3, #2
 80036a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	220f      	movs	r2, #15
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036ca:	d01f      	beq.n	800370c <HAL_GPIO_Init+0x1f8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a4c      	ldr	r2, [pc, #304]	; (8003800 <HAL_GPIO_Init+0x2ec>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d019      	beq.n	8003708 <HAL_GPIO_Init+0x1f4>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a4b      	ldr	r2, [pc, #300]	; (8003804 <HAL_GPIO_Init+0x2f0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_GPIO_Init+0x1f0>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a4a      	ldr	r2, [pc, #296]	; (8003808 <HAL_GPIO_Init+0x2f4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00d      	beq.n	8003700 <HAL_GPIO_Init+0x1ec>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a49      	ldr	r2, [pc, #292]	; (800380c <HAL_GPIO_Init+0x2f8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <HAL_GPIO_Init+0x1e8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a48      	ldr	r2, [pc, #288]	; (8003810 <HAL_GPIO_Init+0x2fc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_GPIO_Init+0x1e4>
 80036f4:	2305      	movs	r3, #5
 80036f6:	e00a      	b.n	800370e <HAL_GPIO_Init+0x1fa>
 80036f8:	2306      	movs	r3, #6
 80036fa:	e008      	b.n	800370e <HAL_GPIO_Init+0x1fa>
 80036fc:	2304      	movs	r3, #4
 80036fe:	e006      	b.n	800370e <HAL_GPIO_Init+0x1fa>
 8003700:	2303      	movs	r3, #3
 8003702:	e004      	b.n	800370e <HAL_GPIO_Init+0x1fa>
 8003704:	2302      	movs	r3, #2
 8003706:	e002      	b.n	800370e <HAL_GPIO_Init+0x1fa>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <HAL_GPIO_Init+0x1fa>
 800370c:	2300      	movs	r3, #0
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	f002 0203 	and.w	r2, r2, #3
 8003714:	0092      	lsls	r2, r2, #2
 8003716:	4093      	lsls	r3, r2
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800371e:	4937      	ldr	r1, [pc, #220]	; (80037fc <HAL_GPIO_Init+0x2e8>)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	3302      	adds	r3, #2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800372c:	4b39      	ldr	r3, [pc, #228]	; (8003814 <HAL_GPIO_Init+0x300>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	43db      	mvns	r3, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003750:	4a30      	ldr	r2, [pc, #192]	; (8003814 <HAL_GPIO_Init+0x300>)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003756:	4b2f      	ldr	r3, [pc, #188]	; (8003814 <HAL_GPIO_Init+0x300>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	43db      	mvns	r3, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800377a:	4a26      	ldr	r2, [pc, #152]	; (8003814 <HAL_GPIO_Init+0x300>)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_GPIO_Init+0x300>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	43db      	mvns	r3, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037a4:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_GPIO_Init+0x300>)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_GPIO_Init+0x300>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037ce:	4a11      	ldr	r2, [pc, #68]	; (8003814 <HAL_GPIO_Init+0x300>)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	3301      	adds	r3, #1
 80037d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa22 f303 	lsr.w	r3, r2, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f47f ae9d 	bne.w	8003524 <HAL_GPIO_Init+0x10>
  }
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40010000 	.word	0x40010000
 8003800:	48000400 	.word	0x48000400
 8003804:	48000800 	.word	0x48000800
 8003808:	48000c00 	.word	0x48000c00
 800380c:	48001000 	.word	0x48001000
 8003810:	48001400 	.word	0x48001400
 8003814:	40010400 	.word	0x40010400

08003818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	887b      	ldrh	r3, [r7, #2]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e001      	b.n	800383a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	807b      	strh	r3, [r7, #2]
 8003854:	4613      	mov	r3, r2
 8003856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003858:	787b      	ldrb	r3, [r7, #1]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003864:	e002      	b.n	800386c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	041a      	lsls	r2, r3, #16
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	43d9      	mvns	r1, r3
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	400b      	ands	r3, r1
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	619a      	str	r2, [r3, #24]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d006      	beq.n	80038d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038c2:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd fa4e 	bl	8000d6c <HAL_GPIO_EXTI_Callback>
  }
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40010400 	.word	0x40010400

080038dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d141      	bne.n	800396e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ea:	4b4b      	ldr	r3, [pc, #300]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f6:	d131      	bne.n	800395c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038f8:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038fe:	4a46      	ldr	r2, [pc, #280]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003904:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003908:	4b43      	ldr	r3, [pc, #268]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003910:	4a41      	ldr	r2, [pc, #260]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003916:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003918:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2232      	movs	r2, #50	; 0x32
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	4a3f      	ldr	r2, [pc, #252]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	0c9b      	lsrs	r3, r3, #18
 800392a:	3301      	adds	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800392e:	e002      	b.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3b01      	subs	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003936:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003942:	d102      	bne.n	800394a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f2      	bne.n	8003930 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800394a:	4b33      	ldr	r3, [pc, #204]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	d158      	bne.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e057      	b.n	8003a0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800395c:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003962:	4a2d      	ldr	r2, [pc, #180]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003968:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800396c:	e04d      	b.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003974:	d141      	bne.n	80039fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003976:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d131      	bne.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003984:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800398a:	4a23      	ldr	r2, [pc, #140]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003990:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003994:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800399c:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039a4:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2232      	movs	r2, #50	; 0x32
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	4a1c      	ldr	r2, [pc, #112]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	0c9b      	lsrs	r3, r3, #18
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ba:	e002      	b.n	80039c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3b01      	subs	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ce:	d102      	bne.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f2      	bne.n	80039bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e2:	d112      	bne.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e011      	b.n	8003a0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039f8:	e007      	b.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039fa:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a02:	4a05      	ldr	r2, [pc, #20]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	431bde83 	.word	0x431bde83

08003a24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a32:	6093      	str	r3, [r2, #8]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40007000 	.word	0x40007000

08003a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e308      	b.n	8004068 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d075      	beq.n	8003b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a62:	4ba3      	ldr	r3, [pc, #652]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a6c:	4ba0      	ldr	r3, [pc, #640]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b0c      	cmp	r3, #12
 8003a7a:	d102      	bne.n	8003a82 <HAL_RCC_OscConfig+0x3e>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_OscConfig+0x44>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	4b99      	ldr	r3, [pc, #612]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d05b      	beq.n	8003b4c <HAL_RCC_OscConfig+0x108>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d157      	bne.n	8003b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e2e3      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d106      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x74>
 8003aaa:	4b91      	ldr	r3, [pc, #580]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a90      	ldr	r2, [pc, #576]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e01d      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x98>
 8003ac2:	4b8b      	ldr	r3, [pc, #556]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a8a      	ldr	r2, [pc, #552]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b88      	ldr	r3, [pc, #544]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a87      	ldr	r2, [pc, #540]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003adc:	4b84      	ldr	r3, [pc, #528]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a83      	ldr	r2, [pc, #524]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b81      	ldr	r3, [pc, #516]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a80      	ldr	r2, [pc, #512]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd fd54 	bl	80015a8 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fd fd50 	bl	80015a8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e2a8      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b16:	4b76      	ldr	r3, [pc, #472]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0xc0>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd fd40 	bl	80015a8 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fd fd3c 	bl	80015a8 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e294      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b3e:	4b6c      	ldr	r3, [pc, #432]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0xe8>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d075      	beq.n	8003c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b5a:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b64:	4b62      	ldr	r3, [pc, #392]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	d102      	bne.n	8003b7a <HAL_RCC_OscConfig+0x136>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d002      	beq.n	8003b80 <HAL_RCC_OscConfig+0x13c>
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d11f      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b80:	4b5b      	ldr	r3, [pc, #364]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_OscConfig+0x154>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e267      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b98:	4b55      	ldr	r3, [pc, #340]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	061b      	lsls	r3, r3, #24
 8003ba6:	4952      	ldr	r1, [pc, #328]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bac:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCC_OscConfig+0x2b0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fd fcad 	bl	8001510 <HAL_InitTick>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d043      	beq.n	8003c44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e253      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d023      	beq.n	8003c10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc8:	4b49      	ldr	r3, [pc, #292]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a48      	ldr	r2, [pc, #288]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fd fce8 	bl	80015a8 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bdc:	f7fd fce4 	bl	80015a8 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e23c      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bee:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	4939      	ldr	r1, [pc, #228]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
 8003c0e:	e01a      	b.n	8003c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c10:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a36      	ldr	r2, [pc, #216]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fcc4 	bl	80015a8 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fd fcc0 	bl	80015a8 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e218      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c36:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x1e0>
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d03c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5a:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c60:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6a:	f7fd fc9d 	bl	80015a8 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c72:	f7fd fc99 	bl	80015a8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e1f1      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ef      	beq.n	8003c72 <HAL_RCC_OscConfig+0x22e>
 8003c92:	e01b      	b.n	8003ccc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c94:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fc80 	bl	80015a8 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cac:	f7fd fc7c 	bl	80015a8 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1d4      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ef      	bne.n	8003cac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80ab 	beq.w	8003e30 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cde:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x2b4>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e005      	b.n	8003cfa <HAL_RCC_OscConfig+0x2b6>
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	20000004 	.word	0x20000004
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	4baf      	ldr	r3, [pc, #700]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	4aae      	ldr	r2, [pc, #696]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d08:	6593      	str	r3, [r2, #88]	; 0x58
 8003d0a:	4bac      	ldr	r3, [pc, #688]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d16:	2301      	movs	r3, #1
 8003d18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1a:	4ba9      	ldr	r3, [pc, #676]	; (8003fc0 <HAL_RCC_OscConfig+0x57c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d118      	bne.n	8003d58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d26:	4ba6      	ldr	r3, [pc, #664]	; (8003fc0 <HAL_RCC_OscConfig+0x57c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4aa5      	ldr	r2, [pc, #660]	; (8003fc0 <HAL_RCC_OscConfig+0x57c>)
 8003d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d32:	f7fd fc39 	bl	80015a8 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3a:	f7fd fc35 	bl	80015a8 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e18d      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4c:	4b9c      	ldr	r3, [pc, #624]	; (8003fc0 <HAL_RCC_OscConfig+0x57c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d108      	bne.n	8003d72 <HAL_RCC_OscConfig+0x32e>
 8003d60:	4b96      	ldr	r3, [pc, #600]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	4a95      	ldr	r2, [pc, #596]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d70:	e024      	b.n	8003dbc <HAL_RCC_OscConfig+0x378>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d110      	bne.n	8003d9c <HAL_RCC_OscConfig+0x358>
 8003d7a:	4b90      	ldr	r3, [pc, #576]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	4a8e      	ldr	r2, [pc, #568]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003d82:	f043 0304 	orr.w	r3, r3, #4
 8003d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d8a:	4b8c      	ldr	r3, [pc, #560]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	4a8a      	ldr	r2, [pc, #552]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d9a:	e00f      	b.n	8003dbc <HAL_RCC_OscConfig+0x378>
 8003d9c:	4b87      	ldr	r3, [pc, #540]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	4a86      	ldr	r2, [pc, #536]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dac:	4b83      	ldr	r3, [pc, #524]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db2:	4a82      	ldr	r2, [pc, #520]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003db4:	f023 0304 	bic.w	r3, r3, #4
 8003db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d016      	beq.n	8003df2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fd fbf0 	bl	80015a8 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fd fbec 	bl	80015a8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e142      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de2:	4b76      	ldr	r3, [pc, #472]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ed      	beq.n	8003dcc <HAL_RCC_OscConfig+0x388>
 8003df0:	e015      	b.n	8003e1e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df2:	f7fd fbd9 	bl	80015a8 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd fbd5 	bl	80015a8 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e12b      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e10:	4b6a      	ldr	r3, [pc, #424]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ed      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e1e:	7ffb      	ldrb	r3, [r7, #31]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d105      	bne.n	8003e30 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e24:	4b65      	ldr	r3, [pc, #404]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	4a64      	ldr	r2, [pc, #400]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d03c      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01c      	beq.n	8003e7e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e44:	4b5d      	ldr	r3, [pc, #372]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e4a:	4a5c      	ldr	r2, [pc, #368]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fd fba8 	bl	80015a8 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e5c:	f7fd fba4 	bl	80015a8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0fc      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e6e:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ef      	beq.n	8003e5c <HAL_RCC_OscConfig+0x418>
 8003e7c:	e01b      	b.n	8003eb6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e7e:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e84:	4a4d      	ldr	r2, [pc, #308]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fd fb8b 	bl	80015a8 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e96:	f7fd fb87 	bl	80015a8 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e0df      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ea8:	4b44      	ldr	r3, [pc, #272]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1ef      	bne.n	8003e96 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80d3 	beq.w	8004066 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec0:	4b3e      	ldr	r3, [pc, #248]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	f000 808d 	beq.w	8003fe8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d15a      	bne.n	8003f8c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a38      	ldr	r2, [pc, #224]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fb61 	bl	80015a8 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eea:	f7fd fb5d 	bl	80015a8 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e0b5      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003efc:	4b2f      	ldr	r3, [pc, #188]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1f0      	bne.n	8003eea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f08:	4b2c      	ldr	r3, [pc, #176]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_RCC_OscConfig+0x580>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6a11      	ldr	r1, [r2, #32]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f18:	3a01      	subs	r2, #1
 8003f1a:	0112      	lsls	r2, r2, #4
 8003f1c:	4311      	orrs	r1, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f22:	0212      	lsls	r2, r2, #8
 8003f24:	4311      	orrs	r1, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f2a:	0852      	lsrs	r2, r2, #1
 8003f2c:	3a01      	subs	r2, #1
 8003f2e:	0552      	lsls	r2, r2, #21
 8003f30:	4311      	orrs	r1, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f36:	0852      	lsrs	r2, r2, #1
 8003f38:	3a01      	subs	r2, #1
 8003f3a:	0652      	lsls	r2, r2, #25
 8003f3c:	4311      	orrs	r1, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f42:	06d2      	lsls	r2, r2, #27
 8003f44:	430a      	orrs	r2, r1
 8003f46:	491d      	ldr	r1, [pc, #116]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f58:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd fb20 	bl	80015a8 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fd fb1c 	bl	80015a8 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e074      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x528>
 8003f8a:	e06c      	b.n	8004066 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a07      	ldr	r2, [pc, #28]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <HAL_RCC_OscConfig+0x578>)
 8003faa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fd faf8 	bl	80015a8 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fba:	e00e      	b.n	8003fda <HAL_RCC_OscConfig+0x596>
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40007000 	.word	0x40007000
 8003fc4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fd faee 	bl	80015a8 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e046      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fda:	4b25      	ldr	r3, [pc, #148]	; (8004070 <HAL_RCC_OscConfig+0x62c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x584>
 8003fe6:	e03e      	b.n	8004066 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e039      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ff4:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <HAL_RCC_OscConfig+0x62c>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f003 0203 	and.w	r2, r3, #3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	429a      	cmp	r2, r3
 8004006:	d12c      	bne.n	8004062 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	3b01      	subs	r3, #1
 8004014:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d123      	bne.n	8004062 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d11b      	bne.n	8004062 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d113      	bne.n	8004062 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	3b01      	subs	r3, #1
 8004048:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d109      	bne.n	8004062 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	3b01      	subs	r3, #1
 800405c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d001      	beq.n	8004066 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40021000 	.word	0x40021000

08004074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e11e      	b.n	80042ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800408c:	4b91      	ldr	r3, [pc, #580]	; (80042d4 <HAL_RCC_ClockConfig+0x260>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d910      	bls.n	80040bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b8e      	ldr	r3, [pc, #568]	; (80042d4 <HAL_RCC_ClockConfig+0x260>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 020f 	bic.w	r2, r3, #15
 80040a2:	498c      	ldr	r1, [pc, #560]	; (80042d4 <HAL_RCC_ClockConfig+0x260>)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <HAL_RCC_ClockConfig+0x260>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e106      	b.n	80042ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d073      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d129      	bne.n	8004124 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d0:	4b81      	ldr	r3, [pc, #516]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0f4      	b.n	80042ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80040e0:	f000 f99e 	bl	8004420 <RCC_GetSysClockFreqFromPLLSource>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4a7c      	ldr	r2, [pc, #496]	; (80042dc <HAL_RCC_ClockConfig+0x268>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d93f      	bls.n	800416e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040ee:	4b7a      	ldr	r3, [pc, #488]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004102:	2b00      	cmp	r3, #0
 8004104:	d033      	beq.n	800416e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800410a:	2b00      	cmp	r3, #0
 800410c:	d12f      	bne.n	800416e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800410e:	4b72      	ldr	r3, [pc, #456]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004116:	4a70      	ldr	r2, [pc, #448]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 8004118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e024      	b.n	800416e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d107      	bne.n	800413c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412c:	4b6a      	ldr	r3, [pc, #424]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0c6      	b.n	80042ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800413c:	4b66      	ldr	r3, [pc, #408]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0be      	b.n	80042ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800414c:	f000 f8ce 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 8004150:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4a61      	ldr	r2, [pc, #388]	; (80042dc <HAL_RCC_ClockConfig+0x268>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d909      	bls.n	800416e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800415a:	4b5f      	ldr	r3, [pc, #380]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004162:	4a5d      	ldr	r2, [pc, #372]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 8004164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004168:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800416e:	4b5a      	ldr	r3, [pc, #360]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4957      	ldr	r1, [pc, #348]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004180:	f7fd fa12 	bl	80015a8 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	e00a      	b.n	800419e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7fd fa0e 	bl	80015a8 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e095      	b.n	80042ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b4e      	ldr	r3, [pc, #312]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 020c 	and.w	r2, r3, #12
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1eb      	bne.n	8004188 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d023      	beq.n	8004204 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a42      	ldr	r2, [pc, #264]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 80041ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80041e0:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041e8:	4a3b      	ldr	r2, [pc, #236]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 80041ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f0:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4936      	ldr	r1, [pc, #216]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
 8004202:	e008      	b.n	8004216 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d105      	bne.n	8004216 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800420a:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4a32      	ldr	r2, [pc, #200]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 8004210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004214:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004216:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <HAL_RCC_ClockConfig+0x260>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d21d      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004224:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <HAL_RCC_ClockConfig+0x260>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 020f 	bic.w	r2, r3, #15
 800422c:	4929      	ldr	r1, [pc, #164]	; (80042d4 <HAL_RCC_ClockConfig+0x260>)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	4313      	orrs	r3, r2
 8004232:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004234:	f7fd f9b8 	bl	80015a8 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423a:	e00a      	b.n	8004252 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423c:	f7fd f9b4 	bl	80015a8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e03b      	b.n	80042ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_RCC_ClockConfig+0x260>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d1ed      	bne.n	800423c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4917      	ldr	r1, [pc, #92]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	490f      	ldr	r1, [pc, #60]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429e:	f000 f825 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042a2:	4601      	mov	r1, r0
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_RCC_ClockConfig+0x264>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <HAL_RCC_ClockConfig+0x26c>)
 80042b0:	5cd3      	ldrb	r3, [r2, r3]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	fa21 f303 	lsr.w	r3, r1, r3
 80042ba:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <HAL_RCC_ClockConfig+0x270>)
 80042bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x274>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fd f924 	bl	8001510 <HAL_InitTick>
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40022000 	.word	0x40022000
 80042d8:	40021000 	.word	0x40021000
 80042dc:	04c4b400 	.word	0x04c4b400
 80042e0:	08007524 	.word	0x08007524
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000004 	.word	0x20000004

080042ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042f2:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d102      	bne.n	8004304 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042fe:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	e047      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004304:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d102      	bne.n	8004316 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004310:	4b26      	ldr	r3, [pc, #152]	; (80043ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	e03e      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004316:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d136      	bne.n	8004390 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	3301      	adds	r3, #1
 8004338:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d10c      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004340:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	4a16      	ldr	r2, [pc, #88]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800434a:	68d2      	ldr	r2, [r2, #12]
 800434c:	0a12      	lsrs	r2, r2, #8
 800434e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	617b      	str	r3, [r7, #20]
      break;
 8004358:	e00c      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800435a:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004364:	68d2      	ldr	r2, [r2, #12]
 8004366:	0a12      	lsrs	r2, r2, #8
 8004368:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
      break;
 8004372:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	0e5b      	lsrs	r3, r3, #25
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	3301      	adds	r3, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	e001      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004394:	693b      	ldr	r3, [r7, #16]
}
 8004396:	4618      	mov	r0, r3
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	00f42400 	.word	0x00f42400
 80043ac:	007a1200 	.word	0x007a1200

080043b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000000 	.word	0x20000000

080043c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043cc:	f7ff fff0 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043d0:	4601      	mov	r1, r0
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043de:	5cd3      	ldrb	r3, [r2, r3]
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	08007534 	.word	0x08007534

080043f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f8:	f7ff ffda 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043fc:	4601      	mov	r1, r0
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0adb      	lsrs	r3, r3, #11
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4a04      	ldr	r2, [pc, #16]	; (800441c <HAL_RCC_GetPCLK2Freq+0x28>)
 800440a:	5cd3      	ldrb	r3, [r2, r3]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	08007534 	.word	0x08007534

08004420 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004426:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004430:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	3301      	adds	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d10c      	bne.n	800445e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004444:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	4a14      	ldr	r2, [pc, #80]	; (80044a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800444e:	68d2      	ldr	r2, [r2, #12]
 8004450:	0a12      	lsrs	r2, r2, #8
 8004452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	617b      	str	r3, [r7, #20]
    break;
 800445c:	e00c      	b.n	8004478 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800445e:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	4a0e      	ldr	r2, [pc, #56]	; (80044a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004468:	68d2      	ldr	r2, [r2, #12]
 800446a:	0a12      	lsrs	r2, r2, #8
 800446c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	617b      	str	r3, [r7, #20]
    break;
 8004476:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	0e5b      	lsrs	r3, r3, #25
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	3301      	adds	r3, #1
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004492:	687b      	ldr	r3, [r7, #4]
}
 8004494:	4618      	mov	r0, r3
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	40021000 	.word	0x40021000
 80044a4:	007a1200 	.word	0x007a1200
 80044a8:	00f42400 	.word	0x00f42400

080044ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044b4:	2300      	movs	r3, #0
 80044b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044b8:	2300      	movs	r3, #0
 80044ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8098 	beq.w	80045fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ce:	4b43      	ldr	r3, [pc, #268]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10d      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	4b40      	ldr	r3, [pc, #256]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	4a3f      	ldr	r2, [pc, #252]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6593      	str	r3, [r2, #88]	; 0x58
 80044e6:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f2:	2301      	movs	r3, #1
 80044f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f6:	4b3a      	ldr	r3, [pc, #232]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a39      	ldr	r2, [pc, #228]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004502:	f7fd f851 	bl	80015a8 <HAL_GetTick>
 8004506:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004508:	e009      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fd f84d 	bl	80015a8 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d902      	bls.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	74fb      	strb	r3, [r7, #19]
        break;
 800451c:	e005      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451e:	4b30      	ldr	r3, [pc, #192]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ef      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d159      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004530:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01e      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	429a      	cmp	r2, r3
 800454a:	d019      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800454c:	4b23      	ldr	r3, [pc, #140]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004556:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004568:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	4a1b      	ldr	r2, [pc, #108]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004578:	4a18      	ldr	r2, [pc, #96]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fd f80d 	bl	80015a8 <HAL_GetTick>
 800458e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004590:	e00b      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fd f809 	bl	80015a8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d902      	bls.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	74fb      	strb	r3, [r7, #19]
            break;
 80045a8:	e006      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0ec      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	4903      	ldr	r1, [pc, #12]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045d4:	e008      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045d6:	7cfb      	ldrb	r3, [r7, #19]
 80045d8:	74bb      	strb	r3, [r7, #18]
 80045da:	e005      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045e8:	7c7b      	ldrb	r3, [r7, #17]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ee:	4ba6      	ldr	r3, [pc, #664]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	4aa5      	ldr	r2, [pc, #660]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004606:	4ba0      	ldr	r3, [pc, #640]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f023 0203 	bic.w	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	499c      	ldr	r1, [pc, #624]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004628:	4b97      	ldr	r3, [pc, #604]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 020c 	bic.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	4994      	ldr	r1, [pc, #592]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800464a:	4b8f      	ldr	r3, [pc, #572]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	498b      	ldr	r1, [pc, #556]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800466c:	4b86      	ldr	r3, [pc, #536]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	4983      	ldr	r1, [pc, #524]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800468e:	4b7e      	ldr	r3, [pc, #504]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	497a      	ldr	r1, [pc, #488]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b0:	4b75      	ldr	r3, [pc, #468]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	4972      	ldr	r1, [pc, #456]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046d2:	4b6d      	ldr	r3, [pc, #436]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4969      	ldr	r1, [pc, #420]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046f4:	4b64      	ldr	r3, [pc, #400]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	4961      	ldr	r1, [pc, #388]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004716:	4b5c      	ldr	r3, [pc, #368]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	4958      	ldr	r1, [pc, #352]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004734:	2b00      	cmp	r3, #0
 8004736:	d015      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004738:	4b53      	ldr	r3, [pc, #332]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	4950      	ldr	r1, [pc, #320]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004756:	d105      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004758:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4a4a      	ldr	r2, [pc, #296]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004762:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476c:	2b00      	cmp	r3, #0
 800476e:	d015      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004770:	4b45      	ldr	r3, [pc, #276]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	4942      	ldr	r1, [pc, #264]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478e:	d105      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004790:	4b3d      	ldr	r3, [pc, #244]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a3c      	ldr	r2, [pc, #240]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800479a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d015      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047a8:	4b37      	ldr	r3, [pc, #220]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	4934      	ldr	r1, [pc, #208]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c6:	d105      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c8:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a2e      	ldr	r2, [pc, #184]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047e0:	4b29      	ldr	r3, [pc, #164]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	4926      	ldr	r1, [pc, #152]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047fe:	d105      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004800:	4b21      	ldr	r3, [pc, #132]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a20      	ldr	r2, [pc, #128]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d015      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	4918      	ldr	r1, [pc, #96]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004836:	d105      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a12      	ldr	r2, [pc, #72]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800483e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004842:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d015      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485e:	490a      	ldr	r1, [pc, #40]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800486e:	d105      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a04      	ldr	r2, [pc, #16]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800487c:	7cbb      	ldrb	r3, [r7, #18]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000

0800488c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e049      	b.n	8004932 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fc fc6a 	bl	800118c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f000 fd10 	bl	80052f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	d001      	beq.n	8004954 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e042      	b.n	80049da <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <HAL_TIM_Base_Start+0xac>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d018      	beq.n	8004998 <HAL_TIM_Base_Start+0x5c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d013      	beq.n	8004998 <HAL_TIM_Base_Start+0x5c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_TIM_Base_Start+0xb0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00e      	beq.n	8004998 <HAL_TIM_Base_Start+0x5c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <HAL_TIM_Base_Start+0xb4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_TIM_Base_Start+0x5c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1a      	ldr	r2, [pc, #104]	; (80049f4 <HAL_TIM_Base_Start+0xb8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIM_Base_Start+0x5c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <HAL_TIM_Base_Start+0xbc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d115      	bne.n	80049c4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	4b17      	ldr	r3, [pc, #92]	; (80049fc <HAL_TIM_Base_Start+0xc0>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d015      	beq.n	80049d6 <HAL_TIM_Base_Start+0x9a>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d011      	beq.n	80049d6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	e008      	b.n	80049d6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e000      	b.n	80049d8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	00010007 	.word	0x00010007

08004a00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e049      	b.n	8004aa6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f841 	bl	8004aae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f000 fc56 	bl	80052f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIM_PWM_Start+0x24>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e03c      	b.n	8004b62 <HAL_TIM_PWM_Start+0x9e>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d109      	bne.n	8004b02 <HAL_TIM_PWM_Start+0x3e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e02f      	b.n	8004b62 <HAL_TIM_PWM_Start+0x9e>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d109      	bne.n	8004b1c <HAL_TIM_PWM_Start+0x58>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e022      	b.n	8004b62 <HAL_TIM_PWM_Start+0x9e>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d109      	bne.n	8004b36 <HAL_TIM_PWM_Start+0x72>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	bf14      	ite	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	2300      	moveq	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	e015      	b.n	8004b62 <HAL_TIM_PWM_Start+0x9e>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d109      	bne.n	8004b50 <HAL_TIM_PWM_Start+0x8c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	bf14      	ite	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	2300      	moveq	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e008      	b.n	8004b62 <HAL_TIM_PWM_Start+0x9e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e097      	b.n	8004c9a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_PWM_Start+0xb6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b78:	e023      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xfe>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Start+0xc6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b88:	e01b      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xfe>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start+0xd6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b98:	e013      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xfe>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start+0xe6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ba8:	e00b      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xfe>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start+0xf6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb8:	e003      	b.n	8004bc2 <HAL_TIM_PWM_Start+0xfe>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 ffb2 	bl	8005b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a33      	ldr	r2, [pc, #204]	; (8004ca4 <HAL_TIM_PWM_Start+0x1e0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x13e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a32      	ldr	r2, [pc, #200]	; (8004ca8 <HAL_TIM_PWM_Start+0x1e4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x13e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a30      	ldr	r2, [pc, #192]	; (8004cac <HAL_TIM_PWM_Start+0x1e8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x13e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2f      	ldr	r2, [pc, #188]	; (8004cb0 <HAL_TIM_PWM_Start+0x1ec>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x13e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2d      	ldr	r2, [pc, #180]	; (8004cb4 <HAL_TIM_PWM_Start+0x1f0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_PWM_Start+0x142>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <HAL_TIM_PWM_Start+0x144>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a20      	ldr	r2, [pc, #128]	; (8004ca4 <HAL_TIM_PWM_Start+0x1e0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d018      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x194>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2e:	d013      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x194>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a20      	ldr	r2, [pc, #128]	; (8004cb8 <HAL_TIM_PWM_Start+0x1f4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00e      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x194>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <HAL_TIM_PWM_Start+0x1f8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d009      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x194>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <HAL_TIM_PWM_Start+0x1e4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_TIM_PWM_Start+0x194>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a16      	ldr	r2, [pc, #88]	; (8004cac <HAL_TIM_PWM_Start+0x1e8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d115      	bne.n	8004c84 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	4b18      	ldr	r3, [pc, #96]	; (8004cc0 <HAL_TIM_PWM_Start+0x1fc>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d015      	beq.n	8004c96 <HAL_TIM_PWM_Start+0x1d2>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c70:	d011      	beq.n	8004c96 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0201 	orr.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c82:	e008      	b.n	8004c96 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e000      	b.n	8004c98 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40013400 	.word	0x40013400
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40014400 	.word	0x40014400
 8004cb4:	40014800 	.word	0x40014800
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	00010007 	.word	0x00010007

08004cc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e097      	b.n	8004e08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fc fa93 	bl	8001218 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004d08:	f023 0307 	bic.w	r3, r3, #7
 8004d0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4619      	mov	r1, r3
 8004d18:	4610      	mov	r0, r2
 8004d1a:	f000 fae9 	bl	80052f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d46:	f023 0303 	bic.w	r3, r3, #3
 8004d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	4313      	orrs	r3, r2
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d64:	f023 030c 	bic.w	r3, r3, #12
 8004d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	4313      	orrs	r3, r2
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	011a      	lsls	r2, r3, #4
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	031b      	lsls	r3, r3, #12
 8004d94:	4313      	orrs	r3, r2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004da2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	4313      	orrs	r3, r2
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d110      	bne.n	8004e62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d102      	bne.n	8004e4c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e46:	7b7b      	ldrb	r3, [r7, #13]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d001      	beq.n	8004e50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e068      	b.n	8004f22 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e60:	e031      	b.n	8004ec6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d110      	bne.n	8004e8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e68:	7bbb      	ldrb	r3, [r7, #14]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d102      	bne.n	8004e74 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e6e:	7b3b      	ldrb	r3, [r7, #12]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d001      	beq.n	8004e78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e054      	b.n	8004f22 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e88:	e01d      	b.n	8004ec6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d108      	bne.n	8004ea2 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e90:	7bbb      	ldrb	r3, [r7, #14]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d105      	bne.n	8004ea2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e96:	7b7b      	ldrb	r3, [r7, #13]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d102      	bne.n	8004ea2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e9c:	7b3b      	ldrb	r3, [r7, #12]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d001      	beq.n	8004ea6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e03d      	b.n	8004f22 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_TIM_Encoder_Start+0xc2>
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d008      	beq.n	8004ee2 <HAL_TIM_Encoder_Start+0xd2>
 8004ed0:	e00f      	b.n	8004ef2 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fe2a 	bl	8005b34 <TIM_CCxChannelCmd>
      break;
 8004ee0:	e016      	b.n	8004f10 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2104      	movs	r1, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fe22 	bl	8005b34 <TIM_CCxChannelCmd>
      break;
 8004ef0:	e00e      	b.n	8004f10 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fe1a 	bl	8005b34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2201      	movs	r2, #1
 8004f06:	2104      	movs	r1, #4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fe13 	bl	8005b34 <TIM_CCxChannelCmd>
      break;
 8004f0e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0fd      	b.n	8005142 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b14      	cmp	r3, #20
 8004f52:	f200 80f0 	bhi.w	8005136 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004fb1 	.word	0x08004fb1
 8004f60:	08005137 	.word	0x08005137
 8004f64:	08005137 	.word	0x08005137
 8004f68:	08005137 	.word	0x08005137
 8004f6c:	08004ff1 	.word	0x08004ff1
 8004f70:	08005137 	.word	0x08005137
 8004f74:	08005137 	.word	0x08005137
 8004f78:	08005137 	.word	0x08005137
 8004f7c:	08005033 	.word	0x08005033
 8004f80:	08005137 	.word	0x08005137
 8004f84:	08005137 	.word	0x08005137
 8004f88:	08005137 	.word	0x08005137
 8004f8c:	08005073 	.word	0x08005073
 8004f90:	08005137 	.word	0x08005137
 8004f94:	08005137 	.word	0x08005137
 8004f98:	08005137 	.word	0x08005137
 8004f9c:	080050b5 	.word	0x080050b5
 8004fa0:	08005137 	.word	0x08005137
 8004fa4:	08005137 	.word	0x08005137
 8004fa8:	08005137 	.word	0x08005137
 8004fac:	080050f5 	.word	0x080050f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fa2a 	bl	8005410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0208 	orr.w	r2, r2, #8
 8004fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0204 	bic.w	r2, r2, #4
 8004fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6999      	ldr	r1, [r3, #24]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	619a      	str	r2, [r3, #24]
      break;
 8004fee:	e0a3      	b.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fa9a 	bl	8005530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6999      	ldr	r1, [r3, #24]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	021a      	lsls	r2, r3, #8
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	619a      	str	r2, [r3, #24]
      break;
 8005030:	e082      	b.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fb03 	bl	8005644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0208 	orr.w	r2, r2, #8
 800504c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0204 	bic.w	r2, r2, #4
 800505c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69d9      	ldr	r1, [r3, #28]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	61da      	str	r2, [r3, #28]
      break;
 8005070:	e062      	b.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fb6b 	bl	8005754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800508c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69da      	ldr	r2, [r3, #28]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69d9      	ldr	r1, [r3, #28]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	021a      	lsls	r2, r3, #8
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	61da      	str	r2, [r3, #28]
      break;
 80050b2:	e041      	b.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fbd4 	bl	8005868 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0208 	orr.w	r2, r2, #8
 80050ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0204 	bic.w	r2, r2, #4
 80050de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050f2:	e021      	b.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fc18 	bl	8005930 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800510e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800511e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	021a      	lsls	r2, r3, #8
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005134:	e000      	b.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005136:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop

0800514c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIM_ConfigClockSource+0x18>
 8005160:	2302      	movs	r3, #2
 8005162:	e0b9      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x18c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800518e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b70      	cmp	r3, #112	; 0x70
 800519e:	d02e      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0xb2>
 80051a0:	2b70      	cmp	r3, #112	; 0x70
 80051a2:	d812      	bhi.n	80051ca <HAL_TIM_ConfigClockSource+0x7e>
 80051a4:	2b30      	cmp	r3, #48	; 0x30
 80051a6:	f000 8084 	beq.w	80052b2 <HAL_TIM_ConfigClockSource+0x166>
 80051aa:	2b30      	cmp	r3, #48	; 0x30
 80051ac:	d806      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x70>
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d07f      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x166>
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d07d      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x166>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d07b      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051ba:	e084      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80051bc:	2b50      	cmp	r3, #80	; 0x50
 80051be:	d048      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x106>
 80051c0:	2b60      	cmp	r3, #96	; 0x60
 80051c2:	d056      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x126>
 80051c4:	2b40      	cmp	r3, #64	; 0x40
 80051c6:	d064      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x146>
      break;
 80051c8:	e07d      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80051ca:	4a45      	ldr	r2, [pc, #276]	; (80052e0 <HAL_TIM_ConfigClockSource+0x194>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d070      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x166>
 80051d0:	4a43      	ldr	r2, [pc, #268]	; (80052e0 <HAL_TIM_ConfigClockSource+0x194>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d809      	bhi.n	80051ea <HAL_TIM_ConfigClockSource+0x9e>
 80051d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051da:	d027      	beq.n	800522c <HAL_TIM_ConfigClockSource+0xe0>
 80051dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80051e0:	d067      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x166>
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	d06d      	beq.n	80052c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80051e8:	e06d      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80051ea:	4a3e      	ldr	r2, [pc, #248]	; (80052e4 <HAL_TIM_ConfigClockSource+0x198>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d060      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x166>
 80051f0:	4a3d      	ldr	r2, [pc, #244]	; (80052e8 <HAL_TIM_ConfigClockSource+0x19c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d05d      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x166>
 80051f6:	4a3d      	ldr	r2, [pc, #244]	; (80052ec <HAL_TIM_ConfigClockSource+0x1a0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d05a      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x166>
      break;
 80051fc:	e063      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6899      	ldr	r1, [r3, #8]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f000 fc71 	bl	8005af4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005220:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	609a      	str	r2, [r3, #8]
      break;
 800522a:	e04c      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	6899      	ldr	r1, [r3, #8]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f000 fc5a 	bl	8005af4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800524e:	609a      	str	r2, [r3, #8]
      break;
 8005250:	e039      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	461a      	mov	r2, r3
 8005260:	f000 fbcc 	bl	80059fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2150      	movs	r1, #80	; 0x50
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fc25 	bl	8005aba <TIM_ITRx_SetConfig>
      break;
 8005270:	e029      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6859      	ldr	r1, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	461a      	mov	r2, r3
 8005280:	f000 fbeb 	bl	8005a5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2160      	movs	r1, #96	; 0x60
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fc15 	bl	8005aba <TIM_ITRx_SetConfig>
      break;
 8005290:	e019      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 fbac 	bl	80059fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2140      	movs	r1, #64	; 0x40
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fc05 	bl	8005aba <TIM_ITRx_SetConfig>
      break;
 80052b0:	e009      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f000 fbfc 	bl	8005aba <TIM_ITRx_SetConfig>
        break;
 80052c2:	e000      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80052c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	00100020 	.word	0x00100020
 80052e4:	00100040 	.word	0x00100040
 80052e8:	00100070 	.word	0x00100070
 80052ec:	00100030 	.word	0x00100030

080052f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a3c      	ldr	r2, [pc, #240]	; (80053f4 <TIM_Base_SetConfig+0x104>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00f      	beq.n	8005328 <TIM_Base_SetConfig+0x38>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530e:	d00b      	beq.n	8005328 <TIM_Base_SetConfig+0x38>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a39      	ldr	r2, [pc, #228]	; (80053f8 <TIM_Base_SetConfig+0x108>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_Base_SetConfig+0x38>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a38      	ldr	r2, [pc, #224]	; (80053fc <TIM_Base_SetConfig+0x10c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0x38>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a37      	ldr	r2, [pc, #220]	; (8005400 <TIM_Base_SetConfig+0x110>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a2d      	ldr	r2, [pc, #180]	; (80053f4 <TIM_Base_SetConfig+0x104>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01b      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005348:	d017      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a2a      	ldr	r2, [pc, #168]	; (80053f8 <TIM_Base_SetConfig+0x108>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d013      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a29      	ldr	r2, [pc, #164]	; (80053fc <TIM_Base_SetConfig+0x10c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00f      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a28      	ldr	r2, [pc, #160]	; (8005400 <TIM_Base_SetConfig+0x110>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00b      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a27      	ldr	r2, [pc, #156]	; (8005404 <TIM_Base_SetConfig+0x114>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d007      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a26      	ldr	r2, [pc, #152]	; (8005408 <TIM_Base_SetConfig+0x118>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_Base_SetConfig+0x8a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a25      	ldr	r2, [pc, #148]	; (800540c <TIM_Base_SetConfig+0x11c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a10      	ldr	r2, [pc, #64]	; (80053f4 <TIM_Base_SetConfig+0x104>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00f      	beq.n	80053d8 <TIM_Base_SetConfig+0xe8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a11      	ldr	r2, [pc, #68]	; (8005400 <TIM_Base_SetConfig+0x110>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00b      	beq.n	80053d8 <TIM_Base_SetConfig+0xe8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a10      	ldr	r2, [pc, #64]	; (8005404 <TIM_Base_SetConfig+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d007      	beq.n	80053d8 <TIM_Base_SetConfig+0xe8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a0f      	ldr	r2, [pc, #60]	; (8005408 <TIM_Base_SetConfig+0x118>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_Base_SetConfig+0xe8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a0e      	ldr	r2, [pc, #56]	; (800540c <TIM_Base_SetConfig+0x11c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d103      	bne.n	80053e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	615a      	str	r2, [r3, #20]
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800
 8005400:	40013400 	.word	0x40013400
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400
 800540c:	40014800 	.word	0x40014800

08005410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0201 	bic.w	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 0302 	bic.w	r3, r3, #2
 800545c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a2c      	ldr	r2, [pc, #176]	; (800551c <TIM_OC1_SetConfig+0x10c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00f      	beq.n	8005490 <TIM_OC1_SetConfig+0x80>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a2b      	ldr	r2, [pc, #172]	; (8005520 <TIM_OC1_SetConfig+0x110>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00b      	beq.n	8005490 <TIM_OC1_SetConfig+0x80>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a2a      	ldr	r2, [pc, #168]	; (8005524 <TIM_OC1_SetConfig+0x114>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d007      	beq.n	8005490 <TIM_OC1_SetConfig+0x80>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a29      	ldr	r2, [pc, #164]	; (8005528 <TIM_OC1_SetConfig+0x118>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC1_SetConfig+0x80>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a28      	ldr	r2, [pc, #160]	; (800552c <TIM_OC1_SetConfig+0x11c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d10c      	bne.n	80054aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0308 	bic.w	r3, r3, #8
 8005496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f023 0304 	bic.w	r3, r3, #4
 80054a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a1b      	ldr	r2, [pc, #108]	; (800551c <TIM_OC1_SetConfig+0x10c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00f      	beq.n	80054d2 <TIM_OC1_SetConfig+0xc2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <TIM_OC1_SetConfig+0x110>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00b      	beq.n	80054d2 <TIM_OC1_SetConfig+0xc2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a19      	ldr	r2, [pc, #100]	; (8005524 <TIM_OC1_SetConfig+0x114>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d007      	beq.n	80054d2 <TIM_OC1_SetConfig+0xc2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a18      	ldr	r2, [pc, #96]	; (8005528 <TIM_OC1_SetConfig+0x118>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d003      	beq.n	80054d2 <TIM_OC1_SetConfig+0xc2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a17      	ldr	r2, [pc, #92]	; (800552c <TIM_OC1_SetConfig+0x11c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d111      	bne.n	80054f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	621a      	str	r2, [r3, #32]
}
 8005510:	bf00      	nop
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	40012c00 	.word	0x40012c00
 8005520:	40013400 	.word	0x40013400
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f023 0210 	bic.w	r2, r3, #16
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800555e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f023 0320 	bic.w	r3, r3, #32
 800557e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a28      	ldr	r2, [pc, #160]	; (8005630 <TIM_OC2_SetConfig+0x100>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_OC2_SetConfig+0x6c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a27      	ldr	r2, [pc, #156]	; (8005634 <TIM_OC2_SetConfig+0x104>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d10d      	bne.n	80055b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <TIM_OC2_SetConfig+0x100>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00f      	beq.n	80055e0 <TIM_OC2_SetConfig+0xb0>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <TIM_OC2_SetConfig+0x104>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <TIM_OC2_SetConfig+0xb0>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a1b      	ldr	r2, [pc, #108]	; (8005638 <TIM_OC2_SetConfig+0x108>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d007      	beq.n	80055e0 <TIM_OC2_SetConfig+0xb0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a1a      	ldr	r2, [pc, #104]	; (800563c <TIM_OC2_SetConfig+0x10c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_OC2_SetConfig+0xb0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a19      	ldr	r2, [pc, #100]	; (8005640 <TIM_OC2_SetConfig+0x110>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d113      	bne.n	8005608 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40012c00 	.word	0x40012c00
 8005634:	40013400 	.word	0x40013400
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800

08005644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	021b      	lsls	r3, r3, #8
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a27      	ldr	r2, [pc, #156]	; (8005740 <TIM_OC3_SetConfig+0xfc>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_OC3_SetConfig+0x6a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a26      	ldr	r2, [pc, #152]	; (8005744 <TIM_OC3_SetConfig+0x100>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d10d      	bne.n	80056ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <TIM_OC3_SetConfig+0xfc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00f      	beq.n	80056f2 <TIM_OC3_SetConfig+0xae>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1b      	ldr	r2, [pc, #108]	; (8005744 <TIM_OC3_SetConfig+0x100>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <TIM_OC3_SetConfig+0xae>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <TIM_OC3_SetConfig+0x104>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d007      	beq.n	80056f2 <TIM_OC3_SetConfig+0xae>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <TIM_OC3_SetConfig+0x108>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_OC3_SetConfig+0xae>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a18      	ldr	r2, [pc, #96]	; (8005750 <TIM_OC3_SetConfig+0x10c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d113      	bne.n	800571a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	621a      	str	r2, [r3, #32]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40013400 	.word	0x40013400
 8005748:	40014000 	.word	0x40014000
 800574c:	40014400 	.word	0x40014400
 8005750:	40014800 	.word	0x40014800

08005754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	031b      	lsls	r3, r3, #12
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a28      	ldr	r2, [pc, #160]	; (8005854 <TIM_OC4_SetConfig+0x100>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_OC4_SetConfig+0x6c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a27      	ldr	r2, [pc, #156]	; (8005858 <TIM_OC4_SetConfig+0x104>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10d      	bne.n	80057dc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	031b      	lsls	r3, r3, #12
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <TIM_OC4_SetConfig+0x100>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00f      	beq.n	8005804 <TIM_OC4_SetConfig+0xb0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <TIM_OC4_SetConfig+0x104>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_OC4_SetConfig+0xb0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a1b      	ldr	r2, [pc, #108]	; (800585c <TIM_OC4_SetConfig+0x108>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_OC4_SetConfig+0xb0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a1a      	ldr	r2, [pc, #104]	; (8005860 <TIM_OC4_SetConfig+0x10c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC4_SetConfig+0xb0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a19      	ldr	r2, [pc, #100]	; (8005864 <TIM_OC4_SetConfig+0x110>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d113      	bne.n	800582c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800580a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005812:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	019b      	lsls	r3, r3, #6
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	019b      	lsls	r3, r3, #6
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800

08005868 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	041b      	lsls	r3, r3, #16
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a17      	ldr	r2, [pc, #92]	; (800591c <TIM_OC5_SetConfig+0xb4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00f      	beq.n	80058e2 <TIM_OC5_SetConfig+0x7a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a16      	ldr	r2, [pc, #88]	; (8005920 <TIM_OC5_SetConfig+0xb8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_OC5_SetConfig+0x7a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a15      	ldr	r2, [pc, #84]	; (8005924 <TIM_OC5_SetConfig+0xbc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_OC5_SetConfig+0x7a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a14      	ldr	r2, [pc, #80]	; (8005928 <TIM_OC5_SetConfig+0xc0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_OC5_SetConfig+0x7a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a13      	ldr	r2, [pc, #76]	; (800592c <TIM_OC5_SetConfig+0xc4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d109      	bne.n	80058f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40013400 	.word	0x40013400
 8005924:	40014000 	.word	0x40014000
 8005928:	40014400 	.word	0x40014400
 800592c:	40014800 	.word	0x40014800

08005930 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800595e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	051b      	lsls	r3, r3, #20
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4313      	orrs	r3, r2
 8005982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <TIM_OC6_SetConfig+0xb8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00f      	beq.n	80059ac <TIM_OC6_SetConfig+0x7c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a17      	ldr	r2, [pc, #92]	; (80059ec <TIM_OC6_SetConfig+0xbc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00b      	beq.n	80059ac <TIM_OC6_SetConfig+0x7c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <TIM_OC6_SetConfig+0xc0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d007      	beq.n	80059ac <TIM_OC6_SetConfig+0x7c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <TIM_OC6_SetConfig+0xc4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d003      	beq.n	80059ac <TIM_OC6_SetConfig+0x7c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a14      	ldr	r2, [pc, #80]	; (80059f8 <TIM_OC6_SetConfig+0xc8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d109      	bne.n	80059c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	029b      	lsls	r3, r3, #10
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	40013400 	.word	0x40013400
 80059f0:	40014000 	.word	0x40014000
 80059f4:	40014400 	.word	0x40014400
 80059f8:	40014800 	.word	0x40014800

080059fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f023 0201 	bic.w	r2, r3, #1
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f023 030a 	bic.w	r3, r3, #10
 8005a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	621a      	str	r2, [r3, #32]
}
 8005a4e:	bf00      	nop
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b087      	sub	sp, #28
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f023 0210 	bic.w	r2, r3, #16
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	031b      	lsls	r3, r3, #12
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	621a      	str	r2, [r3, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f043 0307 	orr.w	r3, r3, #7
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	609a      	str	r2, [r3, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	021a      	lsls	r2, r3, #8
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	609a      	str	r2, [r3, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2201      	movs	r2, #1
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1a      	ldr	r2, [r3, #32]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	43db      	mvns	r3, r3
 8005b56:	401a      	ands	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1a      	ldr	r2, [r3, #32]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d109      	bne.n	8005ba4 <HAL_TIMEx_PWMN_Start+0x24>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	bf14      	ite	ne
 8005b9c:	2301      	movne	r3, #1
 8005b9e:	2300      	moveq	r3, #0
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	e022      	b.n	8005bea <HAL_TIMEx_PWMN_Start+0x6a>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d109      	bne.n	8005bbe <HAL_TIMEx_PWMN_Start+0x3e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	bf14      	ite	ne
 8005bb6:	2301      	movne	r3, #1
 8005bb8:	2300      	moveq	r3, #0
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	e015      	b.n	8005bea <HAL_TIMEx_PWMN_Start+0x6a>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d109      	bne.n	8005bd8 <HAL_TIMEx_PWMN_Start+0x58>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	bf14      	ite	ne
 8005bd0:	2301      	movne	r3, #1
 8005bd2:	2300      	moveq	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	e008      	b.n	8005bea <HAL_TIMEx_PWMN_Start+0x6a>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	bf14      	ite	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	2300      	moveq	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e069      	b.n	8005cc6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <HAL_TIMEx_PWMN_Start+0x82>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c00:	e013      	b.n	8005c2a <HAL_TIMEx_PWMN_Start+0xaa>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d104      	bne.n	8005c12 <HAL_TIMEx_PWMN_Start+0x92>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c10:	e00b      	b.n	8005c2a <HAL_TIMEx_PWMN_Start+0xaa>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d104      	bne.n	8005c22 <HAL_TIMEx_PWMN_Start+0xa2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c20:	e003      	b.n	8005c2a <HAL_TIMEx_PWMN_Start+0xaa>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2202      	movs	r2, #2
 8005c26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2204      	movs	r2, #4
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f97a 	bl	8005f2c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a20      	ldr	r2, [pc, #128]	; (8005cd0 <HAL_TIMEx_PWMN_Start+0x150>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d018      	beq.n	8005c84 <HAL_TIMEx_PWMN_Start+0x104>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5a:	d013      	beq.n	8005c84 <HAL_TIMEx_PWMN_Start+0x104>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1c      	ldr	r2, [pc, #112]	; (8005cd4 <HAL_TIMEx_PWMN_Start+0x154>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00e      	beq.n	8005c84 <HAL_TIMEx_PWMN_Start+0x104>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a1b      	ldr	r2, [pc, #108]	; (8005cd8 <HAL_TIMEx_PWMN_Start+0x158>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d009      	beq.n	8005c84 <HAL_TIMEx_PWMN_Start+0x104>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a19      	ldr	r2, [pc, #100]	; (8005cdc <HAL_TIMEx_PWMN_Start+0x15c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_TIMEx_PWMN_Start+0x104>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <HAL_TIMEx_PWMN_Start+0x160>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d115      	bne.n	8005cb0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <HAL_TIMEx_PWMN_Start+0x164>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b06      	cmp	r3, #6
 8005c94:	d015      	beq.n	8005cc2 <HAL_TIMEx_PWMN_Start+0x142>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9c:	d011      	beq.n	8005cc2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0201 	orr.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cae:	e008      	b.n	8005cc2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	e000      	b.n	8005cc4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40013400 	.word	0x40013400
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	00010007 	.word	0x00010007

08005ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e065      	b.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2c      	ldr	r2, [pc, #176]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2b      	ldr	r2, [pc, #172]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d108      	bne.n	8005d46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d018      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d76:	d013      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00e      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d009      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d004      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d10c      	bne.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40013400 	.word	0x40013400
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40000800 	.word	0x40000800
 8005de8:	40014000 	.word	0x40014000

08005dec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e087      	b.n	8005f18 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a27      	ldr	r2, [pc, #156]	; (8005f24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a25      	ldr	r2, [pc, #148]	; (8005f28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d106      	bne.n	8005ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1d      	ldr	r2, [pc, #116]	; (8005f28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d126      	bne.n	8005f06 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	051b      	lsls	r3, r3, #20
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0e      	ldr	r2, [pc, #56]	; (8005f24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a0d      	ldr	r2, [pc, #52]	; (8005f28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d106      	bne.n	8005f06 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40013400 	.word	0x40013400

08005f2c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 031f 	and.w	r3, r3, #31
 8005f3e:	2204      	movs	r2, #4
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	401a      	ands	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1a      	ldr	r2, [r3, #32]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 031f 	and.w	r3, r3, #31
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	fa01 f303 	lsl.w	r3, r1, r3
 8005f64:	431a      	orrs	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	607a      	str	r2, [r7, #4]
 8005f82:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e05b      	b.n	8006046 <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d106      	bne.n	8005fa6 <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7fb fa27 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2224      	movs	r2, #36	; 0x24
 8005faa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0201 	bic.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f9da 	bl	8006378 <UART_SetConfig>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_MultiProcessor_Init+0x58>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e03b      	b.n	8006046 <HAL_MultiProcessor_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_MultiProcessor_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 fc76 	bl	80068c8 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ffa:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006002:	d10a      	bne.n	800601a <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	061a      	lsls	r2, r3, #24
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	430a      	orrs	r2, r1
 800602c:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fce4 	bl	8006a0c <UART_CheckIdleState>
 8006044:	4603      	mov	r3, r0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	f640 030f 	movw	r3, #2063	; 0x80f
 8006076:	4013      	ands	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d118      	bne.n	80060b2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b00      	cmp	r3, #0
 8006088:	d013      	beq.n	80060b2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	d104      	bne.n	800609e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d009      	beq.n	80060b2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8145 	beq.w	8006332 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	4798      	blx	r3
      }
      return;
 80060b0:	e13f      	b.n	8006332 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80e8 	beq.w	800628a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4ba1      	ldr	r3, [pc, #644]	; (8006344 <HAL_UART_IRQHandler+0x2f4>)
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d105      	bne.n	80060d0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4ba0      	ldr	r3, [pc, #640]	; (8006348 <HAL_UART_IRQHandler+0x2f8>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80dd 	beq.w	800628a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d010      	beq.n	80060fc <HAL_UART_IRQHandler+0xac>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2201      	movs	r2, #1
 80060ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	f043 0201 	orr.w	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d010      	beq.n	8006128 <HAL_UART_IRQHandler+0xd8>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2202      	movs	r2, #2
 8006116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	f043 0204 	orr.w	r2, r3, #4
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	d010      	beq.n	8006154 <HAL_UART_IRQHandler+0x104>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2204      	movs	r2, #4
 8006142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f043 0202 	orr.w	r2, r3, #2
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d015      	beq.n	800618a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d104      	bne.n	8006172 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4b76      	ldr	r3, [pc, #472]	; (8006344 <HAL_UART_IRQHandler+0x2f4>)
 800616c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2208      	movs	r2, #8
 8006178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006180:	f043 0208 	orr.w	r2, r3, #8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006190:	2b00      	cmp	r3, #0
 8006192:	d011      	beq.n	80061b8 <HAL_UART_IRQHandler+0x168>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00c      	beq.n	80061b8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ae:	f043 0220 	orr.w	r2, r3, #32
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80b9 	beq.w	8006336 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d011      	beq.n	80061f2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d004      	beq.n	8006212 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800620e:	2b00      	cmp	r3, #0
 8006210:	d031      	beq.n	8006276 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fcc2 	bl	8006b9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	d123      	bne.n	800626e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006234:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800623a:	2b00      	cmp	r3, #0
 800623c:	d013      	beq.n	8006266 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006242:	4a42      	ldr	r2, [pc, #264]	; (800634c <HAL_UART_IRQHandler+0x2fc>)
 8006244:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800624a:	4618      	mov	r0, r3
 800624c:	f7fc ffab 	bl	80031a6 <HAL_DMA_Abort_IT>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d017      	beq.n	8006286 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006264:	e00f      	b.n	8006286 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f87c 	bl	8006364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626c:	e00b      	b.n	8006286 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f878 	bl	8006364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	e007      	b.n	8006286 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f874 	bl	8006364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006284:	e057      	b.n	8006336 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006286:	bf00      	nop
    return;
 8006288:	e055      	b.n	8006336 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00d      	beq.n	80062b0 <HAL_UART_IRQHandler+0x260>
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d008      	beq.n	80062b0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fcca 	bl	8006c42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062ae:	e045      	b.n	800633c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d012      	beq.n	80062e0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d031      	beq.n	800633a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
    }
    return;
 80062de:	e02c      	b.n	800633a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d008      	beq.n	80062fc <HAL_UART_IRQHandler+0x2ac>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fc8a 	bl	8006c0e <UART_EndTransmit_IT>
    return;
 80062fa:	e01f      	b.n	800633c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <HAL_UART_IRQHandler+0x2c8>
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fcaa 	bl	8006c6a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006316:	e011      	b.n	800633c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00c      	beq.n	800633c <HAL_UART_IRQHandler+0x2ec>
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	da09      	bge.n	800633c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc94 	bl	8006c56 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800632e:	bf00      	nop
 8006330:	e004      	b.n	800633c <HAL_UART_IRQHandler+0x2ec>
      return;
 8006332:	bf00      	nop
 8006334:	e002      	b.n	800633c <HAL_UART_IRQHandler+0x2ec>
    return;
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <HAL_UART_IRQHandler+0x2ec>
    return;
 800633a:	bf00      	nop
  }
}
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	10000001 	.word	0x10000001
 8006348:	04000120 	.word	0x04000120
 800634c:	08006be3 	.word	0x08006be3

08006350 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006378:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800637c:	b088      	sub	sp, #32
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	4313      	orrs	r3, r2
 800639c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4bb0      	ldr	r3, [pc, #704]	; (8006670 <UART_SetConfig+0x2f8>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6812      	ldr	r2, [r2, #0]
 80063b6:	69f9      	ldr	r1, [r7, #28]
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4aa5      	ldr	r2, [pc, #660]	; (8006674 <UART_SetConfig+0x2fc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d004      	beq.n	80063ec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80063f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	69f9      	ldr	r1, [r7, #28]
 8006400:	430b      	orrs	r3, r1
 8006402:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	f023 010f 	bic.w	r1, r3, #15
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a96      	ldr	r2, [pc, #600]	; (8006678 <UART_SetConfig+0x300>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d121      	bne.n	8006468 <UART_SetConfig+0xf0>
 8006424:	4b95      	ldr	r3, [pc, #596]	; (800667c <UART_SetConfig+0x304>)
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d816      	bhi.n	8006460 <UART_SetConfig+0xe8>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <UART_SetConfig+0xc0>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	08006449 	.word	0x08006449
 800643c:	08006455 	.word	0x08006455
 8006440:	0800644f 	.word	0x0800644f
 8006444:	0800645b 	.word	0x0800645b
 8006448:	2301      	movs	r3, #1
 800644a:	76fb      	strb	r3, [r7, #27]
 800644c:	e0be      	b.n	80065cc <UART_SetConfig+0x254>
 800644e:	2302      	movs	r3, #2
 8006450:	76fb      	strb	r3, [r7, #27]
 8006452:	e0bb      	b.n	80065cc <UART_SetConfig+0x254>
 8006454:	2304      	movs	r3, #4
 8006456:	76fb      	strb	r3, [r7, #27]
 8006458:	e0b8      	b.n	80065cc <UART_SetConfig+0x254>
 800645a:	2308      	movs	r3, #8
 800645c:	76fb      	strb	r3, [r7, #27]
 800645e:	e0b5      	b.n	80065cc <UART_SetConfig+0x254>
 8006460:	2310      	movs	r3, #16
 8006462:	76fb      	strb	r3, [r7, #27]
 8006464:	bf00      	nop
 8006466:	e0b1      	b.n	80065cc <UART_SetConfig+0x254>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a84      	ldr	r2, [pc, #528]	; (8006680 <UART_SetConfig+0x308>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d134      	bne.n	80064dc <UART_SetConfig+0x164>
 8006472:	4b82      	ldr	r3, [pc, #520]	; (800667c <UART_SetConfig+0x304>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006478:	f003 030c 	and.w	r3, r3, #12
 800647c:	2b0c      	cmp	r3, #12
 800647e:	d829      	bhi.n	80064d4 <UART_SetConfig+0x15c>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <UART_SetConfig+0x110>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064bd 	.word	0x080064bd
 800648c:	080064d5 	.word	0x080064d5
 8006490:	080064d5 	.word	0x080064d5
 8006494:	080064d5 	.word	0x080064d5
 8006498:	080064c9 	.word	0x080064c9
 800649c:	080064d5 	.word	0x080064d5
 80064a0:	080064d5 	.word	0x080064d5
 80064a4:	080064d5 	.word	0x080064d5
 80064a8:	080064c3 	.word	0x080064c3
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064d5 	.word	0x080064d5
 80064b8:	080064cf 	.word	0x080064cf
 80064bc:	2300      	movs	r3, #0
 80064be:	76fb      	strb	r3, [r7, #27]
 80064c0:	e084      	b.n	80065cc <UART_SetConfig+0x254>
 80064c2:	2302      	movs	r3, #2
 80064c4:	76fb      	strb	r3, [r7, #27]
 80064c6:	e081      	b.n	80065cc <UART_SetConfig+0x254>
 80064c8:	2304      	movs	r3, #4
 80064ca:	76fb      	strb	r3, [r7, #27]
 80064cc:	e07e      	b.n	80065cc <UART_SetConfig+0x254>
 80064ce:	2308      	movs	r3, #8
 80064d0:	76fb      	strb	r3, [r7, #27]
 80064d2:	e07b      	b.n	80065cc <UART_SetConfig+0x254>
 80064d4:	2310      	movs	r3, #16
 80064d6:	76fb      	strb	r3, [r7, #27]
 80064d8:	bf00      	nop
 80064da:	e077      	b.n	80065cc <UART_SetConfig+0x254>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a68      	ldr	r2, [pc, #416]	; (8006684 <UART_SetConfig+0x30c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d120      	bne.n	8006528 <UART_SetConfig+0x1b0>
 80064e6:	4b65      	ldr	r3, [pc, #404]	; (800667c <UART_SetConfig+0x304>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d00f      	beq.n	8006514 <UART_SetConfig+0x19c>
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d802      	bhi.n	80064fe <UART_SetConfig+0x186>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <UART_SetConfig+0x190>
 80064fc:	e010      	b.n	8006520 <UART_SetConfig+0x1a8>
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d005      	beq.n	800650e <UART_SetConfig+0x196>
 8006502:	2b30      	cmp	r3, #48	; 0x30
 8006504:	d009      	beq.n	800651a <UART_SetConfig+0x1a2>
 8006506:	e00b      	b.n	8006520 <UART_SetConfig+0x1a8>
 8006508:	2300      	movs	r3, #0
 800650a:	76fb      	strb	r3, [r7, #27]
 800650c:	e05e      	b.n	80065cc <UART_SetConfig+0x254>
 800650e:	2302      	movs	r3, #2
 8006510:	76fb      	strb	r3, [r7, #27]
 8006512:	e05b      	b.n	80065cc <UART_SetConfig+0x254>
 8006514:	2304      	movs	r3, #4
 8006516:	76fb      	strb	r3, [r7, #27]
 8006518:	e058      	b.n	80065cc <UART_SetConfig+0x254>
 800651a:	2308      	movs	r3, #8
 800651c:	76fb      	strb	r3, [r7, #27]
 800651e:	e055      	b.n	80065cc <UART_SetConfig+0x254>
 8006520:	2310      	movs	r3, #16
 8006522:	76fb      	strb	r3, [r7, #27]
 8006524:	bf00      	nop
 8006526:	e051      	b.n	80065cc <UART_SetConfig+0x254>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a56      	ldr	r2, [pc, #344]	; (8006688 <UART_SetConfig+0x310>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d120      	bne.n	8006574 <UART_SetConfig+0x1fc>
 8006532:	4b52      	ldr	r3, [pc, #328]	; (800667c <UART_SetConfig+0x304>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d00f      	beq.n	8006560 <UART_SetConfig+0x1e8>
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	d802      	bhi.n	800654a <UART_SetConfig+0x1d2>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <UART_SetConfig+0x1dc>
 8006548:	e010      	b.n	800656c <UART_SetConfig+0x1f4>
 800654a:	2b80      	cmp	r3, #128	; 0x80
 800654c:	d005      	beq.n	800655a <UART_SetConfig+0x1e2>
 800654e:	2bc0      	cmp	r3, #192	; 0xc0
 8006550:	d009      	beq.n	8006566 <UART_SetConfig+0x1ee>
 8006552:	e00b      	b.n	800656c <UART_SetConfig+0x1f4>
 8006554:	2300      	movs	r3, #0
 8006556:	76fb      	strb	r3, [r7, #27]
 8006558:	e038      	b.n	80065cc <UART_SetConfig+0x254>
 800655a:	2302      	movs	r3, #2
 800655c:	76fb      	strb	r3, [r7, #27]
 800655e:	e035      	b.n	80065cc <UART_SetConfig+0x254>
 8006560:	2304      	movs	r3, #4
 8006562:	76fb      	strb	r3, [r7, #27]
 8006564:	e032      	b.n	80065cc <UART_SetConfig+0x254>
 8006566:	2308      	movs	r3, #8
 8006568:	76fb      	strb	r3, [r7, #27]
 800656a:	e02f      	b.n	80065cc <UART_SetConfig+0x254>
 800656c:	2310      	movs	r3, #16
 800656e:	76fb      	strb	r3, [r7, #27]
 8006570:	bf00      	nop
 8006572:	e02b      	b.n	80065cc <UART_SetConfig+0x254>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a3e      	ldr	r2, [pc, #248]	; (8006674 <UART_SetConfig+0x2fc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d124      	bne.n	80065c8 <UART_SetConfig+0x250>
 800657e:	4b3f      	ldr	r3, [pc, #252]	; (800667c <UART_SetConfig+0x304>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006584:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800658c:	d012      	beq.n	80065b4 <UART_SetConfig+0x23c>
 800658e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006592:	d802      	bhi.n	800659a <UART_SetConfig+0x222>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <UART_SetConfig+0x230>
 8006598:	e012      	b.n	80065c0 <UART_SetConfig+0x248>
 800659a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659e:	d006      	beq.n	80065ae <UART_SetConfig+0x236>
 80065a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065a4:	d009      	beq.n	80065ba <UART_SetConfig+0x242>
 80065a6:	e00b      	b.n	80065c0 <UART_SetConfig+0x248>
 80065a8:	2300      	movs	r3, #0
 80065aa:	76fb      	strb	r3, [r7, #27]
 80065ac:	e00e      	b.n	80065cc <UART_SetConfig+0x254>
 80065ae:	2302      	movs	r3, #2
 80065b0:	76fb      	strb	r3, [r7, #27]
 80065b2:	e00b      	b.n	80065cc <UART_SetConfig+0x254>
 80065b4:	2304      	movs	r3, #4
 80065b6:	76fb      	strb	r3, [r7, #27]
 80065b8:	e008      	b.n	80065cc <UART_SetConfig+0x254>
 80065ba:	2308      	movs	r3, #8
 80065bc:	76fb      	strb	r3, [r7, #27]
 80065be:	e005      	b.n	80065cc <UART_SetConfig+0x254>
 80065c0:	2310      	movs	r3, #16
 80065c2:	76fb      	strb	r3, [r7, #27]
 80065c4:	bf00      	nop
 80065c6:	e001      	b.n	80065cc <UART_SetConfig+0x254>
 80065c8:	2310      	movs	r3, #16
 80065ca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a28      	ldr	r2, [pc, #160]	; (8006674 <UART_SetConfig+0x2fc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	f040 80a1 	bne.w	800671a <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065d8:	7efb      	ldrb	r3, [r7, #27]
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d823      	bhi.n	8006626 <UART_SetConfig+0x2ae>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x26c>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006627 	.word	0x08006627
 80065ec:	08006611 	.word	0x08006611
 80065f0:	08006627 	.word	0x08006627
 80065f4:	08006617 	.word	0x08006617
 80065f8:	08006627 	.word	0x08006627
 80065fc:	08006627 	.word	0x08006627
 8006600:	08006627 	.word	0x08006627
 8006604:	0800661f 	.word	0x0800661f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006608:	f7fd fede 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 800660c:	6178      	str	r0, [r7, #20]
        break;
 800660e:	e00f      	b.n	8006630 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006610:	4b1e      	ldr	r3, [pc, #120]	; (800668c <UART_SetConfig+0x314>)
 8006612:	617b      	str	r3, [r7, #20]
        break;
 8006614:	e00c      	b.n	8006630 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006616:	f7fd fe69 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 800661a:	6178      	str	r0, [r7, #20]
        break;
 800661c:	e008      	b.n	8006630 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006622:	617b      	str	r3, [r7, #20]
        break;
 8006624:	e004      	b.n	8006630 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	76bb      	strb	r3, [r7, #26]
        break;
 800662e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8130 	beq.w	8006898 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	4a14      	ldr	r2, [pc, #80]	; (8006690 <UART_SetConfig+0x318>)
 800663e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006642:	461a      	mov	r2, r3
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	fbb3 f3f2 	udiv	r3, r3, r2
 800664a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	4613      	mov	r3, r2
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	4413      	add	r3, r2
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	429a      	cmp	r2, r3
 800665a:	d305      	bcc.n	8006668 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	d915      	bls.n	8006694 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	76bb      	strb	r3, [r7, #26]
 800666c:	e114      	b.n	8006898 <UART_SetConfig+0x520>
 800666e:	bf00      	nop
 8006670:	cfff69f3 	.word	0xcfff69f3
 8006674:	40008000 	.word	0x40008000
 8006678:	40013800 	.word	0x40013800
 800667c:	40021000 	.word	0x40021000
 8006680:	40004400 	.word	0x40004400
 8006684:	40004800 	.word	0x40004800
 8006688:	40004c00 	.word	0x40004c00
 800668c:	00f42400 	.word	0x00f42400
 8006690:	0800753c 	.word	0x0800753c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	4618      	mov	r0, r3
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	4a87      	ldr	r2, [pc, #540]	; (80068c0 <UART_SetConfig+0x548>)
 80066a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f04f 0400 	mov.w	r4, #0
 80066ac:	461a      	mov	r2, r3
 80066ae:	4623      	mov	r3, r4
 80066b0:	f7f9 fdb2 	bl	8000218 <__aeabi_uldivmod>
 80066b4:	4603      	mov	r3, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	4619      	mov	r1, r3
 80066ba:	4622      	mov	r2, r4
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	f04f 0400 	mov.w	r4, #0
 80066c4:	0214      	lsls	r4, r2, #8
 80066c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80066ca:	020b      	lsls	r3, r1, #8
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6852      	ldr	r2, [r2, #4]
 80066d0:	0852      	lsrs	r2, r2, #1
 80066d2:	4611      	mov	r1, r2
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	eb13 0b01 	adds.w	fp, r3, r1
 80066dc:	eb44 0c02 	adc.w	ip, r4, r2
 80066e0:	4658      	mov	r0, fp
 80066e2:	4661      	mov	r1, ip
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f04f 0400 	mov.w	r4, #0
 80066ec:	461a      	mov	r2, r3
 80066ee:	4623      	mov	r3, r4
 80066f0:	f7f9 fd92 	bl	8000218 <__aeabi_uldivmod>
 80066f4:	4603      	mov	r3, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006700:	d308      	bcc.n	8006714 <UART_SetConfig+0x39c>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006708:	d204      	bcs.n	8006714 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	e0c1      	b.n	8006898 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	76bb      	strb	r3, [r7, #26]
 8006718:	e0be      	b.n	8006898 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006722:	d164      	bne.n	80067ee <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8006724:	7efb      	ldrb	r3, [r7, #27]
 8006726:	2b08      	cmp	r3, #8
 8006728:	d827      	bhi.n	800677a <UART_SetConfig+0x402>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <UART_SetConfig+0x3b8>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006755 	.word	0x08006755
 8006734:	0800675d 	.word	0x0800675d
 8006738:	08006765 	.word	0x08006765
 800673c:	0800677b 	.word	0x0800677b
 8006740:	0800676b 	.word	0x0800676b
 8006744:	0800677b 	.word	0x0800677b
 8006748:	0800677b 	.word	0x0800677b
 800674c:	0800677b 	.word	0x0800677b
 8006750:	08006773 	.word	0x08006773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006754:	f7fd fe38 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8006758:	6178      	str	r0, [r7, #20]
        break;
 800675a:	e013      	b.n	8006784 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800675c:	f7fd fe4a 	bl	80043f4 <HAL_RCC_GetPCLK2Freq>
 8006760:	6178      	str	r0, [r7, #20]
        break;
 8006762:	e00f      	b.n	8006784 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006764:	4b57      	ldr	r3, [pc, #348]	; (80068c4 <UART_SetConfig+0x54c>)
 8006766:	617b      	str	r3, [r7, #20]
        break;
 8006768:	e00c      	b.n	8006784 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800676a:	f7fd fdbf 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 800676e:	6178      	str	r0, [r7, #20]
        break;
 8006770:	e008      	b.n	8006784 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006776:	617b      	str	r3, [r7, #20]
        break;
 8006778:	e004      	b.n	8006784 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	76bb      	strb	r3, [r7, #26]
        break;
 8006782:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8086 	beq.w	8006898 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	4a4b      	ldr	r2, [pc, #300]	; (80068c0 <UART_SetConfig+0x548>)
 8006792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006796:	461a      	mov	r2, r3
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	fbb3 f3f2 	udiv	r3, r3, r2
 800679e:	005a      	lsls	r2, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	085b      	lsrs	r3, r3, #1
 80067a6:	441a      	add	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b0f      	cmp	r3, #15
 80067b8:	d916      	bls.n	80067e8 <UART_SetConfig+0x470>
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c0:	d212      	bcs.n	80067e8 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f023 030f 	bic.w	r3, r3, #15
 80067ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	89fb      	ldrh	r3, [r7, #14]
 80067da:	4313      	orrs	r3, r2
 80067dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	89fa      	ldrh	r2, [r7, #14]
 80067e4:	60da      	str	r2, [r3, #12]
 80067e6:	e057      	b.n	8006898 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	76bb      	strb	r3, [r7, #26]
 80067ec:	e054      	b.n	8006898 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067ee:	7efb      	ldrb	r3, [r7, #27]
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d828      	bhi.n	8006846 <UART_SetConfig+0x4ce>
 80067f4:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <UART_SetConfig+0x484>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006821 	.word	0x08006821
 8006800:	08006829 	.word	0x08006829
 8006804:	08006831 	.word	0x08006831
 8006808:	08006847 	.word	0x08006847
 800680c:	08006837 	.word	0x08006837
 8006810:	08006847 	.word	0x08006847
 8006814:	08006847 	.word	0x08006847
 8006818:	08006847 	.word	0x08006847
 800681c:	0800683f 	.word	0x0800683f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006820:	f7fd fdd2 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8006824:	6178      	str	r0, [r7, #20]
        break;
 8006826:	e013      	b.n	8006850 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006828:	f7fd fde4 	bl	80043f4 <HAL_RCC_GetPCLK2Freq>
 800682c:	6178      	str	r0, [r7, #20]
        break;
 800682e:	e00f      	b.n	8006850 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006830:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <UART_SetConfig+0x54c>)
 8006832:	617b      	str	r3, [r7, #20]
        break;
 8006834:	e00c      	b.n	8006850 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006836:	f7fd fd59 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 800683a:	6178      	str	r0, [r7, #20]
        break;
 800683c:	e008      	b.n	8006850 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800683e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006842:	617b      	str	r3, [r7, #20]
        break;
 8006844:	e004      	b.n	8006850 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	76bb      	strb	r3, [r7, #26]
        break;
 800684e:	bf00      	nop
    }

    if (pclk != 0U)
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d020      	beq.n	8006898 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	4a19      	ldr	r2, [pc, #100]	; (80068c0 <UART_SetConfig+0x548>)
 800685c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006860:	461a      	mov	r2, r3
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	fbb3 f2f2 	udiv	r2, r3, r2
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	085b      	lsrs	r3, r3, #1
 800686e:	441a      	add	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	b29b      	uxth	r3, r3
 800687a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b0f      	cmp	r3, #15
 8006880:	d908      	bls.n	8006894 <UART_SetConfig+0x51c>
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	d204      	bcs.n	8006894 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	e001      	b.n	8006898 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80068b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80068c0:	0800753c 	.word	0x0800753c
 80068c4:	00f42400 	.word	0x00f42400

080068c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01a      	beq.n	80069de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c6:	d10a      	bne.n	80069de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a1c:	f7fa fdc4 	bl	80015a8 <HAL_GetTick>
 8006a20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d10e      	bne.n	8006a4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f82c 	bl	8006a9c <UART_WaitOnFlagUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e022      	b.n	8006a94 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d10e      	bne.n	8006a7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f816 	bl	8006a9c <UART_WaitOnFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00c      	b.n	8006a94 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aac:	e062      	b.n	8006b74 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab4:	d05e      	beq.n	8006b74 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab6:	f7fa fd77 	bl	80015a8 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d302      	bcc.n	8006acc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11d      	bne.n	8006b08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ada:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0201 	bic.w	r2, r2, #1
 8006aea:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e045      	b.n	8006b94 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d02e      	beq.n	8006b74 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b24:	d126      	bne.n	8006b74 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b2e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b3e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e00f      	b.n	8006b94 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69da      	ldr	r2, [r3, #28]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	bf0c      	ite	eq
 8006b84:	2301      	moveq	r3, #1
 8006b86:	2300      	movne	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d08d      	beq.n	8006aae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bb2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc2:	f023 0301 	bic.w	r3, r3, #1
 8006bc6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7ff fbaf 	bl	8006364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c24:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fb8b 	bl	8006350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b085      	sub	sp, #20
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e027      	b.n	8006ce4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2224      	movs	r2, #36	; 0x24
 8006ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0201 	bic.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cc2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e02d      	b.n	8006d64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2224      	movs	r2, #36	; 0x24
 8006d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f84f 	bl	8006de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e02d      	b.n	8006de0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2224      	movs	r2, #36	; 0x24
 8006d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0201 	bic.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f811 	bl	8006de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006df0:	4a2f      	ldr	r2, [pc, #188]	; (8006eb0 <UARTEx_SetNbDataToProcess+0xc8>)
 8006df2:	f107 0314 	add.w	r3, r7, #20
 8006df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dfa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006dfe:	4a2d      	ldr	r2, [pc, #180]	; (8006eb4 <UARTEx_SetNbDataToProcess+0xcc>)
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e08:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d108      	bne.n	8006e26 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e24:	e03d      	b.n	8006ea2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e26:	2308      	movs	r3, #8
 8006e28:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e2a:	2308      	movs	r3, #8
 8006e2c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	0e5b      	lsrs	r3, r3, #25
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	0f5b      	lsrs	r3, r3, #29
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e4e:	7fbb      	ldrb	r3, [r7, #30]
 8006e50:	7f3a      	ldrb	r2, [r7, #28]
 8006e52:	f107 0120 	add.w	r1, r7, #32
 8006e56:	440a      	add	r2, r1
 8006e58:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e60:	7f3a      	ldrb	r2, [r7, #28]
 8006e62:	f107 0120 	add.w	r1, r7, #32
 8006e66:	440a      	add	r2, r1
 8006e68:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e78:	7ffb      	ldrb	r3, [r7, #31]
 8006e7a:	7f7a      	ldrb	r2, [r7, #29]
 8006e7c:	f107 0120 	add.w	r1, r7, #32
 8006e80:	440a      	add	r2, r1
 8006e82:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e8a:	7f7a      	ldrb	r2, [r7, #29]
 8006e8c:	f107 0120 	add.w	r1, r7, #32
 8006e90:	440a      	add	r2, r1
 8006e92:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e96:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ea2:	bf00      	nop
 8006ea4:	3724      	adds	r7, #36	; 0x24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	08007514 	.word	0x08007514
 8006eb4:	0800751c 	.word	0x0800751c

08006eb8 <delay>:
#include "stdlib.h"
#include "oledfont.h"  	 

u8 OLED_GRAM[144][8];
void delay(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
	u8 t=3;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	71fb      	strb	r3, [r7, #7]
	while(t--);
 8006ec2:	bf00      	nop
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	1e5a      	subs	r2, r3, #1
 8006ec8:	71fa      	strb	r2, [r7, #7]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1fa      	bne.n	8006ec4 <delay+0xc>
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <OLED_WR_Byte>:
			OLED_WR_Byte(0xA0,OLED_CMD);
		}
}

void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	460a      	mov	r2, r1
 8006ee6:	71fb      	strb	r3, [r7, #7]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	71bb      	strb	r3, [r7, #6]
	u8 i;			  
	if(cmd)
 8006eec:	79bb      	ldrb	r3, [r7, #6]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d006      	beq.n	8006f00 <OLED_WR_Byte+0x24>
	  OLED_DC_Set();
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ef8:	4821      	ldr	r0, [pc, #132]	; (8006f80 <OLED_WR_Byte+0xa4>)
 8006efa:	f7fc fca5 	bl	8003848 <HAL_GPIO_WritePin>
 8006efe:	e005      	b.n	8006f0c <OLED_WR_Byte+0x30>
	else
	  OLED_DC_Clr();
 8006f00:	2200      	movs	r2, #0
 8006f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f06:	481e      	ldr	r0, [pc, #120]	; (8006f80 <OLED_WR_Byte+0xa4>)
 8006f08:	f7fc fc9e 	bl	8003848 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
 8006f10:	e028      	b.n	8006f64 <OLED_WR_Byte+0x88>
	{
		OLED_SCL_Clr();
 8006f12:	2200      	movs	r2, #0
 8006f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f18:	4819      	ldr	r0, [pc, #100]	; (8006f80 <OLED_WR_Byte+0xa4>)
 8006f1a:	f7fc fc95 	bl	8003848 <HAL_GPIO_WritePin>
		
		delay();
 8006f1e:	f7ff ffcb 	bl	8006eb8 <delay>
		if(dat&0x80)
 8006f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da06      	bge.n	8006f38 <OLED_WR_Byte+0x5c>
		   OLED_SDA_Set();
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f30:	4813      	ldr	r0, [pc, #76]	; (8006f80 <OLED_WR_Byte+0xa4>)
 8006f32:	f7fc fc89 	bl	8003848 <HAL_GPIO_WritePin>
 8006f36:	e005      	b.n	8006f44 <OLED_WR_Byte+0x68>
		else 
		   OLED_SDA_Clr();
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f3e:	4810      	ldr	r0, [pc, #64]	; (8006f80 <OLED_WR_Byte+0xa4>)
 8006f40:	f7fc fc82 	bl	8003848 <HAL_GPIO_WritePin>
		delay();
 8006f44:	f7ff ffb8 	bl	8006eb8 <delay>
		OLED_SCL_Set();
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f4e:	480c      	ldr	r0, [pc, #48]	; (8006f80 <OLED_WR_Byte+0xa4>)
 8006f50:	f7fc fc7a 	bl	8003848 <HAL_GPIO_WritePin>
		delay();
 8006f54:	f7ff ffb0 	bl	8006eb8 <delay>
		dat<<=1;   
 8006f58:	79fb      	ldrb	r3, [r7, #7]
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	3301      	adds	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	2b07      	cmp	r3, #7
 8006f68:	d9d3      	bls.n	8006f12 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_DC_Set();   	  
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f70:	4803      	ldr	r0, [pc, #12]	; (8006f80 <OLED_WR_Byte+0xa4>)
 8006f72:	f7fc fc69 	bl	8003848 <HAL_GPIO_WritePin>
}
 8006f76:	bf00      	nop
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	48000400 	.word	0x48000400

08006f84 <OLED_Refresh>:
	OLED_WR_Byte(0xAE,OLED_CMD);//�ر���Ļ
}

//�����Դ浽OLED	
void OLED_Refresh(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<8;i++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	71fb      	strb	r3, [r7, #7]
 8006f8e:	e026      	b.n	8006fde <OLED_Refresh+0x5a>
	{
	   OLED_WR_Byte(0xb0+i,OLED_CMD); //��������ʼ��ַ
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	3b50      	subs	r3, #80	; 0x50
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff ff9f 	bl	8006edc <OLED_WR_Byte>
	   OLED_WR_Byte(0x02,OLED_CMD);   //���õ�����ʼ��ַ
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	2002      	movs	r0, #2
 8006fa2:	f7ff ff9b 	bl	8006edc <OLED_WR_Byte>
	   OLED_WR_Byte(0x10,OLED_CMD);   //���ø�����ʼ��ַ
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2010      	movs	r0, #16
 8006faa:	f7ff ff97 	bl	8006edc <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 8006fae:	2300      	movs	r3, #0
 8006fb0:	71bb      	strb	r3, [r7, #6]
 8006fb2:	e00d      	b.n	8006fd0 <OLED_Refresh+0x4c>
		 OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8006fb4:	79ba      	ldrb	r2, [r7, #6]
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	490c      	ldr	r1, [pc, #48]	; (8006fec <OLED_Refresh+0x68>)
 8006fba:	00d2      	lsls	r2, r2, #3
 8006fbc:	440a      	add	r2, r1
 8006fbe:	4413      	add	r3, r2
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff ff89 	bl	8006edc <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 8006fca:	79bb      	ldrb	r3, [r7, #6]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	71bb      	strb	r3, [r7, #6]
 8006fd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	daed      	bge.n	8006fb4 <OLED_Refresh+0x30>
	for(i=0;i<8;i++)
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	71fb      	strb	r3, [r7, #7]
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	2b07      	cmp	r3, #7
 8006fe2:	d9d5      	bls.n	8006f90 <OLED_Refresh+0xc>
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	200002e4 	.word	0x200002e4

08006ff0 <OLED_Clear>:
//��������
void OLED_Clear(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<8;i++)
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	71fb      	strb	r3, [r7, #7]
 8006ffa:	e014      	b.n	8007026 <OLED_Clear+0x36>
	{
	   for(n=0;n<128;n++)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	71bb      	strb	r3, [r7, #6]
 8007000:	e00a      	b.n	8007018 <OLED_Clear+0x28>
			{
			 OLED_GRAM[n][i]=0;//�����������
 8007002:	79ba      	ldrb	r2, [r7, #6]
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	490c      	ldr	r1, [pc, #48]	; (8007038 <OLED_Clear+0x48>)
 8007008:	00d2      	lsls	r2, r2, #3
 800700a:	440a      	add	r2, r1
 800700c:	4413      	add	r3, r2
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
	   for(n=0;n<128;n++)
 8007012:	79bb      	ldrb	r3, [r7, #6]
 8007014:	3301      	adds	r3, #1
 8007016:	71bb      	strb	r3, [r7, #6]
 8007018:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800701c:	2b00      	cmp	r3, #0
 800701e:	daf0      	bge.n	8007002 <OLED_Clear+0x12>
	for(i=0;i<8;i++)
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	3301      	adds	r3, #1
 8007024:	71fb      	strb	r3, [r7, #7]
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	2b07      	cmp	r3, #7
 800702a:	d9e7      	bls.n	8006ffc <OLED_Clear+0xc>
			}
  }
	OLED_Refresh();//������ʾ
 800702c:	f7ff ffaa 	bl	8006f84 <OLED_Refresh>
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	200002e4 	.word	0x200002e4

0800703c <OLED_DrawPoint>:
//���� 
//x:0~127
//y:0~63
//t:1 ��� 0,���	
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	71fb      	strb	r3, [r7, #7]
 8007046:	460b      	mov	r3, r1
 8007048:	71bb      	strb	r3, [r7, #6]
 800704a:	4613      	mov	r3, r2
 800704c:	717b      	strb	r3, [r7, #5]
	u8 i,m,n;
	i=y/8;
 800704e:	79bb      	ldrb	r3, [r7, #6]
 8007050:	08db      	lsrs	r3, r3, #3
 8007052:	73fb      	strb	r3, [r7, #15]
	m=y%8;
 8007054:	79bb      	ldrb	r3, [r7, #6]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	73bb      	strb	r3, [r7, #14]
	n=1<<m;
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	2201      	movs	r2, #1
 8007060:	fa02 f303 	lsl.w	r3, r2, r3
 8007064:	737b      	strb	r3, [r7, #13]
	if(t){OLED_GRAM[x][i]|=n;}
 8007066:	797b      	ldrb	r3, [r7, #5]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d012      	beq.n	8007092 <OLED_DrawPoint+0x56>
 800706c:	79fa      	ldrb	r2, [r7, #7]
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	4925      	ldr	r1, [pc, #148]	; (8007108 <OLED_DrawPoint+0xcc>)
 8007072:	00d2      	lsls	r2, r2, #3
 8007074:	440a      	add	r2, r1
 8007076:	4413      	add	r3, r2
 8007078:	7818      	ldrb	r0, [r3, #0]
 800707a:	79fa      	ldrb	r2, [r7, #7]
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	7b79      	ldrb	r1, [r7, #13]
 8007080:	4301      	orrs	r1, r0
 8007082:	b2c8      	uxtb	r0, r1
 8007084:	4920      	ldr	r1, [pc, #128]	; (8007108 <OLED_DrawPoint+0xcc>)
 8007086:	00d2      	lsls	r2, r2, #3
 8007088:	440a      	add	r2, r1
 800708a:	4413      	add	r3, r2
 800708c:	4602      	mov	r2, r0
 800708e:	701a      	strb	r2, [r3, #0]
	{
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
		OLED_GRAM[x][i]|=n;
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
	}
}
 8007090:	e033      	b.n	80070fa <OLED_DrawPoint+0xbe>
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8007092:	79fa      	ldrb	r2, [r7, #7]
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	491c      	ldr	r1, [pc, #112]	; (8007108 <OLED_DrawPoint+0xcc>)
 8007098:	00d2      	lsls	r2, r2, #3
 800709a:	440a      	add	r2, r1
 800709c:	4413      	add	r3, r2
 800709e:	7819      	ldrb	r1, [r3, #0]
 80070a0:	79fa      	ldrb	r2, [r7, #7]
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	43c9      	mvns	r1, r1
 80070a6:	b2c8      	uxtb	r0, r1
 80070a8:	4917      	ldr	r1, [pc, #92]	; (8007108 <OLED_DrawPoint+0xcc>)
 80070aa:	00d2      	lsls	r2, r2, #3
 80070ac:	440a      	add	r2, r1
 80070ae:	4413      	add	r3, r2
 80070b0:	4602      	mov	r2, r0
 80070b2:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i]|=n;
 80070b4:	79fa      	ldrb	r2, [r7, #7]
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	4913      	ldr	r1, [pc, #76]	; (8007108 <OLED_DrawPoint+0xcc>)
 80070ba:	00d2      	lsls	r2, r2, #3
 80070bc:	440a      	add	r2, r1
 80070be:	4413      	add	r3, r2
 80070c0:	7818      	ldrb	r0, [r3, #0]
 80070c2:	79fa      	ldrb	r2, [r7, #7]
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	7b79      	ldrb	r1, [r7, #13]
 80070c8:	4301      	orrs	r1, r0
 80070ca:	b2c8      	uxtb	r0, r1
 80070cc:	490e      	ldr	r1, [pc, #56]	; (8007108 <OLED_DrawPoint+0xcc>)
 80070ce:	00d2      	lsls	r2, r2, #3
 80070d0:	440a      	add	r2, r1
 80070d2:	4413      	add	r3, r2
 80070d4:	4602      	mov	r2, r0
 80070d6:	701a      	strb	r2, [r3, #0]
		OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 80070d8:	79fa      	ldrb	r2, [r7, #7]
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	490a      	ldr	r1, [pc, #40]	; (8007108 <OLED_DrawPoint+0xcc>)
 80070de:	00d2      	lsls	r2, r2, #3
 80070e0:	440a      	add	r2, r1
 80070e2:	4413      	add	r3, r2
 80070e4:	7819      	ldrb	r1, [r3, #0]
 80070e6:	79fa      	ldrb	r2, [r7, #7]
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	43c9      	mvns	r1, r1
 80070ec:	b2c8      	uxtb	r0, r1
 80070ee:	4906      	ldr	r1, [pc, #24]	; (8007108 <OLED_DrawPoint+0xcc>)
 80070f0:	00d2      	lsls	r2, r2, #3
 80070f2:	440a      	add	r2, r1
 80070f4:	4413      	add	r3, r2
 80070f6:	4602      	mov	r2, r0
 80070f8:	701a      	strb	r2, [r3, #0]
}
 80070fa:	bf00      	nop
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	200002e4 	.word	0x200002e4

0800710c <OLED_ShowChar>:
//x:0~127
//y:0~63
//size1:ѡ������ 6x8/6x12/8x16/12x24
//mode:0,��ɫ��ʾ;1,������ʾ
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size1,u8 mode)
{
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	4604      	mov	r4, r0
 8007114:	4608      	mov	r0, r1
 8007116:	4611      	mov	r1, r2
 8007118:	461a      	mov	r2, r3
 800711a:	4623      	mov	r3, r4
 800711c:	71fb      	strb	r3, [r7, #7]
 800711e:	4603      	mov	r3, r0
 8007120:	71bb      	strb	r3, [r7, #6]
 8007122:	460b      	mov	r3, r1
 8007124:	717b      	strb	r3, [r7, #5]
 8007126:	4613      	mov	r3, r2
 8007128:	713b      	strb	r3, [r7, #4]
	u8 i,m,temp,size2,chr1;
	u8 x0=x,y0=y;
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	72bb      	strb	r3, [r7, #10]
 800712e:	79bb      	ldrb	r3, [r7, #6]
 8007130:	72fb      	strb	r3, [r7, #11]
	if(size1==8)size2=6;
 8007132:	793b      	ldrb	r3, [r7, #4]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d102      	bne.n	800713e <OLED_ShowChar+0x32>
 8007138:	2306      	movs	r3, #6
 800713a:	733b      	strb	r3, [r7, #12]
 800713c:	e014      	b.n	8007168 <OLED_ShowChar+0x5c>
	else size2=(size1/8+((size1%8)?1:0))*(size1/2);  //�õ�����һ���ַ���Ӧ������ռ���ֽ���
 800713e:	793b      	ldrb	r3, [r7, #4]
 8007140:	08db      	lsrs	r3, r3, #3
 8007142:	b2db      	uxtb	r3, r3
 8007144:	461a      	mov	r2, r3
 8007146:	793b      	ldrb	r3, [r7, #4]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	bf14      	ite	ne
 8007152:	2301      	movne	r3, #1
 8007154:	2300      	moveq	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	4413      	add	r3, r2
 800715a:	b2da      	uxtb	r2, r3
 800715c:	793b      	ldrb	r3, [r7, #4]
 800715e:	085b      	lsrs	r3, r3, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	fb12 f303 	smulbb	r3, r2, r3
 8007166:	733b      	strb	r3, [r7, #12]
	chr1=chr-' ';  //����ƫ�ƺ��ֵ
 8007168:	797b      	ldrb	r3, [r7, #5]
 800716a:	3b20      	subs	r3, #32
 800716c:	727b      	strb	r3, [r7, #9]
	for(i=0;i<size2;i++)
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
 8007172:	e078      	b.n	8007266 <OLED_ShowChar+0x15a>
	{
		if(size1==8)
 8007174:	793b      	ldrb	r3, [r7, #4]
 8007176:	2b08      	cmp	r3, #8
 8007178:	d10b      	bne.n	8007192 <OLED_ShowChar+0x86>
			  {temp=asc2_0806[chr1][i];} //����0806����
 800717a:	7a7a      	ldrb	r2, [r7, #9]
 800717c:	7bf9      	ldrb	r1, [r7, #15]
 800717e:	483e      	ldr	r0, [pc, #248]	; (8007278 <OLED_ShowChar+0x16c>)
 8007180:	4613      	mov	r3, r2
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	4413      	add	r3, r2
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	4403      	add	r3, r0
 800718a:	440b      	add	r3, r1
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	737b      	strb	r3, [r7, #13]
 8007190:	e028      	b.n	80071e4 <OLED_ShowChar+0xd8>
		else if(size1==12)
 8007192:	793b      	ldrb	r3, [r7, #4]
 8007194:	2b0c      	cmp	r3, #12
 8007196:	d10b      	bne.n	80071b0 <OLED_ShowChar+0xa4>
        {temp=asc2_1206[chr1][i];} //����1206����
 8007198:	7a7a      	ldrb	r2, [r7, #9]
 800719a:	7bf9      	ldrb	r1, [r7, #15]
 800719c:	4837      	ldr	r0, [pc, #220]	; (800727c <OLED_ShowChar+0x170>)
 800719e:	4613      	mov	r3, r2
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4403      	add	r3, r0
 80071a8:	440b      	add	r3, r1
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	737b      	strb	r3, [r7, #13]
 80071ae:	e019      	b.n	80071e4 <OLED_ShowChar+0xd8>
		else if(size1==16)
 80071b0:	793b      	ldrb	r3, [r7, #4]
 80071b2:	2b10      	cmp	r3, #16
 80071b4:	d108      	bne.n	80071c8 <OLED_ShowChar+0xbc>
        {temp=asc2_1608[chr1][i];} //����1608����
 80071b6:	7a7a      	ldrb	r2, [r7, #9]
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4931      	ldr	r1, [pc, #196]	; (8007280 <OLED_ShowChar+0x174>)
 80071bc:	0112      	lsls	r2, r2, #4
 80071be:	440a      	add	r2, r1
 80071c0:	4413      	add	r3, r2
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	737b      	strb	r3, [r7, #13]
 80071c6:	e00d      	b.n	80071e4 <OLED_ShowChar+0xd8>
		else if(size1==24)
 80071c8:	793b      	ldrb	r3, [r7, #4]
 80071ca:	2b18      	cmp	r3, #24
 80071cc:	d150      	bne.n	8007270 <OLED_ShowChar+0x164>
        {temp=asc2_2412[chr1][i];} //����2412����
 80071ce:	7a7a      	ldrb	r2, [r7, #9]
 80071d0:	7bf9      	ldrb	r1, [r7, #15]
 80071d2:	482c      	ldr	r0, [pc, #176]	; (8007284 <OLED_ShowChar+0x178>)
 80071d4:	4613      	mov	r3, r2
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4403      	add	r3, r0
 80071de:	440b      	add	r3, r1
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	737b      	strb	r3, [r7, #13]
		else return;
		for(m=0;m<8;m++)
 80071e4:	2300      	movs	r3, #0
 80071e6:	73bb      	strb	r3, [r7, #14]
 80071e8:	e022      	b.n	8007230 <OLED_ShowChar+0x124>
		{
			if(temp&0x01)OLED_DrawPoint(x,y,mode);
 80071ea:	7b7b      	ldrb	r3, [r7, #13]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d007      	beq.n	8007204 <OLED_ShowChar+0xf8>
 80071f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80071f8:	79b9      	ldrb	r1, [r7, #6]
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff ff1d 	bl	800703c <OLED_DrawPoint>
 8007202:	e00c      	b.n	800721e <OLED_ShowChar+0x112>
			else OLED_DrawPoint(x,y,!mode);
 8007204:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007208:	2b00      	cmp	r3, #0
 800720a:	bf0c      	ite	eq
 800720c:	2301      	moveq	r3, #1
 800720e:	2300      	movne	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	79b9      	ldrb	r1, [r7, #6]
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff ff0f 	bl	800703c <OLED_DrawPoint>
			temp>>=1;
 800721e:	7b7b      	ldrb	r3, [r7, #13]
 8007220:	085b      	lsrs	r3, r3, #1
 8007222:	737b      	strb	r3, [r7, #13]
			y++;
 8007224:	79bb      	ldrb	r3, [r7, #6]
 8007226:	3301      	adds	r3, #1
 8007228:	71bb      	strb	r3, [r7, #6]
		for(m=0;m<8;m++)
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	3301      	adds	r3, #1
 800722e:	73bb      	strb	r3, [r7, #14]
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b07      	cmp	r3, #7
 8007234:	d9d9      	bls.n	80071ea <OLED_ShowChar+0xde>
		}
		x++;
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	3301      	adds	r3, #1
 800723a:	71fb      	strb	r3, [r7, #7]
		if((size1!=8)&&((x-x0)==size1/2))
 800723c:	793b      	ldrb	r3, [r7, #4]
 800723e:	2b08      	cmp	r3, #8
 8007240:	d00c      	beq.n	800725c <OLED_ShowChar+0x150>
 8007242:	79fa      	ldrb	r2, [r7, #7]
 8007244:	7abb      	ldrb	r3, [r7, #10]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	793a      	ldrb	r2, [r7, #4]
 800724a:	0852      	lsrs	r2, r2, #1
 800724c:	b2d2      	uxtb	r2, r2
 800724e:	4293      	cmp	r3, r2
 8007250:	d104      	bne.n	800725c <OLED_ShowChar+0x150>
		{x=x0;y0=y0+8;}
 8007252:	7abb      	ldrb	r3, [r7, #10]
 8007254:	71fb      	strb	r3, [r7, #7]
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	3308      	adds	r3, #8
 800725a:	72fb      	strb	r3, [r7, #11]
		y=y0;
 800725c:	7afb      	ldrb	r3, [r7, #11]
 800725e:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<size2;i++)
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	3301      	adds	r3, #1
 8007264:	73fb      	strb	r3, [r7, #15]
 8007266:	7bfa      	ldrb	r2, [r7, #15]
 8007268:	7b3b      	ldrb	r3, [r7, #12]
 800726a:	429a      	cmp	r2, r3
 800726c:	d382      	bcc.n	8007174 <OLED_ShowChar+0x68>
 800726e:	e000      	b.n	8007272 <OLED_ShowChar+0x166>
		else return;
 8007270:	bf00      	nop
  }
}
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	bd90      	pop	{r4, r7, pc}
 8007278:	08007554 	.word	0x08007554
 800727c:	0800777c 	.word	0x0800777c
 8007280:	08007bf0 	.word	0x08007bf0
 8007284:	080081e0 	.word	0x080081e0

08007288 <OLED_Pow>:
  }
}

//m^n
u32 OLED_Pow(u8 m,u8 n)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	4603      	mov	r3, r0
 8007290:	460a      	mov	r2, r1
 8007292:	71fb      	strb	r3, [r7, #7]
 8007294:	4613      	mov	r3, r2
 8007296:	71bb      	strb	r3, [r7, #6]
	u32 result=1;
 8007298:	2301      	movs	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]
	while(n--)
 800729c:	e004      	b.n	80072a8 <OLED_Pow+0x20>
	{
	  result*=m;
 800729e:	79fa      	ldrb	r2, [r7, #7]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	fb02 f303 	mul.w	r3, r2, r3
 80072a6:	60fb      	str	r3, [r7, #12]
	while(n--)
 80072a8:	79bb      	ldrb	r3, [r7, #6]
 80072aa:	1e5a      	subs	r2, r3, #1
 80072ac:	71ba      	strb	r2, [r7, #6]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1f5      	bne.n	800729e <OLED_Pow+0x16>
	}
	return result;
 80072b2:	68fb      	ldr	r3, [r7, #12]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <OLED_ShowNum>:
//num :Ҫ��ʾ������
//len :���ֵ�λ��
//size:�����С
//mode:0,��ɫ��ʾ;1,������ʾ
void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 size1,u8 mode)
{
 80072c0:	b590      	push	{r4, r7, lr}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	603a      	str	r2, [r7, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	4603      	mov	r3, r0
 80072cc:	71fb      	strb	r3, [r7, #7]
 80072ce:	460b      	mov	r3, r1
 80072d0:	71bb      	strb	r3, [r7, #6]
 80072d2:	4613      	mov	r3, r2
 80072d4:	717b      	strb	r3, [r7, #5]
	u8 t,temp,m=0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73bb      	strb	r3, [r7, #14]
	if(size1==8)m=2;
 80072da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d101      	bne.n	80072e6 <OLED_ShowNum+0x26>
 80072e2:	2302      	movs	r3, #2
 80072e4:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]
 80072ea:	e051      	b.n	8007390 <OLED_ShowNum+0xd0>
	{
		temp=(num/OLED_Pow(10,len-t-1))%10;
 80072ec:	797a      	ldrb	r2, [r7, #5]
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	4619      	mov	r1, r3
 80072fa:	200a      	movs	r0, #10
 80072fc:	f7ff ffc4 	bl	8007288 <OLED_Pow>
 8007300:	4602      	mov	r2, r0
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	fbb3 f1f2 	udiv	r1, r3, r2
 8007308:	4b25      	ldr	r3, [pc, #148]	; (80073a0 <OLED_ShowNum+0xe0>)
 800730a:	fba3 2301 	umull	r2, r3, r3, r1
 800730e:	08da      	lsrs	r2, r3, #3
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	1aca      	subs	r2, r1, r3
 800731a:	4613      	mov	r3, r2
 800731c:	737b      	strb	r3, [r7, #13]
			if(temp==0)
 800731e:	7b7b      	ldrb	r3, [r7, #13]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d118      	bne.n	8007356 <OLED_ShowNum+0x96>
			{
				OLED_ShowChar(x+(size1/2+m)*t,y,'0',size1,mode);
 8007324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007328:	085b      	lsrs	r3, r3, #1
 800732a:	b2da      	uxtb	r2, r3
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	4413      	add	r3, r2
 8007330:	b2db      	uxtb	r3, r3
 8007332:	7bfa      	ldrb	r2, [r7, #15]
 8007334:	fb12 f303 	smulbb	r3, r2, r3
 8007338:	b2da      	uxtb	r2, r3
 800733a:	79fb      	ldrb	r3, [r7, #7]
 800733c:	4413      	add	r3, r2
 800733e:	b2d8      	uxtb	r0, r3
 8007340:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007344:	79b9      	ldrb	r1, [r7, #6]
 8007346:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	2230      	movs	r2, #48	; 0x30
 8007350:	f7ff fedc 	bl	800710c <OLED_ShowChar>
 8007354:	e019      	b.n	800738a <OLED_ShowNum+0xca>
      }
			else 
			{
			  OLED_ShowChar(x+(size1/2+m)*t,y,temp+'0',size1,mode);
 8007356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800735a:	085b      	lsrs	r3, r3, #1
 800735c:	b2da      	uxtb	r2, r3
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	4413      	add	r3, r2
 8007362:	b2db      	uxtb	r3, r3
 8007364:	7bfa      	ldrb	r2, [r7, #15]
 8007366:	fb12 f303 	smulbb	r3, r2, r3
 800736a:	b2da      	uxtb	r2, r3
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	4413      	add	r3, r2
 8007370:	b2d8      	uxtb	r0, r3
 8007372:	7b7b      	ldrb	r3, [r7, #13]
 8007374:	3330      	adds	r3, #48	; 0x30
 8007376:	b2da      	uxtb	r2, r3
 8007378:	f897 4020 	ldrb.w	r4, [r7, #32]
 800737c:	79b9      	ldrb	r1, [r7, #6]
 800737e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	4623      	mov	r3, r4
 8007386:	f7ff fec1 	bl	800710c <OLED_ShowChar>
	for(t=0;t<len;t++)
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	3301      	adds	r3, #1
 800738e:	73fb      	strb	r3, [r7, #15]
 8007390:	7bfa      	ldrb	r2, [r7, #15]
 8007392:	797b      	ldrb	r3, [r7, #5]
 8007394:	429a      	cmp	r2, r3
 8007396:	d3a9      	bcc.n	80072ec <OLED_ShowNum+0x2c>
			}
  }
}
 8007398:	bf00      	nop
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	bd90      	pop	{r4, r7, pc}
 80073a0:	cccccccd 	.word	0xcccccccd

080073a4 <OLED_Init>:
     }
	 }
}
//OLED�ĳ�ʼ��
void OLED_Init(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
	OLED_RES_Clr();
 80073a8:	2200      	movs	r2, #0
 80073aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073ae:	483c      	ldr	r0, [pc, #240]	; (80074a0 <OLED_Init+0xfc>)
 80073b0:	f7fc fa4a 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80073b4:	20c8      	movs	r0, #200	; 0xc8
 80073b6:	f7fa f903 	bl	80015c0 <HAL_Delay>
	OLED_RES_Set();
 80073ba:	2201      	movs	r2, #1
 80073bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073c0:	4837      	ldr	r0, [pc, #220]	; (80074a0 <OLED_Init+0xfc>)
 80073c2:	f7fc fa41 	bl	8003848 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); /*display off*/ 
 80073c6:	2100      	movs	r1, #0
 80073c8:	20ae      	movs	r0, #174	; 0xae
 80073ca:	f7ff fd87 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); /*set lower column address*/ 
 80073ce:	2100      	movs	r1, #0
 80073d0:	2002      	movs	r0, #2
 80073d2:	f7ff fd83 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD); /*set higher column address*/ 
 80073d6:	2100      	movs	r1, #0
 80073d8:	2010      	movs	r0, #16
 80073da:	f7ff fd7f 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD); /*set display start line*/ 
 80073de:	2100      	movs	r1, #0
 80073e0:	2040      	movs	r0, #64	; 0x40
 80073e2:	f7ff fd7b 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD); /*set page address*/
 80073e6:	2100      	movs	r1, #0
 80073e8:	20b0      	movs	r0, #176	; 0xb0
 80073ea:	f7ff fd77 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); /*contract control*/ 
 80073ee:	2100      	movs	r1, #0
 80073f0:	2081      	movs	r0, #129	; 0x81
 80073f2:	f7ff fd73 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xcf,OLED_CMD); /*128*/ 
 80073f6:	2100      	movs	r1, #0
 80073f8:	20cf      	movs	r0, #207	; 0xcf
 80073fa:	f7ff fd6f 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); /*set segment remap*/ 
 80073fe:	2100      	movs	r1, #0
 8007400:	20a1      	movs	r0, #161	; 0xa1
 8007402:	f7ff fd6b 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); /*normal / reverse*/ 
 8007406:	2100      	movs	r1, #0
 8007408:	20a6      	movs	r0, #166	; 0xa6
 800740a:	f7ff fd67 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); /*multiplex ratio*/ 
 800740e:	2100      	movs	r1, #0
 8007410:	20a8      	movs	r0, #168	; 0xa8
 8007412:	f7ff fd63 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD); /*duty = 1/64*/ 
 8007416:	2100      	movs	r1, #0
 8007418:	203f      	movs	r0, #63	; 0x3f
 800741a:	f7ff fd5f 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xad,OLED_CMD); /*set charge pump enable*/ 
 800741e:	2100      	movs	r1, #0
 8007420:	20ad      	movs	r0, #173	; 0xad
 8007422:	f7ff fd5b 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x8b,OLED_CMD); /* 0x8B �ڹ� VCC */ 
 8007426:	2100      	movs	r1, #0
 8007428:	208b      	movs	r0, #139	; 0x8b
 800742a:	f7ff fd57 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x33,OLED_CMD); /*0X30---0X33 set VPP 9V */ 
 800742e:	2100      	movs	r1, #0
 8007430:	2033      	movs	r0, #51	; 0x33
 8007432:	f7ff fd53 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD); /*Com scan direction*/ 
 8007436:	2100      	movs	r1, #0
 8007438:	20c8      	movs	r0, #200	; 0xc8
 800743a:	f7ff fd4f 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); /*set display offset*/ 
 800743e:	2100      	movs	r1, #0
 8007440:	20d3      	movs	r0, #211	; 0xd3
 8007442:	f7ff fd4b 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD); /* 0x20 */ 
 8007446:	2100      	movs	r1, #0
 8007448:	2000      	movs	r0, #0
 800744a:	f7ff fd47 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); /*set osc division*/ 
 800744e:	2100      	movs	r1, #0
 8007450:	20d5      	movs	r0, #213	; 0xd5
 8007452:	f7ff fd43 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD); 
 8007456:	2100      	movs	r1, #0
 8007458:	2080      	movs	r0, #128	; 0x80
 800745a:	f7ff fd3f 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); /*set pre-charge period*/ 
 800745e:	2100      	movs	r1, #0
 8007460:	20d9      	movs	r0, #217	; 0xd9
 8007462:	f7ff fd3b 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x1f,OLED_CMD); /*0x22*/ 
 8007466:	2100      	movs	r1, #0
 8007468:	201f      	movs	r0, #31
 800746a:	f7ff fd37 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); /*set COM pins*/ 
 800746e:	2100      	movs	r1, #0
 8007470:	20da      	movs	r0, #218	; 0xda
 8007472:	f7ff fd33 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); 
 8007476:	2100      	movs	r1, #0
 8007478:	2012      	movs	r0, #18
 800747a:	f7ff fd2f 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0xdb,OLED_CMD); /*set vcomh*/ 
 800747e:	2100      	movs	r1, #0
 8007480:	20db      	movs	r0, #219	; 0xdb
 8007482:	f7ff fd2b 	bl	8006edc <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);
 8007486:	2100      	movs	r1, #0
 8007488:	2040      	movs	r0, #64	; 0x40
 800748a:	f7ff fd27 	bl	8006edc <OLED_WR_Byte>
	OLED_Clear();
 800748e:	f7ff fdaf 	bl	8006ff0 <OLED_Clear>
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/
 8007492:	2100      	movs	r1, #0
 8007494:	20af      	movs	r0, #175	; 0xaf
 8007496:	f7ff fd21 	bl	8006edc <OLED_WR_Byte>
}
 800749a:	bf00      	nop
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	48000400 	.word	0x48000400

080074a4 <__libc_init_array>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	4e0d      	ldr	r6, [pc, #52]	; (80074dc <__libc_init_array+0x38>)
 80074a8:	4c0d      	ldr	r4, [pc, #52]	; (80074e0 <__libc_init_array+0x3c>)
 80074aa:	1ba4      	subs	r4, r4, r6
 80074ac:	10a4      	asrs	r4, r4, #2
 80074ae:	2500      	movs	r5, #0
 80074b0:	42a5      	cmp	r5, r4
 80074b2:	d109      	bne.n	80074c8 <__libc_init_array+0x24>
 80074b4:	4e0b      	ldr	r6, [pc, #44]	; (80074e4 <__libc_init_array+0x40>)
 80074b6:	4c0c      	ldr	r4, [pc, #48]	; (80074e8 <__libc_init_array+0x44>)
 80074b8:	f000 f820 	bl	80074fc <_init>
 80074bc:	1ba4      	subs	r4, r4, r6
 80074be:	10a4      	asrs	r4, r4, #2
 80074c0:	2500      	movs	r5, #0
 80074c2:	42a5      	cmp	r5, r4
 80074c4:	d105      	bne.n	80074d2 <__libc_init_array+0x2e>
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074cc:	4798      	blx	r3
 80074ce:	3501      	adds	r5, #1
 80074d0:	e7ee      	b.n	80074b0 <__libc_init_array+0xc>
 80074d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074d6:	4798      	blx	r3
 80074d8:	3501      	adds	r5, #1
 80074da:	e7f2      	b.n	80074c2 <__libc_init_array+0x1e>
 80074dc:	08008f44 	.word	0x08008f44
 80074e0:	08008f44 	.word	0x08008f44
 80074e4:	08008f44 	.word	0x08008f44
 80074e8:	08008f48 	.word	0x08008f48

080074ec <memset>:
 80074ec:	4402      	add	r2, r0
 80074ee:	4603      	mov	r3, r0
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d100      	bne.n	80074f6 <memset+0xa>
 80074f4:	4770      	bx	lr
 80074f6:	f803 1b01 	strb.w	r1, [r3], #1
 80074fa:	e7f9      	b.n	80074f0 <memset+0x4>

080074fc <_init>:
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	bf00      	nop
 8007500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007502:	bc08      	pop	{r3}
 8007504:	469e      	mov	lr, r3
 8007506:	4770      	bx	lr

08007508 <_fini>:
 8007508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750a:	bf00      	nop
 800750c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750e:	bc08      	pop	{r3}
 8007510:	469e      	mov	lr, r3
 8007512:	4770      	bx	lr
